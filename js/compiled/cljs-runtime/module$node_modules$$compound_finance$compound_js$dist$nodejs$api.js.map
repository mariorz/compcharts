{
"version":3,
"file":"module$node_modules$$compound_finance$compound_js$dist$nodejs$api.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,iEAAf,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6J9HC,QAASA,SAAQ,CAACC,OAAD,CAAUC,IAAV,CAAgBC,IAAhB,CAAsB,CACnC,MAAO,KAAIC,OAAJ,CAAY,QAAS,CAACC,OAAD,CAAUC,MAAV,CAAkB,CAC1C,IAAIC,YAAc,kBAAdA,CAAmCL,IAAnCK,CAA0C,MAA9C,CACIC,YADJ,CACkBC,eAClBC,OAAA,CAAOC,OAAP,CAAe,CACXC,SAAU,8BADC,CAEXT,KAAMA,IAFK,CAGXU,OAAQ,MAHG,CAIXC,QAAS,CACL,eAAgB,kBADX,CAJE,CAOXC,KAAMd,OAPK,CAAf,CAAA,CAQGe,IARH,CAQQ,QAAS,CAACC,QAAD,CAAW,CACxBT,YAAA,CAAeS,QAAf,CAAwBC,MACxBT,gBAAA,CAAkBQ,QAAlB,CAA2BE,UACvBC;QAAAA,CAAeC,IAAA,CAAKC,KAAL,CAAWL,QAAX,CAAoBF,IAApB,CACnB,IAAoB,GAApB,EAAIP,YAAJ,EAA2C,GAA3C,EAA2BA,YAA3B,CACIH,OAAA,CAAQe,QAAR,CADJ,KAII,MAAM,2CAAN,CARoB,CAR5B,CAAA,CAkBG,OAlBH,CAAA,CAkBY,QAAS,CAACG,KAAD,CAAQ,CAQzBjB,MAAA,CAAO,CAAEiB,MANU,aAAnBC,GAAID,KAAJC,CAAUtB,IAAVsB,CACmBjB,WADnBiB,CACiC,gCADjCA,CAImBjB,WAJnBiB,CAIiCD,KAAA,CAAME,QAAN,EAE1B,CAAuBjB,aAAcA,YAArC,CAAmDC,gBAAiBA,eAApE,CAAP,CARyB,CAlB7B,CAH0C,CAAvC,CAD4B,CAvJvCV,OAAA,CAAQ2B,UAAR,CAAqB,CAAA,CACrB3B,QAAA,CAAQ4B,UAAR,CAAqB5B,OAArB,CAA6B6B,aAA7B,CAA6C7B,OAA7C,CAAqD8B,MAArD,CAA8D9B,OAA9D,CAAsE+B,OAAtE,CAAgF,IAAK,EACrF,KAAIpB,OAASb,OAAA,CAAQ,oEAAR,CA0DbE;OAAA,CAAQ+B,OAAR,CAHAA,QAAgB,CAAC7B,OAAD,CAAU,CACtB,MAAOD,SAAA,CAASC,OAAT,CAAkB,SAAlB,CAA6B,iBAA7B,CADe,CA4B1BF,QAAA,CAAQ8B,MAAR,CAHAA,QAAe,CAAC5B,OAAD,CAAU,CACrB,MAAOD,SAAA,CAASC,OAAT,CAAkB,QAAlB,CAA4B,gBAA5B,CADc,CA+BzBF,QAAA,CAAQ6B,aAAR,CAHAA,QAAsB,CAAC3B,OAAD,CAAU,CAC5B,MAAOD,SAAA,CAASC,OAAT,CAAkB,gBAAlB,CAAoC,8BAApC,CADqB,CAwChCF,QAAA,CAAQ4B,UAAR,CAZAA,QAAmB,CAAC1B,OAAD,CAAU8B,QAAV,CAAoB,CAUnC,MAAO/B,SAAA,CAASC,OAAT,CAAkB,mBAAlB,CATU,WAAjB8B,GAAIA,QAAJA,CACe,8BADfA,CAGsB,cAAjB,GAAIA,QAAJ,CACU,2CADV;AAIU,6BAER,CAV4B,CAhJuF;",
"sources":["node_modules/@compound-finance/compound-js/dist/nodejs/api.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$compound_finance$compound_js$dist$nodejs$api\"] = function(global,require,module,exports) {\n\"use strict\";\n/**\n * @file API\n * @desc These methods facilitate HTTP requests to the Compound API.\n */\nexports.__esModule = true;\nexports.governance = exports.marketHistory = exports.cToken = exports.account = void 0;\nvar util_1 = require(\"./util\");\n// import { version } from '../package.json';\n// let userPlatform;\n// try {\n//   if (typeof document !== 'undefined') {\n//     userPlatform = 'web';\n//   } else if (\n//     typeof navigator !== 'undefined' &&\n//     navigator.product === 'ReactNative'\n//   ) {\n//     userPlatform = 'react-native';\n//   } else if (\n//     typeof navigator !== 'undefined' && \n//     navigator.userAgent.toLowerCase().indexOf('electron') > -1\n//   ) {\n//     userPlatform = 'electron-js';\n//   } else {\n//     userPlatform = 'node-js';\n//   }\n// } catch (e) {\n//   userPlatform = 'unknown';\n// }\n/**\n * Makes a request to the AccountService API. The Account API retrieves\n *     information for various accounts which have interacted with the protocol.\n *     For more details, see the Compound API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const account = await Compound.api.account({\n *     \"addresses\": \"0xB61C5971d9c0472befceFfbE662555B78284c307\",\n *     \"network\": \"ropsten\"\n *   });\n *\n *   let daiBorrowBalance = 0;\n *   if (Object.isExtensible(account) && account.accounts) {\n *     account.accounts.forEach((acc) => {\n *       acc.tokens.forEach((tok) => {\n *         if (tok.symbol === Compound.cDAI) {\n *           daiBorrowBalance = +tok.borrow_balance_underlying.value;\n *         }\n *       });\n *     });\n *   }\n *\n *   console.log('daiBorrowBalance', daiBorrowBalance);\n * })().catch(console.error);\n * ```\n */\nfunction account(options) {\n    return queryApi(options, 'account', '/api/v2/account');\n}\nexports.account = account;\n/**\n * Makes a request to the CTokenService API. The cToken API retrieves\n *     information about cToken contract interaction. For more details, see the\n *     Compound API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const cDaiData = await Compound.api.cToken({\n *     \"addresses\": Compound.util.getAddress(Compound.cDAI)\n *   });\n *\n *   console.log('cDaiData', cDaiData); // JavaScript Object\n * })().catch(console.error);\n * ```\n */\nfunction cToken(options) {\n    return queryApi(options, 'cToken', '/api/v2/ctoken');\n}\nexports.cToken = cToken;\n/**\n * Makes a request to the MarketHistoryService API. The market history service\n *     retrieves information about a market. For more details, see the Compound\n *     API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const cUsdcMarketData = await Compound.api.marketHistory({\n *     \"asset\": Compound.util.getAddress(Compound.cUSDC),\n *     \"min_block_timestamp\": 1559339900,\n *     \"max_block_timestamp\": 1598320674,\n *     \"num_buckets\": 10,\n *   });\n *\n *   console.log('cUsdcMarketData', cUsdcMarketData); // JavaScript Object\n * })().catch(console.error);\n * ```\n */\nfunction marketHistory(options) {\n    return queryApi(options, 'Market History', '/api/v2/market_history/graph');\n}\nexports.marketHistory = marketHistory;\n/**\n * Makes a request to the GovernanceService API. The Governance Service includes\n *     three endpoints to retrieve information about COMP accounts. For more\n *     details, see the Compound API documentation.\n *\n * @param {object} options A JavaScript object of API request parameters.\n * @param {string} endpoint A string of the name of the corresponding governance\n *     service endpoint. Valid values are `proposals`, `voteReceipts`, or\n *     `accounts`.\n *\n * @returns {object} Returns the HTTP response body or error.\n *\n * @example\n *\n * ```\n * (async function() {\n *   const proposal = await Compound.api.governance(\n *     { \"proposal_ids\": [ 20 ] }, 'proposals'\n *   );\n *\n *   console.log('proposal', proposal); // JavaScript Object\n * })().catch(console.error);\n * ```\n */\nfunction governance(options, endpoint) {\n    if (endpoint === 'proposals') {\n        endpoint = '/api/v2/governance/proposals';\n    }\n    else if (endpoint === 'voteReceipts') {\n        endpoint = '/api/v2/governance/proposal_vote_receipts';\n    }\n    else {\n        endpoint = '/api/v2/governance/accounts';\n    }\n    return queryApi(options, 'GovernanceService', endpoint);\n}\nexports.governance = governance;\nfunction queryApi(options, name, path) {\n    return new Promise(function (resolve, reject) {\n        var errorPrefix = \"Compound [api] [\" + name + \"] | \";\n        var responseCode, responseMessage;\n        util_1.request({\n            hostname: 'https://api.compound.finance',\n            path: path,\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: options\n        }).then(function (response) {\n            responseCode = response.status;\n            responseMessage = response.statusText;\n            var responseBody = JSON.parse(response.body);\n            if (responseCode >= 200 && responseCode <= 299) {\n                resolve(responseBody);\n            }\n            else {\n                throw 'Invalid request made to the Compound API.';\n            }\n        })[\"catch\"](function (error) {\n            var errorMessage = '';\n            if (error.name === 'SyntaxError') {\n                errorMessage = errorPrefix + \"Unable to parse response body.\";\n            }\n            else {\n                errorMessage = errorPrefix + error.toString();\n            }\n            reject({ error: errorMessage, responseCode: responseCode, responseMessage: responseMessage });\n        });\n    });\n}\n//# sourceMappingURL=api.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","queryApi","options","name","path","Promise","resolve","reject","errorPrefix","responseCode","responseMessage","util_1","request","hostname","method","headers","body","then","response","status","statusText","responseBody","JSON","parse","error","errorMessage","toString","__esModule","governance","marketHistory","cToken","account","endpoint"]
}
