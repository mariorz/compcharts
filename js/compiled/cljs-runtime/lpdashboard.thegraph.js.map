{"version":3,"sources":["lpdashboard/thegraph.cljs"],"mappings":";;AASA,AAAA,AAAKA;AAIL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAA,AAEiD,AAACC,AAA0BD;;AA+B9E,AAAA,AAAKE;AAGL,AAAA,AAAMC,AACHC,AAAKC;AADR,AAEE,AAAA,AAEK,AAACC,AAAMC,AACA,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAA,AAAA,AAAA,AACK,AAAAD,AAACP,AAED,AAACA,AAA0BG;AANlD,AASiBC;;AA+BnB,AAAA,AAAMK,AACHL;AADH,AAEE,AAAA,AAEK,AAACC,AAAMC,AACA,AAAA,AAAAI,AAACF;AAAD,AAAM,AAAA,AAAA,AAAU,AAAAE,AAACV;AAH7B,AAIiBI;;AA8BnB,AAAA,AAAMO,AACHC;AADH,AAEE,AAAA,AAAA,AAC0BA;;AAmC5B,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAA,AAG0CA;;AAiC5C,AAAA,AAAMC,AACHC;AADH,AAEE,AAAA,AAAA,AAGoCA;;AAYtC,AAAA,AAAMC,AACHlB,AAAamB;AADhB,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAA6B6C,AAAQrD;AAArCS,AAAA,AAAAD,AAAa4C;AAAb1C,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAQ0B5B,AAAuBH,AAAamB;AAR9Da,AAAA,AAAAD;AAAAE,AAAA,AAAAC,AAAAJ,AAAAE;AAAAG,AAAA,AAAAF,AAMwBuC;AANxBpC,AAAA,AAAAD,AAKuBwC;AALvBtC,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAAL,AAAAQ;AAAAE,AAAA,AAAAD,AAEeoC,AACA5E;AAHf2B,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAZ;;AAAAY;;AAAA,AAAA,AAAAC,AAAAhB,AAAA,AAAAc;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAC;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAAD,AAAAE,AAAA;AAAAE,AAAA,AAAAtB,AAAU0C;AAAV5B,AACU+B;AADV5B,AASU+B;AATV3B,AAUU4B;AAVV,AAAA,AAAA1B;AAAA,AAWwB,AAAAA,AAAA,AAAC4B;;;AAXzB3B,AAAA,AAAAxB,AAAU0C;AAAV5B,AACU+B;AADV5B,AASU+B;AATV3B,AAUU4B;AAVV3B,AAWU4B;AAXV,AAY0B,AAAKE;AAAL,AAAQ,AAAMC,AAAK,AAAA,AAAOD;AAEZE,AAAG,AAACJ,AAAa,AAAA,AAAWG;AAC5BE,AAAG,AAACL,AAAa,AAAA,AAAWG;AAC5BG,AAAG,AAACN,AAAa,AAAA,AAAcG;AAC/BI,AAAI,AAACP,AAAa,AAAA,AAAwBE;AAC1CM,AAAM,AAAA,AAAA,AAAA,AAACC,AACAN,AACUC,AACAC,AACGC;AACpBI,AAAG,AAAA,AAAA,AAACD,AAAMP,AACMM,AACiBD;AAbvC,AAcEG;;;AA1BpCnC,AAAA,AAAAD,AAAAP,AAYsBpC;AAZtBgB,AAAAA;AAAA,AAAA,AAAA6B,AAAA7B,AAAA4B;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAA9B;;AAAA,AAAA,AAAAgC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlC,AAAAC;AAAA,AAAA,AAAA,AAAAkC,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAAtC,AAAA;AAAA,AAAAuC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAA,AAAAC,AAAA,AAAAxC,AAAA;;AAAAuC;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAhC;;;;AAAAgC;;;;;AAAAhC;;;;;AAAAA;;;;;;;;;AAAAyC,AAAA,AAAAC,AAAA,AAAA5C;AAAA,AAAA,AAAA4C,AAAAC,AAAA,AAAAhD;;AAAA+C;;AAAA,AAAA,AAAAE,AAAAH;;;AAAA9C;;AAoCF,AAAA,AAAMqE,AACHzF;AADH,AAEE,AAAAoB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAkE;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0B/F,AAAsBC;AAPhD+F,AAAA,AAAAD;AAAAE,AAAA,AAAA9D,AAAA2D,AAAAE;AAAAE,AAAA,AAAAD,AAKwBxB;AALxB0B,AAAA,AAAAD,AAIuBtB;AAJvBwB,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAlE,AAAA0D,AAAAO;AAAAE,AAAA,AAAAD,AACe1B,AACA5E;AAFf4F,AAAAA;AAAA,AAAA,AAAAjD,AAAAiD,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAJ,AAAU7B;AAAVgC,AAQU7B;AARV,AAAA,AAAA+B;AAAA,AASwB,AAAAA,AAAA,AAAC5B;;;AATzB6B,AAAA,AAAAN,AAAU7B;AAAVgC,AAQU7B;AARV8B,AASU5B;AATV,AAU0B,AAAKE;AAAL,AAAQ,AAAMC,AAAK,AAAA,AAAOD;AACZE,AAAG,AAACJ,AAAa,AAAA,AAAWE;AAC5BG,AAAG,AAACL,AAAa,AAAA,AAAWE;AAC5BmC,AAAI,AAACrC,AAAa,AAAA,AAA4BE;AAC9CK,AAAI,AAACP,AAAa,AAAA,AAAwBE;AAC1CoC,AAAK,AAACtC,AAAa,AAAA,AAAaE;AAChCqC,AAAO,AAACvC,AAAa,AAAA,AAAiBE;AACtCsC,AAAO,AAACxC,AAAa,AAAA,AAAiBE;AACtCQ,AAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAAMP,AACUE,AACAC,AACaE,AACI8B,AACfC,AACIC,AACAC;AAfhC,AAgBE9B;;;AA1BpCqB,AAAA,AAAAD,AAAAH,AAUsBhG;AAVtBiF,AAAAA;AAAA,AAAA,AAAApC,AAAAoC,AAAAmB;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAtD;;AAAA,AAAAsD,AAAA,AAAA;;AAAAA;;AAAApB;;AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlC,AAAAkE;AAAA,AAAA,AAAA,AAAA/B,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAmD;AAAA,AAAA,AAAAC,AAAAtB;AAAA,AAAA,AAAAsB,AAAA,AAAApD;;AAAAoD;AAAA,AAAA,AAAAjD,AAAA,AAAA2B,AAAA;AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAAhD,AAAA,AAAAyB,AAAA;;AAAAuB;AAAA,AAAArD;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAiC;;;;AAAAjC;;;;;AAAAiC;;;;;AAAAA;;;;;;;;;AAAAxB,AAAA,AAAAgD,AAAA,AAAA3F;AAAA,AAAA,AAAA2F,AAAA9C,AAAA,AAAAhD;;AAAA8F;;AAAA,AAAA,AAAA7C,AAAAH;;;AAAA9C;;AAkCF,AAAA,AAAMmG,AACHpG;AADH,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAgG;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BlH,AAAmBS;AAP7C0G,AAAA,AAAAD;AAAAE,AAAA,AAAA5F,AAAAyF,AAAAE;AAAAE,AAAA,AAAAD,AAKwBtD;AALxBwD,AAAA,AAAAD,AAIuBpD;AAJvBsD,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAhG,AAAAwF,AAAAO;AAAAE,AAAA,AAAAD,AACexD,AACA5E;AAFf0H,AAAAA;AAAA,AAAA,AAAA/E,AAAA+E,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAAlE,AAAAkE,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA9E;;AAAA,AAAA8E,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAA/D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlC,AAAAgG;AAAA,AAAA,AAAA,AAAA7D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA2E;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA5E;;AAAA4E;AAAA,AAAA,AAAAzE,AAAA,AAAAyD,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAAxE,AAAA,AAAAuD,AAAA;;AAAAiB;AAAA,AAAA7E;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA+D;;;;AAAA/D;;;;;AAAA+D;;;;;AAAAA;;;;;;;;;AAAAtD,AAAA,AAAAwE,AAAA,AAAAnH;AAAA,AAAA,AAAAmH,AAAAtE,AAAA,AAAAhD;;AAAAsH;;AAAA,AAAA,AAAArE,AAAAH;;;AAAA9C;;AAYF,AAAA,AAAMuH,AACHC;AADH,AAEE,AAAAxH,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAqH;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BrI,AAAmBgI;AAP7CM,AAAA,AAAAD;AAAAE,AAAA,AAAAjH,AAAA8G,AAAAE;AAAAE,AAAA,AAAAD,AAKwB3E;AALxB6E,AAAA,AAAAD,AAIuBzE;AAJvB2E,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAArH,AAAA6G,AAAAO;AAAAE,AAAA,AAAAD,AACe7E,AACA5E;AAFf+I,AAAAA;AAAA,AAAA,AAAApG,AAAAoG,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAAvF,AAAAuF,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAnG;;AAAA,AAAAmG,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAApF,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlC,AAAAqH;AAAA,AAAA,AAAA,AAAAlF,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAgG;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAjG;;AAAAiG;AAAA,AAAA,AAAA9F,AAAA,AAAA8E,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAA7F,AAAA,AAAA4E,AAAA;;AAAAiB;AAAA,AAAAlG;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAoF;;;;AAAApF;;;;;AAAAoF;;;;;AAAAA;;;;;;;;;AAAA3E,AAAA,AAAA6F,AAAA,AAAAxI;AAAA,AAAA,AAAAwI,AAAA3F,AAAA,AAAAhD;;AAAA2I;;AAAA,AAAA,AAAA1F,AAAAH;;;AAAA9C;;AAYF,AAAA,AAAM4I,AACH7I;AADH,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAyI;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0BvJ,AAAuBK;AAPjDmJ,AAAA,AAAAD;AAAAE,AAAA,AAAArI,AAAAkI,AAAAE;AAAAE,AAAA,AAAAD,AAKwB/F;AALxBiG,AAAA,AAAAD,AAIuB7F;AAJvB+F,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAzI,AAAAiI,AAAAO;AAAAE,AAAA,AAAAD,AACejG,AACA5E;AAFfmK,AAAAA;AAAA,AAAA,AAAAxH,AAAAwH,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAA3G,AAAA2G,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAvH;;AAAA,AAAAuH,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAAxG,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlC,AAAAyI;AAAA,AAAA,AAAA,AAAAtG,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAoH;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAArH;;AAAAqH;AAAA,AAAA,AAAAlH,AAAA,AAAAkG,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAAjH,AAAA,AAAAgG,AAAA;;AAAAiB;AAAA,AAAAtH;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAwG;;;;AAAAxG;;;;;AAAAwG;;;;;AAAAA;;;;;;;;;AAAA/F,AAAA,AAAAiH,AAAA,AAAA5J;AAAA,AAAA,AAAA4J,AAAA/G,AAAA,AAAAhD;;AAAA+J;;AAAA,AAAA,AAAA9G,AAAAH;;;AAAA9C;;AAWF,AAAA,AAAMgK,AACHC;AADH,AAEE,AAAAjK,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA8J;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAO0B1K,AAAwBqK;AAPlDM,AAAA,AAAAD;AAAAE,AAAA,AAAA1J,AAAAuJ,AAAAE;AAAAE,AAAA,AAAAD,AAKwBpH;AALxBsH,AAAA,AAAAD,AAIuBlH;AAJvBoH,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA9J,AAAAsJ,AAAAO;AAAAE,AAAA,AAAAD,AACetH,AACA5E;AAFfwL,AAAAA;AAAA,AAAA,AAAA7I,AAAA6I,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAAhI,AAAAgI,AAAAa;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA5I;;AAAA,AAAA4I,AAAA,AAAA;;AAAAA;;AAAAd;;AAAA,AAAA,AAAA7H,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAlC,AAAA8J;AAAA,AAAA,AAAA,AAAA3H,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAyI;AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA1I;;AAAA0I;AAAA,AAAA,AAAAvI,AAAA,AAAAuH,AAAA;AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAAtI,AAAA,AAAAqH,AAAA;;AAAAiB;AAAA,AAAA3I;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA6H;;;;AAAA7H;;;;;AAAA6H;;;;;AAAAA;;;;;;;;;AAAApH,AAAA,AAAAsI,AAAA,AAAAjL;AAAA,AAAA,AAAAiL,AAAApI,AAAA,AAAAhD;;AAAAoL;;AAAA,AAAA,AAAAnI,AAAAH;;;AAAA9C","names":["lpdashboard.thegraph/uni-subgraph-url","lpdashboard.thegraph/snapshot-query-string","user-address","clojure.string/lower-case","lpdashboard.thegraph/some-pair","lpdashboard.thegraph/positions-query-string","user","pairs","cljs.core.apply","cljs.core/str","p1__78627#","cljs.core.map","lpdashboard.thegraph/pairs-query-string","p1__78628#","lpdashboard.thegraph/mints-query-string","address","lpdashboard.thegraph/pair-days-query-string","pair-address","lpdashboard.thegraph/token-days-query-string","token-address","lpdashboard.thegraph/<user-lps","pair-addresses","c__38831__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__38832__auto__","switch__38739__auto__","state_78654","state_val_78655","inst_78630","inst_78631","inst_78632","inst_78633","inst_78634","inst_78635","inst_78636","cljs.core/PersistentHashMap","inst_78637","inst_78638","inst_78639","inst_78640","inst_78641","statearr-78660","cljs.core.async.impl.ioc-helpers/take!","inst_78643","inst_78644","inst_78645","inst_78646","inst_78647","cljs.core/PersistentVector","inst_78648","inst_78649","inst_78650","p1__78629#","inst_78651","inst_78652","cljs.core.async.impl.ioc-helpers/return-chan","statearr-78665","state-machine__38740__auto__","ret-value__38741__auto__","result__38742__auto__","cljs.core/keyword-identical?","ex__38743__auto__","e78666","statearr-78669","cljs.core/seq","statearr-78670","cljs.core/first","state__38833__auto__","statearr-78674","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","_","js/console.log","cljs.core/clj->js","data","cljs_http.client.post","js/JSON.stringify","positions","keys-numerical-vals","num-parse-fn","lpdashboard.utils/pu","p","pair","r0","r1","ts","ltb","pair'","cljs.core.assoc","p'","lpdashboard.thegraph/<user-lp-snapshots","state_78695","state_val_78696","inst_78676","inst_78677","inst_78678","inst_78679","inst_78680","inst_78681","inst_78682","inst_78683","inst_78684","inst_78685","inst_78687","inst_78688","inst_78689","inst_78690","inst_78691","p1__78675#","inst_78692","inst_78693","statearr-78698","e78699","statearr-78700","statearr-78701","statearr-78702","lts","rusd","t0pusd","t1pusd","lpdashboard.thegraph/<pairs-info","state_78717","state_val_78718","inst_78703","inst_78704","inst_78705","inst_78706","inst_78707","inst_78708","inst_78709","inst_78710","inst_78711","inst_78712","inst_78714","inst_78715","statearr-78719","e78720","statearr-78721","statearr-78722","statearr-78723","lpdashboard.thegraph/<user-mints","user-addresses","state_78738","state_val_78739","inst_78724","inst_78725","inst_78726","inst_78727","inst_78728","inst_78729","inst_78730","inst_78731","inst_78732","inst_78733","inst_78735","inst_78736","statearr-78740","e78741","statearr-78742","statearr-78743","statearr-78744","lpdashboard.thegraph/<pair-days","state_78759","state_val_78760","inst_78745","inst_78746","inst_78747","inst_78748","inst_78749","inst_78750","inst_78751","inst_78752","inst_78753","inst_78754","inst_78756","inst_78757","statearr-78761","e78762","statearr-78763","statearr-78764","statearr-78765","lpdashboard.thegraph/<token-days","token-addresses","state_78780","state_val_78781","inst_78766","inst_78767","inst_78768","inst_78769","inst_78770","inst_78771","inst_78772","inst_78773","inst_78774","inst_78775","inst_78777","inst_78778","statearr-78782","e78783","statearr-78784","statearr-78785","statearr-78786"],"sourcesContent":["(ns lpdashboard.thegraph\n  (:require [cljs.core.async :refer [go]]\n            [cljs.core.async.interop :refer-macros [<p!]]\n            [cljs-http.client :as http]\n            [bignumber.core]\n            [bignumber.js :as BigNumber]\n            [lpdashboard.utils :as u]))\n\n\n(def uni-subgraph-url \"https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2\")\n\n;; TODO need to paginate if more than 1,000\n;; if we do not specify :first, the default is 100\n(defn snapshot-query-string\n  [user-address]\n  (str \"{\n      liquidityPositionSnapshots(orderBy: timestamp,\n                                 where: {user: \\\"\" (clojure.string/lower-case user-address) \"\\\"}\n                                 first: 1000) {\n      block,\n      timestamp,\n      pair {\n          id,\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n    liquidityTokenBalance,\n    liquidityTokenTotalSupply,\n    token0PriceUSD,\n    token1PriceUSD,\n    reserve0,\n    reserve1,\n    reserveUSD\n    }\n   }\"))\n\n(def some-pair \"0x0d0d65e7a7db277d3e0f5e1676325e75f3340455\")\n\n\n(defn positions-query-string\n  [user pairs]\n  (str \"{\n      liquidityPositions( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\"\n                         (clojure.string/lower-case %)\n                         \"-\"\n                         (clojure.string/lower-case user)\n                         \"\\\",\"\n                         )\n                   pairs))\n\n\n\n       \"]}\n                                 first: 1000) {\n      pair {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n    liquidityTokenBalance\n    }\n   }\"))\n\n(defn pairs-query-string\n  [pairs]\n  (str \"{\n      pairs( where: {id_in: [\"\n       (apply str\n              (map #(str \"\\\"\" (clojure.string/lower-case %) \"\\\",\" )\n                   pairs))\n\n\n       \"]}\n                                 first: 1000) {\n          id,\n          reserve0,\n          reserve1,\n          totalSupply,\n\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n()\n          }\n     }\n\n    }\n   \"))\n\n\n(defn mints-query-string\n  [address]\n  (str \"{\n      mints(where: {to: \\\"\" address \"\\\"}) {\n          id,\n          to,\n          timestamp,\n          liquidity,\n          amount0,\n          amount1,\n          pair {\n          id,\n          token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n          token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n          }\n     },\n          transaction {\n             id,\n             blockNumber,\n             timestamp\n          }\n\n       }\n     }\n   \"))\n\n;; TODO lower string all addresses that go to the graph\n(defn pair-days-query-string\n  [pair-address]\n  (str \"{\n      pairDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {pairAddress: \\\"\" pair-address \"\\\"}\n                   first: 1000) {\n         id\n         date,\n         pairAddress,\n         token0 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         token1 {\n             id,\n            symbol,\n            name,\n            decimals\n\n         },\n         reserve0,\n         reserve1,\n         totalSupply,\n         reserveUSD,\n         dailyVolumeToken0,\n         dailyVolumeToken1,\n         dailyVolumeUSD,\n         dailyTxns\n       }\n     }\n   \"))\n\n\n;; TODO lower string all addresses that go to the graph\n(defn token-days-query-string\n  [token-address]\n  (str \"{\n      tokenDayDatas(orderBy: date,\n                   orderDirection: desc,\n                   where: {token: \\\"\" token-address \"\\\"}\n                   first: 1000) {\n         id\n         date,\n         token {id},\n         priceUSD\n       }\n     }\n   \"))\n\n\n\n(defn <user-lps\n  [user-address pair-addresses]\n  (go (let [_ (js/console.log (clj->js pair-addresses))\n            data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (positions-query-string user-address pair-addresses)}))}))\n            positions (:liquidityPositions (:data (:body data)))\n            keys-numerical-vals [:liquidityTokenBalance]\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n\n                                          r0 (num-parse-fn (:reserve0 pair))\n                                          r1 (num-parse-fn (:reserve1 pair))\n                                          ts (num-parse-fn (:totalSupply pair))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          pair' (assoc\n                                                 pair\n                                                 :reserve0 r0\n                                                 :reserve1 r1\n                                                 :totalSupply ts)\n                                          p' (assoc p\n                                                    :pair pair'\n                                                    :liquidityTokenBalance ltb)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n\n\n#_(go (def my-lps (<! (<user-lps my-address \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\"))))\n\n\n(defn <user-lp-snapshots\n  [user-address]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (snapshot-query-string user-address)}))}))\n            positions (:liquidityPositionSnapshots (:data (:body data)))\n            num-parse-fn #(u/pu % 0)\n            positions' (map (fn [p] (let [pair (:pair p)\n                                          r0 (num-parse-fn (:reserve0 p))\n                                          r1 (num-parse-fn (:reserve1 p))\n                                          lts (num-parse-fn (:liquidityTokenTotalSupply p))\n                                          ltb (num-parse-fn (:liquidityTokenBalance p))\n                                          rusd (num-parse-fn (:reserveUSD p))\n                                          t0pusd (num-parse-fn (:token0PriceUSD p))\n                                          t1pusd (num-parse-fn (:token1PriceUSD p))\n                                          p' (assoc p\n                                                    :reserve0 r0\n                                                    :reserve1 r1\n                                                    :liquidityTokenBalance ltb\n                                                    :liquidityTokenTotalSupply lts\n                                                    :reserveUSD rusd\n                                                    :token0PriceUSD t0pusd\n                                                    :token1PriceUSD t1pusd)]\n                                      p'))\n                            positions)]\n        positions')))\n\n\n\n\n\n(defn <pairs-info\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pairs-query-string pair-addresses)}))}))]\n        (:body data))))\n\n\n\n(defn <user-mints\n  [user-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (mints-query-string user-addresses)}))}))]\n        (:body data))))\n\n\n\n(defn <pair-days\n  [pair-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (pair-days-query-string pair-addresses)}))}))]\n        (:body data))))\n\n\n(defn <token-days\n  [token-addresses]\n  (go (let [data\n            (<! (http/post\n                 uni-subgraph-url\n                 {:with-credentials? false\n                  :body (js/JSON.stringify\n                         (clj->js\n                          {:query\n                           (token-days-query-string token-addresses)}))}))]\n        (:body data))))\n\n\n"]}