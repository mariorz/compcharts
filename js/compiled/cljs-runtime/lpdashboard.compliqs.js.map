{"version":3,"sources":["lpdashboard/compliqs.cljs"],"mappings":"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","names":["lpdashboard.compliqs/erc20-abi","lpdashboard.compliqs/comp-abi","lpdashboard.compliqs/lw-address","lpdashboard.compliqs/lw-address2","lpdashboard.compliqs/cdai-init-block","lpdashboard.compliqs/cusdc-init-block","lpdashboard.compliqs/ceth-init-block","lpdashboard.compliqs/cusdt-init-block","lpdashboard.compliqs/wbtc-init-block","lpdashboard.compliqs/last-block","lpdashboard.compliqs/liquidation-hash","lpdashboard.compliqs/caddress->token","caddress","cljs.core.get","lpdashboard.compliqs/token->address","token","lpdashboard.compliqs/comp-unitroller","lpdashboard.compliqs/comp-address","lpdashboard.compliqs/current-block","lpdashboard.compliqs/pre-event-block","lpdashboard.compliqs/block-step","lpdashboard.compliqs/llw-start-block","lpdashboard.compliqs/llw-end-block","lpdashboard.compliqs/bn","n","js/module$node_modules$bignumber_DOT_js$bignumber","lpdashboard.compliqs/ethfu","u","js/module$node_modules$ethers$dist$ethers_umd.utils","lpdashboard.compliqs/ebn->bn","lpdashboard.compliqs/web3provider","js/module$node_modules$ethers$dist$ethers_umd.providers","lpdashboard.compliqs/provider","js/window","lpdashboard.compliqs/comp-iface","js/module$node_modules$ethers$dist$ethers_umd.utils.Interface","cljs.core/clj->js","lpdashboard.compliqs/erc20-iface","lpdashboard.compliqs/make-contract","abi","address","js/module$node_modules$ethers$dist$ethers_umd.Contract","lpdashboard.compliqs/make-erc20","lpdashboard.compliqs/<token-decimals","c__36823__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__36824__auto__","switch__36731__auto__","state_41064","state_val_41065","inst_41049","inst_41056","statearr-41066","inst_41038","statearr-41067","statearr-41068","inst_41039","inst_41040","statearr-41069","statearr-41070","inst_41050","cljs.core/ExceptionInfo","inst_41051","cljs.core/ex-data","inst_41052","inst_41053","cljs.core._EQ_","inst_41054","statearr-41071","statearr-41072","statearr-41073","inst_41062","cljs.core.async.impl.ioc-helpers/return-chan","_","statearr-41075","cljs.core/cons","inst_41046","inst_41047","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_41059","statearr-41076","cljs.core/rest","statearr-41077","statearr-41078","ex41074","statearr-41079","statearr-41080","statearr-41081","statearr-41082","state-machine__36732__auto__","ret-value__36733__auto__","result__36734__auto__","cljs.core/keyword-identical?","ex__36735__auto__","e41083","statearr-41084","cljs.core/seq","statearr-41085","cljs.core/first","state__36825__auto__","statearr-41086","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/Error","js/console.log","lpdashboard.compliqs/make-token-tx","tx","decimals","parsed-event","tx-args","tx-hash","block-number","lpdashboard.compliqs/<get-block","block-num","state_41103","state_val_41104","inst_41087","inst_41088","inst_41090","inst_41091","inst_41092","inst_41093","inst_41094","inst_41095","statearr-41105","statearr-41106","statearr-41107","inst_41097","statearr-41108","statearr-41109","inst_41100","inst_41101","statearr-41110","e41111","statearr-41112","statearr-41113","statearr-41114","cljs.core.js__GT_clj","lpdashboard.compliqs/<fetch-blocks","block-numbers","p1__41115#","cljs.core.map","cljs.core.async.merge","cljs.core.async/reduce","cljs.core/conj","var_args","G__41118","lpdashboard.compliqs/<user-token-transfers","provider","token-address","out-address","lpdashboard.compliqs._LT_user_token_transfers","in-address","state_41121","state_val_41122","inst_41119","cljs.core/PersistentVector","statearr-41123","e41124","statearr-41125","statearr-41126","statearr-41127","contract","user-filter","state_41159","state_val_41160","inst_41139","inst_41146","statearr-41161","statearr-41162","inst_41128","inst_41129","inst_41130","statearr-41163","statearr-41164","inst_41140","inst_41141","inst_41142","inst_41143","inst_41144","statearr-41165","statearr-41166","statearr-41167","inst_41157","statearr-41169","inst_41136","inst_41137","inst_41149","inst_41150","statearr-41170","statearr-41171","ex41168","statearr-41172","statearr-41173","inst_41152","inst_41153","p1__41116#","inst_41154","statearr-41174","statearr-41175","statearr-41176","statearr-41177","e41178","statearr-41179","statearr-41180","statearr-41181","filtered-txs","lpdashboard.compliqs/<get-tx-receipt","txhash","state_41197","state_val_41198","inst_41182","inst_41183","inst_41185","inst_41186","inst_41187","inst_41188","inst_41189","inst_41190","statearr-41199","statearr-41200","statearr-41201","inst_41192","statearr-41202","statearr-41203","inst_41195","statearr-41204","e41205","statearr-41206","statearr-41207","statearr-41208","lpdashboard.compliqs/<get-tx","state_41224","state_val_41225","inst_41209","inst_41210","inst_41212","inst_41213","inst_41214","inst_41215","inst_41216","inst_41217","statearr-41226","statearr-41227","statearr-41228","inst_41219","statearr-41229","statearr-41230","inst_41222","statearr-41231","e41232","statearr-41233","statearr-41234","statearr-41235","lpdashboard.compliqs/<get-tx-with-receipt","state_41246","state_val_41247","inst_41236","inst_41237","statearr-41248","inst_41239","inst_41240","statearr-41249","inst_41242","inst_41243","inst_41244","cljs.core/PersistentHashMap","statearr-41250","e41251","statearr-41252","statearr-41253","statearr-41254","lpdashboard.compliqs/<get-trxs","tx-hashes","trxs","x","state_41259","state_val_41260","inst_41255","inst_41257","statearr-41261","e41262","statearr-41263","statearr-41264","statearr-41265","lpdashboard.compliqs/total-gas-paid","tx-with-receipt","gas-price","r","gas-used","eth-spent","bignumber.core/*","lpdashboard.compliqs/block-num->ts","blocks","p1__41266#","cljs.core.filter","lpdashboard.compliqs/ts->geckoprice","day-prices","ts","day-prices'","cljs.core.sort_by","prev-day","cljs.core/last","p1__41267#","next-day","p1__41268#","and__4115__auto__","cljs.core/second","lpdashboard.compliqs/blocknum->geckoprice","price","js/parseFloat","lpdashboard.compliqs/<historic-gecko-prices","state_41279","state_val_41280","inst_41269","inst_41270","inst_41271","inst_41272","inst_41273","inst_41275","inst_41276","inst_41277","statearr-41281","e41282","statearr-41283","statearr-41284","statearr-41285","cljs_http.client.get","lpdashboard.compliqs/<dolarize-liquidations","liquidations","state_41298","state_val_41299","inst_41286","inst_41287","inst_41288","inst_41290","inst_41291","inst_41292","statearr-41300","inst_41294","inst_41295","inst_41296","statearr-41301","e41302","statearr-41303","statearr-41304","statearr-41305","liq-blocks","cljs.core/set","lq","cljs.core.into","lpdashboard.compliqs/<comp-repayments","start-block","end-block","comp-contract","repay-filter","state_41321","state_val_41322","inst_41306","inst_41307","inst_41309","inst_41310","inst_41311","inst_41312","inst_41313","inst_41314","statearr-41323","statearr-41324","statearr-41325","inst_41316","statearr-41326","statearr-41327","inst_41319","statearr-41328","e41329","statearr-41330","statearr-41331","statearr-41332","lpdashboard.compliqs/<comp-liquidations","state_41348","state_val_41349","inst_41333","inst_41334","inst_41336","inst_41337","inst_41338","inst_41339","inst_41340","inst_41341","statearr-41350","statearr-41351","statearr-41352","inst_41343","statearr-41353","statearr-41354","inst_41346","statearr-41355","e41356","statearr-41357","statearr-41358","statearr-41359","lpdashboard.compliqs/<comp-mints","mint-filter","state_41375","state_val_41376","inst_41360","inst_41361","inst_41363","inst_41364","inst_41365","inst_41366","inst_41367","inst_41368","statearr-41377","statearr-41378","statearr-41379","inst_41370","statearr-41380","statearr-41381","inst_41373","statearr-41382","e41383","statearr-41384","statearr-41385","statearr-41386","lpdashboard.compliqs/<comp-borrows","borrow-filter","state_41402","state_val_41403","inst_41387","inst_41388","inst_41390","inst_41391","inst_41392","inst_41393","inst_41394","inst_41395","statearr-41404","statearr-41405","statearr-41406","inst_41397","statearr-41407","statearr-41408","inst_41400","statearr-41409","e41410","statearr-41411","statearr-41412","statearr-41413","lpdashboard.compliqs/<comp-redeems","redeem-filter","state_41429","state_val_41430","inst_41414","inst_41415","inst_41417","inst_41418","inst_41419","inst_41420","inst_41421","inst_41422","statearr-41431","statearr-41432","statearr-41433","inst_41424","statearr-41434","statearr-41435","inst_41427","statearr-41436","e41437","statearr-41438","statearr-41439","statearr-41440","lpdashboard.compliqs/make-comp-repayment","lpdashboard.compliqs/make-comp-liquidation","lpdashboard.compliqs/make-comp-mint","lpdashboard.compliqs/make-comp-borrow","lpdashboard.compliqs/make-comp-redeem","lpdashboard.compliqs/<fetch-comp-logs","logsfn","cljs.core.range","p1__41441#","G__41442","G__41443","G__41444","cljs.core/concat","lpdashboard.compliqs/<pfetch-comp-logs","parsefn","state_41452","state_val_41453","inst_41446","inst_41448","inst_41449","p1__41445#","inst_41450","statearr-41454","e41455","statearr-41456","statearr-41457","statearr-41458","fetched-logs","lpdashboard.compliqs/<pfetch-comp-repayments","state_41463","state_val_41464","inst_41459","inst_41461","statearr-41465","e41466","statearr-41467","statearr-41468","statearr-41469","lpdashboard.compliqs/<pfetch-comp-mints","state_41474","state_val_41475","inst_41470","inst_41472","statearr-41476","e41477","statearr-41478","statearr-41479","statearr-41480","lpdashboard.compliqs/<pfetch-comp-liquidations","state_41485","state_val_41486","inst_41481","inst_41483","statearr-41487","e41488","statearr-41489","statearr-41490","statearr-41491","lpdashboard.compliqs/<pfetch-comp-borrows","state_41496","state_val_41497","inst_41492","inst_41494","statearr-41498","e41499","statearr-41500","statearr-41501","statearr-41502","lpdashboard.compliqs/<pfetch-comp-redeems","state_41507","state_val_41508","inst_41503","inst_41505","statearr-41509","e41510","statearr-41511","statearr-41512","statearr-41513","lpdashboard.compliqs/<pfetch-ctoken-events","state_41532","state_val_41533","inst_41514","inst_41516","inst_41517","statearr-41534","inst_41519","inst_41520","statearr-41535","inst_41522","inst_41523","statearr-41536","inst_41525","inst_41526","statearr-41537","inst_41528","inst_41529","inst_41530","statearr-41538","e41539","statearr-41540","statearr-41541","statearr-41542","cljs.core.concat","lpdashboard.compliqs/account-ctoken-events","ctoken-events","account","account'","clojure.string/lower-case","event","lpdashboard.compliqs/acc-health","a","lpdashboard.compliqs/acc-address","lpdashboard.compliqs/total-borrow-eth","lpdashboard.compliqs/total-collateral-eth","lpdashboard.compliqs/block-number","lpdashboard.compliqs/token-borrow-underlying","token-state","p1__41543#","lpdashboard.compliqs/token-supply-underlying","p1__41544#","lpdashboard.compliqs/acc-state","a'","clojure.walk/keywordize-keys","dai-borrowed","dai-supplied","usdc-borrowed","usdc-supplied","usdt-borrowed","usdt-supplied","eth-borrowed","eth-supplied","sai-borrowed","sai-supplied","bat-borrowed","bat-supplied","usd-value-borrowed","usd-value-supplied","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","lpdashboard.compliqs/<account-state","p__41547","map__41548","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","seq41545","G__41546","cljs.core/next","self__4723__auto__","state_41570","state_val_41571","inst_41550","inst_41551","inst_41552","inst_41553","inst_41554","inst_41555","inst_41557","inst_41558","inst_41559","inst_41560","inst_41561","inst_41562","statearr-41572","statearr-41573","statearr-41574","inst_41564","statearr-41575","statearr-41576","inst_41567","inst_41568","statearr-41577","e41578","statearr-41579","statearr-41580","statearr-41581","js/module$node_modules$$compound_finance$compound_js$dist$nodejs$index.api","lpdashboard.compliqs/<account-states","accounts","state_41607","state_val_41608","inst_41583","inst_41584","inst_41585","inst_41586","inst_41587","inst_41588","inst_41590","inst_41591","inst_41592","inst_41593","inst_41594","inst_41595","statearr-41609","statearr-41610","statearr-41611","inst_41597","statearr-41612","statearr-41613","inst_41600","inst_41601","inst_41602","inst_41603","p1__41582#","inst_41604","inst_41605","statearr-41614","e41615","statearr-41616","statearr-41617","statearr-41618","resp","account-resps","lpdashboard.compliqs/<account-state-range","block-step","p1__41619#","lpdashboard.compliqs/accum-comp-rewards","rewards-txs","data-points","cljs.core/count","current-tx","prev-dp","prev-claimed","current-claim","current-dp","lpdashboard.compliqs/<gov-account","state_41630","state_val_41631","inst_41620","inst_41621","inst_41622","inst_41623","inst_41624","inst_41625","inst_41627","inst_41628","statearr-41632","e41633","statearr-41634","statearr-41635","statearr-41636","lpdashboard.compliqs/dai-loop-factor","account-state","supplied","borrowed","factor","cljs.core.not_EQ_","lpdashboard.compliqs/make-edn-blob","coll","js/Blob","lpdashboard.compliqs/download-blob","blob","filename","blob-url","js/URL.createObjectURL","link","js/document.createElement","js/document.body.appendChild","ev-params","ev","js/MouseEvent","js/document.body.removeChild","lpdashboard.compliqs/download-as-edn"],"sourcesContent":["(ns lpdashboard.compliqs\n  (:require [cljs.core.async :refer [go]]\n            [cljs.core.async.interop :refer-macros [<p!]]\n            [cljs-http.client :as http]\n            [\"ethers\" :as ethers]\n            [\"@compound-finance/compound-js\" :as compound]\n            [bignumber.core]\n            [bignumber.js :as BigNumber]\n            [clojure.string :as s]\n            [reagent.core :as reagent :refer [atom]]))\n\n\n(set! *warn-on-infer* false)\n\n(def erc20-abi [\"function decimals() view returns (uint8)\",\n                \"event Transfer(address indexed from, address indexed to, uint amount)\",\n                \"event Deposit(address indexed user, uint256 indexed pid, uint256 amount)\"])\n\n\n(def comp-abi\n  [\"event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows)\"\n   \"event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens)\"\n   \"event Mint(address minter, uint mintAmount, uint mintTokens)\"\n   \"event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows)\"\n   \"event Redeem(address redeemer, uint redeemAmount, uint redeemTokens)\"])\n\n\n(def lw-address \"0x909b443761bbd7fbb876ecde71a37e1433f6af6f\")\n(def lw-address2 \"0x189c2c1834b1414a6aee9eba5dc4b4d547c9a44c\")\n;; https://etherscan.io/address/0x5d3a536e4d6dbd6114cc1ead35777bab948e3643\n(def cdai-init-block 8983575)\n;; https://etherscan.io/address/0x39aa39c021dfbae8fac545936693ac917d5e7563\n(def cusdc-init-block 7710760)\n;; https://etherscan.io/address/0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5\n(def ceth-init-block 7710758)\n;; https://etherscan.io/tx/0x7e77fae02434ab498e6dd80cdb1bb3fbe53ee76a46749c0faa11bb850d431519\n(def cusdt-init-block 9879363)\n;; https://etherscan.io/tx/0xdaaa0b08e0fa932ebf1ebc9ed2de9a6eb4db3f03c77e9ed937d9c9a3a49e2b81\n(def wbtc-init-block 6766284)\n\n;; post liquidation event\n(def last-block 11333300)\n\n\n(def liquidation-hash\n  \"0x53e09adb77d1e3ea593c933a85bd4472371e03da12e3fec853b5bc7fac50f3e4\")\n\n\n(defn caddress->token\n  \"Takes a cToken address and returns\n  underlying token symbol\"\n  [caddress]\n  (get {\"0x39AA39c021dfbaE8faC545936693aC917d5E7563\" \"USDC\"\n        \"0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643\" \"DAI\"\n        \"0xf650c3d88d12db855b8bf7d11be6c55a4e07dcc9\" \"USDT\"\n        \"0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5\" \"ETH\"\n        \"0xc11b1268c1a384e55c48c2391d8d480264a3a7f4\" \"WBTC\"\n        \"0x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e\" \"BAT\"\n        \"0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4\" \"COMP\"\n        \"0x35A18000230DA775CAc24873d00Ff85BccdeD550\" \"UNI\"\n        \"0xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407\" \"ZRX\"} caddress))\n\n(defn token->address\n  \"Takes a token symbol and returns its corresponding\n  address\"\n  [token]\n  (get {\"WETH\" \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n        \"WBTC\" \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\"\n        \"BAT\" \"0x0d8775f648430679a709e98d2b0cb6250d2887ef\"\n        \"COMP\" \"0xc00e94cb662c3520282e6f5717214004a7f26888\"\n        \"UNI\" \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\"\n        \"ZRX\" \"0xe41d2489571d322189246dafa5ebde1f4699f498\"}\n       token))\n\n(def comp-unitroller \"0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B\")\n(def comp-address \"0xc00e94cb662c3520282e6f5717214004a7f26888\")\n\n(def current-block 11415254)\n(def pre-event-block 11333036)\n(def block-step 10000)\n(def llw-start-block (- 10250758 block-step))\n(def llw-end-block (+ pre-event-block block-step))\n\n\n\n;;;; bignumber ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn bn [n] (BigNumber. (str n)))\n\n(defn ethfu\n  [n u]\n  (. ethers/utils formatUnits n u))\n\n(defn ebn->bn\n  [n u]\n  (bn (ethfu n u)))\n\n\n;;;; ethers tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def web3provider (. ethers/providers -Web3Provider))\n(def provider (web3provider. (. js/window -ethereum)))\n(def comp-iface (ethers/utils.Interface. (clj->js comp-abi)))\n(def erc20-iface (ethers/utils.Interface. (clj->js erc20-abi)))\n\n\n(defn make-contract [abi address]\n  (ethers/Contract. address (clj->js abi) provider))\n\n(defn make-erc20 [address]\n  (ethers/Contract. address (clj->js erc20-abi) provider))\n\n(defn <token-decimals\n  [address]\n  (go\n    (let [contract (make-erc20 address)]\n      (try (<p! (. contract decimals))\n           (catch js/Error err\n             (js/console.log \"No decimals method for:\" address)\n             18)))))\n\n(defn make-token-tx\n  [tx decimals]\n  (let [parsed-event (. erc20-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        token (. tx -address)]\n    {:from (. tx-args -from)\n     :to  (. tx-args -to)\n     :hash tx-hash\n     :token token\n     :block-number block-number\n     :amount (ebn->bn (. tx-args -amount) decimals)}))\n\n\n\n(defn <get-block\n  [block-num]\n  (go (let [block (js->clj ;; TODO why does this fail if we remove js->clj\n                   (<p! (. provider getBlock block-num)))]\n        block)))\n\n(defn <fetch-blocks\n  [block-numbers]\n  (->> block-numbers\n       (map #(<get-block %))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce conj [])))\n\n(defn <user-token-transfers\n  ([provider token-address out-address]\n   (<user-token-transfers provider token-address out-address nil))\n  ([provider token-address out-address in-address]\n   (if (nil? token-address)\n     (go [])\n     (let [contract (make-erc20 token-address)\n           user-filter (contract.filters.Transfer out-address in-address)\n           _ (set! (.. user-filter -fromBlock) 0)\n           _ (set! (.. user-filter -toBlock) \"latest\")]\n       (go (try\n             (let [filtered-txs (<p! (. provider getLogs user-filter))\n                   decimals (<! (<token-decimals token-address))\n                   parsed-txs (map #_identity #(make-token-tx % decimals) filtered-txs)]\n               parsed-txs)\n             (catch js/Error err\n               (js/console.log \"err <user-token-transfers:\" token-address out-address in-address)\n               [])))))))\n\n(defn <get-tx-receipt\n  [txhash]\n  (go\n    (<p! (. provider getTransactionReceipt txhash))))\n\n(defn <get-tx\n  [txhash]\n  (go\n    (<p! (. provider getTransaction txhash))))\n\n\n(defn <get-tx-with-receipt\n  [txhash]\n  (go\n    {:tx (<! (<get-tx txhash))\n     :receipt (<! (<get-tx-receipt txhash))}))\n\n(defn <get-trxs\n  [tx-hashes]\n  (let [trxs (map (fn [x] (go (<! (<get-tx-with-receipt x))))\n                  tx-hashes)]\n    (->> (cljs.core.async/merge trxs)\n         (cljs.core.async/reduce conj []))))\n\n(defn total-gas-paid\n  [tx-with-receipt]\n  (let [tx (js->clj (:tx tx-with-receipt))\n        gas-price (ebn->bn (get tx \"gasPrice\") 18)\n        r (js->clj (:receipt tx-with-receipt))\n        gas-used (ebn->bn (get r \"gasUsed\") 0)\n        eth-spent (bignumber.core/* gas-price gas-used)]\n    eth-spent))\n\n\n;;;; token prices ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n(defn block-num->ts\n  [blocks block-num]\n  (get (first (filter #(= (get % \"number\") block-num) blocks)) \"timestamp\"))\n\n\n(defn ts->geckoprice\n  [day-prices ts]\n  (let [day-prices' (sort-by first day-prices)\n        prev-day (last (filter #(<= (first %) ts) day-prices'))\n        next-day (first (filter #(> (first %) ts) day-prices'))\n        ]\n    (if (and prev-day next-day)\n      (second prev-day))))\n\n(defn blocknum->geckoprice\n  [day-prices blocks block-num]\n  (let [ts (* 1000 (block-num->ts blocks block-num))\n        price (ts->geckoprice day-prices ts)]\n    (js/parseFloat price)))\n\n(defn <historic-gecko-prices\n  [address]\n  (go (let [base-url (str \"https://api.coingecko.com/\"\n                          \"api/v3/coins/ethereum/contract/\"\n                          address\n                          \"/market_chart/?vs_currency=usd&days=700\")\n            full-url base-url\n            data (:prices (:body\n                           (<! (http/get\n                                full-url\n                                {:with-credentials? false}))))]\n        data)))\n\n\n(defn <dolarize-liquidations\n  [liquidations token]\n  (go\n    (let [liq-blocks (<! (<fetch-blocks (set (map :block-number liquidations))))\n          day-prices (<! (<historic-gecko-prices (token->address token)))]\n      (map (fn [lq]\n             (into\n              lq\n              {:repay-amount\n               (bignumber.core/*\n                (:repay-amount lq)\n                (bn (blocknum->geckoprice\n                     day-prices liq-blocks (:block-number lq))))}))\n           liquidations))))\n\n\n;;;; compound tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n(defn <comp-repayments\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                       comp-abi\n                       caddress)\n        repay-filter (comp-contract.filters.RepayBorrow)\n        _ (set! (.. repay-filter -fromBlock) start-block)\n        _ (set! (.. repay-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs repay-filter)))))\n\n\n(defn <comp-liquidations\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                       comp-abi\n                       caddress)\n        repay-filter (comp-contract.filters.LiquidateBorrow)\n        _ (set! (.. repay-filter -fromBlock) start-block)\n        _ (set! (.. repay-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs repay-filter)))))\n\n(defn <comp-mints\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                        comp-abi\n                        caddress)\n        mint-filter (comp-contract.filters.Mint)\n        _ (set! (.. mint-filter -fromBlock) start-block)\n        _ (set! (.. mint-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs mint-filter)))))\n\n(defn <comp-borrows\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                        comp-abi\n                        caddress)\n        borrow-filter (comp-contract.filters.Borrow)\n        _ (set! (.. borrow-filter -fromBlock) start-block)\n        _ (set! (.. borrow-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs borrow-filter)))))\n\n(defn <comp-redeems\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                       comp-abi\n                       caddress)\n        redeem-filter (comp-contract.filters.Redeem)\n        _ (set! (.. redeem-filter -fromBlock) start-block)\n        _ (set! (.. redeem-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs redeem-filter)))))\n\n\n(defn make-comp-repayment\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        caddress (. tx -address)]\n    {:payer (. tx-args -payer)\n     :borrower  (. tx-args -borrower)\n     :hash tx-hash\n     :type \"repayment\"\n     :caddress caddress\n     :block-number block-number\n     :repay-amount (ebn->bn (. tx-args -repayAmount) decimals)\n     :account-borrrows (ebn->bn (. tx-args -accountBorrows) decimals)\n     :total-borrows (ebn->bn (. tx-args -totalBorrows) decimals)}))\n\n\n(defn make-comp-liquidation\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        caddress (. tx -address)]\n    {:liquidator (. tx-args -liquidator)\n     :borrower  (. tx-args -borrower)\n     :hash tx-hash\n     :type \"liquidation\"\n     :block-number block-number\n     :caddress caddress\n     :repay-amount (ebn->bn (. tx-args -repayAmount) decimals)\n     :c-token-collateral (. tx-args -cTokenCollateral)\n     :seize-tokens (ebn->bn (. tx-args -seizeTokens) decimals)}))\n\n\n(defn make-comp-mint\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        caddress (. tx -address)\n        block-number (. tx -blockNumber)]\n    {:minter  (. tx-args -minter)\n     :mint-amount (ebn->bn (. tx-args -mintAmount) decimals)\n     :mint-tokens (ebn->bn (. tx-args -mintTokens) decimals)\n     :hash tx-hash\n     :type \"mint\"\n     :caddress caddress\n     :block-number block-number}))\n\n\n(defn make-comp-borrow\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        caddress (. tx -address)\n        block-number (. tx -blockNumber)]\n    {:borrower  (. tx-args -borrower)\n     :borrow-amount (ebn->bn (. tx-args -borrowAmount) decimals)\n     :account-borrows (ebn->bn (. tx-args -accountBorrows) decimals)\n     :total-borrows (ebn->bn (. tx-args -totalBorrows) decimals)\n     :type \"borrow\"\n     :hash tx-hash\n     :caddress caddress\n     :block-number block-number}))\n\n\n(defn make-comp-redeem\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        caddress (. tx -address)\n        block-number (. tx -blockNumber)]\n    {:redeemer  (. tx-args -redeemer)\n     :redeem-amount (ebn->bn (. tx-args -redeemAmount) decimals)\n     :redeem-tokens (ebn->bn (. tx-args -redeemTokens) decimals)\n     :type \"redeem\"\n     :hash tx-hash\n     :caddress caddress\n     :block-number block-number}))\n\n\n\n(defn <fetch-comp-logs\n  [logsfn caddress start-block end-block decimals]\n  (->> (range start-block end-block 5000)\n       (map #(logsfn caddress % (+ % 4999)))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce concat [])))\n\n(defn <pfetch-comp-logs\n  [logsfn parsefn caddress start-block end-block decimals]\n  (go (let [fetched-logs\n            (<! (<fetch-comp-logs logsfn caddress start-block end-block decimals))]\n        (map #(parsefn % decimals) fetched-logs))))\n\n\n(defn <pfetch-comp-repayments\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-repayments make-comp-repayment\n           caddress start-block end-block decimals))))\n\n(defn <pfetch-comp-mints\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-mints make-comp-mint\n           caddress start-block end-block decimals))))\n\n(defn <pfetch-comp-liquidations\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-liquidations make-comp-liquidation\n           caddress start-block end-block decimals))))\n\n(defn <pfetch-comp-borrows\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-borrows make-comp-borrow\n           caddress start-block end-block decimals))))\n\n\n(defn <pfetch-comp-redeems\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-redeems make-comp-redeem\n           caddress start-block end-block decimals))))\n\n\n(defn <pfetch-ctoken-events\n  [caddress start-block end-block decimals]\n  (go (let [repayments (<! (<pfetch-comp-repayments\n                            caddress start-block end-block\n                            decimals))\n            mints (<! (<pfetch-comp-mints\n                       caddress start-block end-block\n                       decimals))\n            borrows (<! (<pfetch-comp-borrows\n                       caddress start-block end-block\n                       decimals))\n            liquidations (<! (<pfetch-comp-liquidations\n                              caddress start-block end-block\n                              decimals))\n            redeems (<! (<pfetch-comp-redeems\n                       caddress start-block end-block\n                       decimals))]\n        (sort-by :block-number (concat repayments mints borrows liquidations redeems)))))\n\n\n(defn account-ctoken-events\n  [ctoken-events account]\n  (let [account' (s/lower-case account)]\n    (filter (fn [event]\n              (or\n               (and\n                (= (:type event) \"borrow\")\n                (= account' (s/lower-case (:borrower event))))\n               (and\n                (= (:type event) \"repayment\")\n                (= account' (and (s/lower-case (:payer event)) (s/lower-case (:borrower event)))))\n               (and\n                (= (:type event) \"mint\")\n                (= account' (s/lower-case (:minter event))))\n               (and\n                (= (:type event) \"redeem\")\n                (= account (s/lower-case (:redeemer event))))\n               (and\n                (= (:type event) \"liquidation\")\n                (= account (s/lower-case (:borrower event))))))\n            ctoken-events)))\n\n(defn acc-health\n  [a]\n  (js/parseFloat (get (get a \"health\") \"value\")))\n\n\n(defn acc-address\n  [a]\n  (get a \"address\"))\n\n(defn total-borrow-eth\n  [a]\n  (js/parseFloat (get (get a \"total_borrow_value_in_eth\") \"value\")))\n\n\n(defn total-collateral-eth\n  [a]\n  (js/parseFloat (get (get a \"total_collateral_value_in_eth\") \"value\")))\n\n\n(defn block-number\n  [a]\n  (get a \"block-number\"))\n\n\n(defn token-borrow-underlying\n  [a token]\n  (let [token-state (first (filter #(= (:symbol %) token) (:tokens a)))]\n    (if token-state\n      (js/parseFloat (:value (:borrow_balance_underlying token-state)))\n      0.0)))\n\n(defn token-supply-underlying\n  [a token]\n  (let [token-state (first (filter #(= (:symbol %) token) (:tokens a)))]\n    (if token-state\n      (js/parseFloat (:value (:supply_balance_underlying token-state)))\n      0.0)))\n\n\n(defn acc-state\n  [a]\n  (let [a' (clojure.walk/keywordize-keys a)\n        dai-borrowed (token-borrow-underlying a' \"cDAI\")\n        dai-supplied (token-supply-underlying a' \"cDAI\")\n        usdc-borrowed (token-borrow-underlying a' \"cUSDC\")\n        usdc-supplied (token-supply-underlying a' \"cUSDC\")\n        usdt-borrowed (token-borrow-underlying a' \"cUSDT\")\n        usdt-supplied (token-supply-underlying a' \"cUSDT\")\n        eth-borrowed (token-borrow-underlying a' \"cETH\")\n        eth-supplied (token-supply-underlying a' \"cETH\")\n        sai-borrowed (token-borrow-underlying a' \"cSAI\")\n        sai-supplied (token-supply-underlying a' \"cSAI\")\n        bat-borrowed (token-borrow-underlying a' \"cBAT\")\n        bat-supplied (token-supply-underlying a' \"cBAT\")\n\n        usd-value-borrowed (+ dai-borrowed usdc-borrowed usdt-borrowed)\n        usd-value-supplied (+ dai-supplied usdc-supplied usdt-supplied)]\n    {:account (acc-address a)\n     :health (acc-health a)\n     :health-computed (/ (total-collateral-eth a) (total-borrow-eth a))\n     :total-borrow-eth (total-borrow-eth a)\n     :total-collateral-eth (total-collateral-eth a)\n     :block-number (block-number a)\n     :dai-borrowed dai-borrowed\n     :dai-supplied dai-supplied\n     :eth-borrowed eth-borrowed\n     :eth-supplied eth-supplied\n     :sai-borrowed sai-borrowed\n     :sai-supplied sai-supplied\n     :bat-borrowed bat-borrowed\n     :bat-supplied bat-supplied\n\n     :usdc-borrowed usdc-borrowed\n     :usdc-supplied usdc-supplied\n     :usdt-borrowed usdt-borrowed\n     :usdt-supplied usdt-supplied\n     :usd-value-borrowed usd-value-borrowed\n     :usd-value-supplied usd-value-supplied}))\n\n(defn <account-state\n  [address & {:keys [block-number]\n              :or {block-number 0}}]\n  (go (js->clj\n       (<p! (. compound/api\n               account\n               (clj->js {:addresses address\n                         :block_number block-number}))))))\n\n\n(defn <account-states\n  [accounts block-number]\n  (go (let [resp (js->clj\n                  (<p! (. compound/api\n                          account\n                          (clj->js {:addresses accounts\n                                    :block_number block-number}))))\n            account-resps (get resp \"accounts\")\n            account-resps' (map #(into % {\"block-number\" block-number})\n                                account-resps)]\n        (map acc-state account-resps'))))\n\n\n(defn <account-state-range\n  [accounts start-block end-block block-step]\n  (->> (range start-block end-block block-step)\n       (map #(<account-states accounts %))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce concat [])))\n\n(defn accum-comp-rewards\n  [rewards-txs data-points]\n  (if (= 0 (count rewards-txs))\n    data-points\n    (let [current-tx (first rewards-txs)\n          prev-dp (last data-points)\n          prev-claimed (if (= 0 (count data-points))\n                         0\n                         (:comp-claimed prev-dp))\n          current-claim (js/parseFloat (:amount current-tx))\n          current-dp {:comp-claimed (+ prev-claimed current-claim)\n                      :side \"Claimed Rewards\"\n                      :comp-claim current-claim\n                      :block-number (:block-number current-tx)}]\n      (recur (rest rewards-txs) (concat data-points [current-dp])))))\n\n\n(defn <gov-account\n  [account]\n  (go (let [base-url (str \"https://api.compound.finance/api/v2/governance/comp/account\"\n                          \"?address=\")\n            full-url (str base-url account)\n            data (:body\n                  (<! (http/get\n                       full-url\n                       {:with-credentials? false})))]\n        data)))\n\n\n;;;; comp liquidations  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(comment\n  (go (def dai-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cDAI\")\n             cdai-init-block last-block 18))))\n\n  (go (def usdc-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cUSDC\")\n             cusdc-init-block last-block 6))))\n\n  (go (def eth-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cETH\")\n             ceth-init-block last-block 18))))\n\n  (go (def wbtc-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cWBTC\")\n             wbtc-init-block last-block 8))))\n\n  (go (def bat-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cBAT\")\n             ceth-init-block last-block 18))))\n\n\n  (go (def uni-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cUNI\")\n             ceth-init-block last-block 18))))\n\n  (go (def comp-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cCOMP\")\n             ceth-init-block last-block 18))))\n\n  (go (def zrx-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cZRX\")\n             ceth-init-block last-block 18))))\n\n  (go (def eth-liquidations' (<! (<dolarize-liquidations eth-liquidations \"WETH\"))))\n  (go (def wbtc-liquidations' (<! (<dolarize-liquidations wbtc-liquidations \"WBTC\"))))\n  (go (def bat-liquidations' (<! (<dolarize-liquidations bat-liquidations \"BAT\"))))\n  (go (def uni-liquidations' (<! (<dolarize-liquidations uni-liquidations \"UNI\"))))\n  (go (def comp-liquidations' (<! (<dolarize-liquidations comp-liquidations \"COMP\"))))\n  (go (def zrx-liquidations' (<! (<dolarize-liquidations zrx-liquidations \"ZRX\"))))\n\n  (def all-liquidations\n    (map (fn [lq]\n           {:block-number (:block-number lq)\n            :repay-amount (js/parseFloat (:repay-amount lq))\n            :hash (:hash lq)\n            :highlight (= (:hash lq)\n                          liquidation-hash)\n            :token (caddress->token (:caddress lq))})\n         (concat\n          dai-liquidations\n          usdc-liquidations\n          eth-liquidations'\n          wbtc-liquidations'\n          bat-liquidations'\n          uni-liquidations'\n          comp-liquidations'\n          zrx-liquidations')))\n\n\n  ;;; chart 1, plot compound liquidations\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 800\n            :height 200\n            :title {:text \"Compound Liquidations\"\n                    :anchor \"middle\"\n                    :align \"center\"}\n            :data {:values all-liquidations}\n            :config {:axis {:gridColor \"#657b83\"\n                            :gridOpacity 0.15}}\n            :resolve {:scale {:y \"independent\"}}\n            :encoding {:x {:field :block-number :type \"quantitative\"\n                           :scale {:domain [7800000 11400000]\n                                   :nice false}\n                           :title \"Block Number\"}\n                       :y {:field :repay-amount :title \"Repaid Value (USD)\"\n                           :type \"quantitative\"}\n                       :color {:field :highlight, :type \"nominal\"\n                               :legend false\n                               :scale {:domain [false, true], :range [ \"lightgray\"  \"crimson\"]}}}\n            :mark {:type \"point\" :filled true}}]]]\n   (. js/document (getElementById \"app\")))\n\n\n  ;;;; LLW Comound History  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n  (go (def llw-comp-history\n        (take-while #(<= (:block-number %) pre-event-block)\n                    (sort-by :block-number\n                             (mapcat (fn [dp]\n                                       [{:side \"Supplied\"\n                                         :eth-value (:total-collateral-eth dp)\n                                         :block-number (:block-number dp)\n                                         :dai (:dai-supplied dp)\n                                         :bat (:bat-supplied dp)\n                                         :usdc (:usdc-supplied dp)\n                                         :usdt (:usdt-supplied dp)\n                                         :eth (:eth-supplied dp)\n                                         :sai (:sai-supplied dp)\n                                         :value (:usd-value-supplied dp)}\n                                        {:side \"Borrowed\"\n                                         :eth-value (:total-borrow-eth dp)\n                                         :block-number (:block-number dp)\n                                         :eth (:eth-borrowed dp)\n                                         :dai (:dai-borrowed dp)\n                                         :bat (:bat-borrowed dp)\n                                         :sai (:sai-borrowed dp)\n                                         :usdc (:usdc-borrowed dp)\n                                         :usdt (:usdt-borrowed dp)\n                                         :value (:usd-value-borrowed dp)}\n                                        {:side \"Account Health\"\n                                         :block-number (:block-number dp)\n                                         :health (:health dp)}])\n                                     (<! (<account-state-range\n                                          [lw-address]\n                                          llw-start-block llw-end-block block-step)))))))\n\n\n  (go (def llw-comp-rewards\n        (filter #(<= (:block-number %) (:block-number (last llw-comp-history)))\n                (<! (<user-token-transfers provider comp-address comp-unitroller lw-address)))))\n\n\n\n\n  (def claimed-comp-dps (accum-comp-rewards llw-comp-rewards []))\n  (def llw-comp-history'\n    (concat llw-comp-history claimed-comp-dps))\n\n  ;; chart 2, LLW compound history\n  (defn historic-whale-layer\n    [y-field y-title & {:keys [show-labels y-min y-max y-log show-rewards]\n                        :or {show-labels false\n                             show-rewards true\n                             y-min false\n                             y-max false\n                             y-log false}}]\n    {:width 600\n     :height 75\n     :layer (concat\n             [{:encoding {:x {:field :block-number\n                              :type \"quantitative\"\n                              :title nil\n                              :scale {:domain [10850000, 11330758]\n                                      :nice false\n                                      :clamp true}\n                              :axis {:labels show-labels\n                                     :ticks (if show-labels true false)}}\n                          :y {:field y-field\n                              :title y-title\n                              :axis {:grid true\n                                     :tickCount 10\n                                     :tickband \"extent\"}\n                              :scale {:domain (if (and y-min y-max) [y-min y-max] [])\n                                      :type (if y-log \"symlog\" \"linear\")\n                                      :base 10\n                                      :clamp true}\n                              :type \"quantitative\"}\n                          :color {:field \"side\" :type \"nominal\"\n                                  :title \"Values\"\n                                  :legend {:orient \"right\" :direction \"vertical\"}\n                                  :scale {:domain [\"Account Health\", \"Supplied\",\n                                                   \"Borrowed\"\n                                                   (if true \"Claimed Rewards\" \"\")],\n                                          :range [ \"orange\"  \"#706897\" \"#fd3a69\"\n                                                  (if true\n                                                    \"#5aa469\")]}}}\n               :mark {:type \"line\" :interpolate \"step\"}}])})\n\n\n  (defn make-whale-history-plot\n    [line-points]\n    {:data {:values line-points}\n     :title {:text (str \"LLW (\" lw-address \") Compound History\")\n             :anchor \"middle\"\n             :align \"center\"}\n\n     :config {:concat {:spacing 2}\n              :axis {:gridColor \"#657b83\"\n                     :gridOpacity 0.25\n                     :labelColor \"#657b83\"\n                     :titleColor \"#657b83\"}}\n\n     :vconcat [(historic-whale-layer\n                :health \"Health\"  :y-min 1.0 :y-max 1.5 :y-log false :show-labels false)\n               (historic-whale-layer\n                  :value \"USD Value\" :y-min 0 :y-max 14000000 :y-log false :show-labels false)\n               (historic-whale-layer\n                :eth-value \"ETH Value\" :y-min 0 :y-max 40000 :y-log false :show-labels false)\n\n               (historic-whale-layer\n                :dai \"DAI\" :y-min 0 :y-max 14000000 :y-log false :show-labels false)\n               (historic-whale-layer\n                :sai \"SAI\" :y-min 0 :y-max 1400 :y-log false :show-labels false)\n               (historic-whale-layer\n                :bat \"BAT\" :y-min 0 :y-max 1400 :y-log false :show-labels false)\n\n\n               (historic-whale-layer\n                :usdc \"USDC\" :y-min 0 :y-max 30000000 :y-log false :show-labels false)\n               (historic-whale-layer\n                  :usdt \"USDT\" :y-min 0 :y-max 20000000 :y-log false :show-labels true)\n               (historic-whale-layer\n                  :eth \"ETH\" :y-min 0 :y-max 15000 :y-log false :show-labels true)\n\n               (historic-whale-layer\n                :comp-claimed \"Claimed COMP\" :y-min 0 :y-max 1110 :y-log false :show-labels true :show-rewards true)]})\n\n  (reagent/render\n     [:div\n      [:div [oz.core/vega-lite (make-whale-history-plot llw-comp-history')]]]\n     (. js/document (getElementById \"app\")))\n\n\n  ;;;;;;; LLW COMP Rewards ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n  (go (def lw-comp-account (<! (<gov-account lw-address))))\n  (* (reduce bignumber.core/+ (map (comp bn :comp_allocated) (:markets lw-comp-account))) 110)\n  ;; 1930275.0790803975\n  ;; seems that lw has acumulated 17547.95526436725001265 COMP at a 110 usd price\n  ;; would be about  1,930,275.079 USD of value.\n\n  (defn <group-transfers-in\n    [account token]\n    (go (let [transfers-in\n              (<! (<user-token-transfers provider token nil account))]\n          (map (fn [x] [(first x)  (str (second x))])\n               (sort-by second bignumber.core/>\n                        (map (fn [[a ts]] [a (reduce bignumber.core/+ (map :amount ts))])\n                             (group-by :from transfers-in)))))))\n\n  (defn <group-transfers-out\n    [account token]\n    (go (let [transfers-in\n              (<! (<user-token-transfers provider token account nil))]\n          (map (fn [x] [(first x)  (str (second x))])\n               (sort-by second bignumber.core/>\n                        (map (fn [[a ts]] [a (reduce bignumber.core/+ (map :amount ts))])\n                             (group-by :to transfers-in)))))))\n\n\n  (go (def llw-comp-senders (<! (<group-transfers-in lw-address comp-address))))\n  ([\"0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B\" \"17733.658428951418580387\"]\n   [\"0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\" \"374.416208864611093137\"]\n   [\"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\" \"273.34089138179241962\"]\n   [\"0x8538E5910c6F80419CD3170c26073Ff238048c9E\" \"157.5\"]\n   [\"0x926e78b8DF67e129011750Dd7b975f8E50D3d7Ad\" \"93.566168485386014783\"]\n   [\"0x9Af74A84DE5152DB4E0e656A8D735B0A3460C227\" \"69.186947436893890269\"]\n   [\"0x932B540fFd804afC8c7446d8B36d1C5bB7EC5f55\" \"30\"]\n   [\"0x94A0213d0392fc4e75bBEcaA73E82caFB68117a2\" \"18.28296914\"])\n\n  (go (def llw-comp-receivers (<! (<group-transfers-out lw-address comp-address))))\n  ([\"0x0f71DCff39Ab3A817d02b6b3b808FFA21d3f67c1\" \"8373.420744928309622985\"]\n   [\"0xd578653Be7CC96d254CeBC45151Fa8f193d6263B\" \"7492.153181667703287901\"]\n   [\"0xCFfDdeD873554F362Ac02f8Fb1f02E5ada10516f\" \"2149.989549180758865165\"]\n   [\"0x66e96e3784343D07147fFBe13BbA1a8371dde623\" \"255.633459714967885023\"]\n   [\"0x8538E5910c6F80419CD3170c26073Ff238048c9E\" \"157.5\"]\n   [\"0x94A0213d0392fc4e75bBEcaA73E82caFB68117a2\" \"117.491184012235877708\"]\n   [\"0x31503dcb60119A812feE820bb7042752019F2355\" \"108.010363149455361378\"]\n   [\"0x7EeD168D34c79BE34711bbAd222d5d212AB4232E\" \"70.689665030954216752\"])\n\n\n  ;;;; chart 3, 4 LLW Comp Claims\n\n  (def claim-block-nums\n      (sort (vec (set (map :block-number claimed-comp-dps)))))\n\n\n  (defn claimed-block-diffs\n    ([block-nums]\n     (claimed-block-diffs (rest block-nums) (first block-nums) []))\n    ([block-nums prev-block diffs]\n     (if (= (count block-nums) 0)\n       diffs\n       (let [current-block (first block-nums)\n             current-diff (- current-block prev-block)]\n         (recur (rest block-nums) current-block (concat diffs [current-diff]))))))\n\n\n  (def claim-block-diffs\n      (let [diffs (claimed-block-diffs claim-block-nums)]\n        (map (fn [a b] {:claim-n a :diff b})\n             (range (count diffs)) diffs)))\n\n  ;; scatter plot\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 800\n            :height 150\n            :title lw-address\n            :data {:values claim-block-diffs}\n            :encoding {:x {:field :claim-n :type \"quantitative\"}\n                       :y {:field :diff :title \"n blocks from previous claim\" :type \"quantitative\"\n                           :scale {:domain [0,  5000]\n                                   :clamp true}}}\n            :mark {:type \"point\"\n                   :filled true\n                   :color \"green\"}}]]]\n   (. js/document (getElementById \"app\")))\n\n  ;; histogram\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 800\n            :title lw-address\n            :height 150\n            :data {:values claim-block-diffs}\n            :encoding {:x {:title \"n blocks from previous claim (binned)\"\n                           :bin {:step 100} :field :diff\n                           :scale {:domain [0 10000]\n                                   :clamp true}}\n                       :y {:aggregate \"count\" :title \"count\"}}\n            :mark {:type \"bar\" :color \"green\"}}]]]\n   (. js/document (getElementById \"app\")))\n\n\n\n\n  ;;;;;;; LLW PNL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  ; PNL = COMP value claimed - gas paid at prices for that day - Compound interest diffs\n\n  ;;; Claimed USD value\n  (go (def claim-blocks\n        (<! (<fetch-blocks claim-block-nums))))\n\n  (go (def comp-days\n        (<! (<historic-gecko-prices (token->address \"COMP\")))))\n\n\n  (def claimed-comp-dps'\n    (map (fn [dp]\n           (let [price (blocknum->geckoprice\n                        comp-days claim-blocks (:block-number dp))\n                   usd-value-claimed (* (:comp-claimed dp) price)\n                   usd-value-claim (* (:comp-claim dp) price)]\n               (into dp {:comp-price price\n                         :usd-value-claim usd-value-claim\n                         :usd-value-claimed usd-value-claimed})))\n           claimed-comp-dps))\n\n  ;; (last claimed-comp-dps')\n  ;; by block 11321862 on novermber 24th, looper whale\n  ;; has claimed 17073 COMP in rewards\n  ;; at current price of $149.30 that is around 2.548M\n  ;; however since looper whale was a constant seller\n  ;; taking daily prices that would be around 2.16M\n  (def comp-value-claimed (:usd-value-claimed (last claimed-comp-dps')))\n\n  ;;; Compound interests\n  (go (def nov24-llw-state\n        (clojure.walk/keywordize-keys\n         (<! (<account-state lw-address :block-number 11321862)))))\n\n  (def ctoken-underlying-prices\n    {\"cDAI\" 1\n     \"cUSDT\" 1\n     \"cUSDC\" 1\n     \"cBAT\" 0.208242\n     \"cETH\" 559.39\n     \"cZRX\" 0.3705})\n\n\n  (defn interest-diff\n    [token-state]\n    (let [token (:symbol token-state)\n          paid\n          (bn (:value\n               (:lifetime_borrow_interest_accrued\n                token-state)))\n          received\n          (bn (:value\n               (:lifetime_supply_interest_accrued token-state)))\n          diff (bignumber.core/- received paid)\n          diff-usd (* diff (get ctoken-underlying-prices token))]\n      {token diff-usd}))\n\n\n  (defn interest-values\n    [account-state]\n    (let [tokens (:tokens account-state)]\n      (apply merge (map interest-diff tokens))))\n\n  (def compound-interest-diffs\n    (interest-values (first (:accounts nov24-llw-state))))\n\n  {\"cUSDC\" 50671.30404647924,\n   \"cETH\" -12.556879863444358,\n   \"cDAI\" -54170.1943721,\n   \"cBAT\" -3113.5224498513276,\n   \"cZRX\" -1798.486841825547,\n   \"cUSDT\" -77308.81287296793}\n\n  (def paid-interests (apply + (vals compound-interest-diffs)))\n  ;; paid a total of -85,732.269370129 USD value in interests\n\n\n  ;; Gas costs\n  ;; There 3 type of cost txs to account for:\n  ;; 1) Compound contract interactions: mint, redeems, repayments, borrows\n  ;; 2) COMP reward claims\n  ;; 3) COMP exchange transfers\n\n  ;; 1) Compound interactions\n\n  ;; ctoken events\n  (go (def dai-events\n        (<! (<pfetch-ctoken-events\n             (. compound/util getAddress \"cDAI\")\n             cdai-init-block last-block 18))))\n\n  (go (def usdc-events\n        (<! (<pfetch-ctoken-events\n             (. compound/util getAddress \"cUSDC\")\n             cusdc-init-block last-block 6))))\n\n\n  (go (def usdt-events\n        (<! (<pfetch-ctoken-events\n             (. compound/util getAddress \"cUSDT\")\n             cusdt-init-block last-block 8))))\n\n\n  ;; whale events\n  (def whale-events-dai (account-ctoken-events dai-events lw-address))\n  (def whale-events-usdc (account-ctoken-events usdc-events lw-address))\n  (def whale-events-usdt (account-ctoken-events usdt-events lw-address))\n\n  (def whale-events-hashes\n    (disj (set (concat (map :hash whale-events-dai)\n                       (map :hash whale-events-usdc)\n                       (map :hash whale-events-usdt)))\n          ;; exclude liquidation event\n          liquidation-hash))\n\n\n\n  (go (def whale-events-txs (<! (<get-trxs whale-events-hashes))))\n\n  (reduce bignumber.core/+ (map total-gas-paid whale-events-txs))\n  ;; paid a total of 33.29 eth in 922 txs, at current prices (544), that is\n  ;; about 18k USD\n\n  ;; 2) COMP reward claims\n\n  (def llw-comp-claim-hashes\n    (set (map :hash llw-comp-rewards)))\n\n  (go (def whale-claims-txs (<! (<get-trxs llw-comp-claim-hashes))))\n\n  (reduce bignumber.core/+ (map total-gas-paid whale-claims-txs))\n  ;; paid a total of 42.65 eth in 1098 txs, at current prices (544), that is\n  ;; about 23k USD\n\n  ;; 3) COMP exchange transfers\n\n  ;; transfers out from llw address\n  (go (def llw-comp-transfers\n        (<! (<user-token-transfers provider comp-address lw-address))))\n\n  (def lw-exchange-accounts\n    #{\"0x0f71DCff39Ab3A817d02b6b3b808FFA21d3f67c1\"\n      \"0xd578653Be7CC96d254CeBC45151Fa8f193d6263B\"\n      \"0xCFfDdeD873554F362Ac02f8Fb1f02E5ada10516f\"})\n\n  (def lw-comp-exchange-transfers\n    (filter #(contains? lw-exchange-accounts (:to %)) lw-comp-transfers))\n\n  (def llw-exchange-hashes\n    (set (map :hash lw-comp-exchange-transfers)))\n\n  (go (def whale-exchange-txs (<! (<get-trxs llw-exchange-hashes))))\n\n  (reduce bignumber.core/+ (map total-gas-paid whale-exchange-txs))\n  ;; paid a total of 1.22 eth across 187 txs, at current prices (544), that is\n  ;; about 663 USD\n\n  (def eth-paid-in-gas\n    (reduce\n     bignumber.core/+\n     [(reduce bignumber.core/+ (map total-gas-paid whale-exchange-txs))\n      (reduce bignumber.core/+ (map total-gas-paid whale-claims-txs))\n      (reduce bignumber.core/+ (map total-gas-paid whale-events-txs))]))\n\n  ;; a total of 77.29 eth paid in gas, at a current price of 544\n  ;; that would be about 42K USD\n\n  ;;;;;;; LLW Mistake Zoomed ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  (def first-block 11332733)\n\n\n  (go (def lw-state-history-mistake\n        (sort-by :block-number\n                 (mapcat (fn [dp]\n                           [{:side \"Supplied\"\n                             :eth-value (:total-collateral-eth dp)\n                             :block-number (:block-number dp)\n                             :dai (:dai-supplied dp)\n                             :usdc (:usdc-supplied dp)\n                             :usdt (:usdt-supplied dp)\n                             :value (:usd-value-supplied dp)\n                             }\n                            {:side \"Borrowed\"\n                             :eth-value (:total-borrow-eth dp)\n                             :block-number (:block-number dp)\n                             :dai (:dai-borrowed dp)\n                             :usdc (:usdc-borrowed dp)\n                             :usdt (:usdt-borrowed dp)\n                             :value (:usd-value-borrowed dp)}\n                            {:side \"Account Health\"\n                             :block-number (:block-number dp)\n                             :health (:health dp)}])\n                         (<! (<account-state-range\n                              [lw-address]\n                              11282800 11283600 10))))))\n\n  (defn make-whale-plot-concat-mistake\n    [line-points]\n    {:data {:values line-points}\n     :title {:text \"Liquidated Looper Whale's big mistake\"\n             :anchor \"middle\"\n             :color \"#657b83\"\n             :align \"center\"}\n\n\n     :config {;;:background \"#111\"\n              :concat {:spacing 2}\n              ;;:legend {:orient \"top-left\" :symbolDirection \"horizontal\"}\n              :axis {;;:tickColor \"#111\"\n                     ;;:ticks nil\n                     :gridColor \"#657b83\"\n                     :gridOpacity 0.25\n                     :labelColor \"#657b83\"\n                     :titleColor \"#657b83\"}}\n     ;;:resolve {:scale {:y \"independent\" }}\n\n     :vconcat [(historic-whale-layer :health \"Health\"  :y-min 1.0 :y-max 1.5\n                                     :show-rewards false :show-labels false)\n               (historic-whale-layer :value \"USD Value\" :y-min 0 :y-max 140000000\n                                     :show-rewards false :show-labels false)\n               (historic-whale-layer :dai \"DAI\" :y-min 0 :y-max 140000000\n                                     :show-rewards false :show-labels false)\n               (historic-whale-layer :usdc \"USDC\" :y-min 0 :y-max 140000000\n                                     :show-rewards false :show-labels true)]})\n\n\n\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat-mistake lw-state-history-mistake)]]]\n   (. js/document (getElementById \"app\")))\n\n  )\n\n\n\n\n\n;;;; Find loopers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn dai-loop-factor\n  [account-state]\n  (let [supplied (:dai-supplied account-state)\n        borrowed (:dai-borrowed account-state)\n        account (:account account-state)\n        factor (if (not= supplied 0)\n                 (if (> borrowed supplied)\n                   (/ supplied borrowed)\n                   (/ borrowed supplied))\n                   0)]\n    {:account account\n     :dai-borrow borrowed\n     :dai-loop-factor factor}))\n\n\n\n(comment\n  (go (def liquidated-accounts\n        (let [response (<! (http/get (str \"https://gist.githubusercontent.com/\"\n                                          \"mariorz/d682fa88f8c6437df9429f926cf12da0/\"\n                                          \"raw/d232f37be93f3eca8a99d619cd49233566b9e8a8/\"\n                                          \"compound-liquidated-accounts\")\n                                     {:with-credentials? false\n                                      :query-params {\"since\" 135}}))]\n          (clojure.string/split\n           (:body response)\n           \"\\n\"))))\n\n  (go (def nov24-states\n        (clojure.walk/keywordize-keys\n         (<! (<account-states liquidated-accounts 11321862)))))\n\n\n\n  (def accounts-dai-factors\n    (->> (map dai-loop-factor nov24-states)\n         (sort-by :dai-loop-factor)\n         (reverse)))\n)\n\n\n\n\n\n\n\n\n;;;; blob tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n(defn make-edn-blob [coll]\n  (-> coll\n      str\n      vector\n      clj->js\n      (js/Blob. {:type \"text/edn\"})))\n\n\n\n;; function downloadBlob(blob, name = 'file.txt')\n;; {\n;;   const blobUrl = URL.createObjectURL(blob);\n;;   const link = document.createElement(\"a\");\n;;   link.href = blobUrl;\n;;   link.download = name;\n;;   document.body.appendChild(link);\n;;   link.dispatchEvent(new MouseEvent('click', {bubbles: true,\n;;                                               cancelable: true,\n;;                                               view: window}));\n;;   document.body.removeChild(link);\n;;  }\n\n(defn download-blob [blob, filename]\n  (let [blob-url (js/URL.createObjectURL blob)\n        link (js/document.createElement \"a\")\n        _ (set! (.. link -href) blob-url)\n        _ (set! (.. link -download) filename)\n        _ (js/document.body.appendChild link)\n        ev-params (clj->js {\"bubbles\" true\n                            \"cancelable\" true\n                            \"view\" js/window})\n        ev (js/MouseEvent. \"click\" ev-params)]\n    (link.dispatchEvent ev)\n    (js/document.body.removeChild link)))\n\n\n(defn download-as-edn [coll]\n  (-> coll\n      str\n      vector\n      clj->js\n      (js/Blob. #js {:type \"text/edn\"})\n      js/URL.createObjectURL))\n\n\n\n\n\n\n"]}