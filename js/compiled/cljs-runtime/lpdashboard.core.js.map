{"version":3,"sources":["lpdashboard/core.cljs"],"mappings":";;AA8BA,AAAA,AAAKA;AAEL,AAAM,AAAQA;AAAd,AACE,AAAA,AAAMC;;AACN,AAAA,AAAMC;;AACN,AAAMC,AAAe;AAAA,AAAA;;;AACrB,AAAMC,AAAiB;AAAA,AAAA;;;AACvB,AAAMC,AAAgB;AAAA,AAAA;;;AALxB;AAeA,AAAA,AAAKC;AACL,AAAKC,AAASC;AAEdpB,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AAAKC;AAGL,AAAA,AAAKC;AAGL,AAAA,AAAKC,AACDF,AACAC;AAEJ,AAAA,AAAA,AAAA,AAAA,AAAKE;AAIL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMC,AAAE,AAAA,AAAGD;AAAX,AACE,AAAI,AAAA,AAAIA;AAAR,AAAA,AAAA,AAAA,AAAA,AAAA,AACwBC;;AADxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAEwBA;;;AAG5B,AAAA,AAAMC,AACHD;AADH,AAEE,AAAI,AAAA,AAAG,AAAUA;AACf,AAAA,AAAK,AAAA,AAAA,AAACE,AAAKF,AAAY,AAACE,AAAKF,AAAE,AAAA,AAAG,AAAUA;;AAC5CA;;;AAEJ,AAAA,AAAMG,AACHC,AAAQC,AAAMC,AAAaC;AAD9B,AAEE,AAAOC,AAAE,AAAA,AAAA,AAAA,AAACC,AAAMjB,AAAUkB,AAAmBC,AAAQd;AAC/Ce,AAAW,AAACC,AAAAA,AAAAA,AAAeR,AAAAA;AAC3BS,AAAY,AAAA,AAAA,AAACD,AAAAA,AAAAA,AAAeR,AAAAA;AAC5BU,AAAc,AAACC,AAAI,AAAA,AAAYJ,AAAYL;AAC3CU,AAAY,AAAA,AAAG,AAACD,AAAI,AAAA,AAAUJ,AAAYL;AAC1CW,AAAa,AAAA,AAAG,AAACF,AAAI,AAAA,AAAYJ,AAAYL;AAC7CY,AAAa,AAACH,AAAI,AAAA,AAAWJ,AAAYL;AACzCa,AAAe,AAACJ,AAAI,AAAA,AAAYF,AAAaP;AAC7Cc,AAAa,AAAA,AAAG,AAACL,AAAI,AAAA,AAAUF,AAAaP;AAC5Ce,AAAc,AAAA,AAAG,AAACN,AAAI,AAAA,AAAYF,AAAaP;AAC/CgB,AAAc,AAACP,AAAI,AAAA,AAAWF,AAAaP;AAVjD,AAYE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAAMjB,AAAUgC,AACoBlB,AACFD,AACHD,AACMW,AACDI,AACEC,AACDG,AACFN,AACCI,AACCH,AACCI;;AAE3C,AAAA,AAAMG,AACHrB;AADH,AAEE,AAAA,AAAA,AAAA,AAAA,AAACsB,AAAOlC,AAAkB,AAACS,AAAaG;;AAM1C,AAAA,AAAMuB,AACHvB,AAAQwB;AADX,AAEE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AACcN;AADd,AAAAQ,AAAAF;AAAA,AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAG,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAG,AAAA,AAEab,AAAerB;AAF5B8B,AAAAA;AAAA,AAAA,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAAK,AAAA,AAAA,AAGaf;AAHbS,AAAAA;AAAA,AAAA,AAAA,AAAAO,AAAAP;AAAA,AAAA,AAAAO,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAO,AAAA,AAAAR,AAAA;AAAAS,AAAA,AAI2BoC,AAAAA,AAAAA,AAAmB3E,AAAAA;AAJ9C8B,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAC,AAAAX,AAAA,AAAAS;;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAC;AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAAD,AAAAE,AAAA;AAAAE,AAAA,AAAAH;AAAAI,AAAA,AAAA;AAAAC,AAAA,AAAAL,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG,AAKW5C,AAAMjB,AAAUkB,AAAmBC;AAL9C4C,AAAA,AAAAT,AAAAA,AAMgBjC,AAAAA,AAAAA;AANhB2C,AAAA,AAAAF,AACQ9C;AADRsC,AAIQgC;AAJRvB,AAMQyB;AANR,AAAA,AAAAvB;AAAA,AAO2B,AAAAyB,AAAAzB;AAAA0B,AAAmB,AAAA,AAAaL;AAAhC,AAAA,AAAAI,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;;AAP5B1B,AAAA,AAAA,AAAAZ;AAAAa,AAAA,AAAAD,AAQ2B2B;AAR3BzB,AAAA,AAAAJ,AAAAG,AAOsBsB;AAPtBpB,AAAA,AAAAf,AAAAc,AAAA,AASKzD,AAAcC;AATnB8B,AAAAA;AAAA,AAAA,AAAA4B,AAAA5B,AAAA2B;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC;;AAAA,AAAAD,AAAA,AAAA;;AAAAA;;AAAA7B;;AAAA,AAAA,AAAA+B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAC;AAAA,AAAA,AAAA,AAAAiC,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAApC;AAAA,AAAA,AAAAoC,AAAA,AAAAF;;AAAAE;AAAA,AAAA,AAAAC,AAAA,AAAArC,AAAA;AAAA,AAAAsC,AAAAtC;AAAA,AAAA,AAAAsC,AAAA,AAAA,AAAAC,AAAA,AAAAvC,AAAA;;AAAAsC;AAAA,AAAAJ;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA/B;;;;AAAA+B;;;;;AAAA/B;;;;;AAAAA;;;;;;;;;AAAAwC,AAAA,AAAAC,AAAA,AAAA3C;AAAA,AAAA,AAAA2C,AAAAC,AAAA,AAAA/C;;AAAA8C;;AAAA,AAAA,AAAAE,AAAAH;;;AAAA7C;;AAWF,AAAA,AAAMyD,AACHC;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAgCA,AAC1C,AAAA,AAAA,AAACrF,AAAKqF;;AAGV,AAAA,AAAMC,AACHD;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAqCA,AAC/C,AAAA,AAAA,AAACrF,AAAKqF;;AAGV,AAAA,AAAAE,AAAMG;AAAN,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AACIG;AADJ,AAAAF,AAAAD,AAAA,AAAA,AACUI;AADV,AAEE,AAAA,AACE,AAAA,AAAA,AAAKD,AAAU,AAAA,AAAGC;AADpB,AAAA,AAAAC,AAESC;AAFT,AAAAD,AAEkBE;AAFlB,AAAA;;AAAA,AAAA,AAAAF;;;;AAIF,AAAA,AAAMG,AACHC;AADH,AAEE,AAACC,AACAC,AACA,AAAA,AAACpB,AACI,AAAA,AAAAqB,AAACF;AAAD,AAAS,AAACG,AAAiB,AAAA,AAAAD,AAAe,AAAAE,AAAA;AAClC,AAAA,AAAS,AAAC/B,AAAM,AAAA,AAAY0B;;AAE5C,AAAA,AAAMM,AACHN;AADH,AAEE,AAACC,AACAC,AACA,AAAA,AAACpB,AACI,AAAA,AAAAyB,AAACN;AAAD,AAAS,AACC,AAAA,AAACO,AAAS,AAAA,AAAAD,AACV,AAACE,AAAI,AAACL,AAAiB,AAAA,AAAAG,AAAe,AAAAF,AAAA;AACxC,AAAA,AAAS,AAAC/B,AAAM,AAAA,AAAY0B;;AAI5C,AAAA,AAAMU,AACHV;AADH,AAEE,AAAMW,AAAQ,AAACZ,AAAuBC;AAChCY,AAAU,AAACN,AAAyBN;AACpCa,AAAM,AAACC,AAAI,AAAChC,AAAIiC,AACA,AAAA,AAACjC,AAAQ,AAAA,AAAUkB;AACnCgB,AAAM,AAACF,AAAI,AAAChC,AAAIiC,AACA,AAACE,AAAON,AAAQC,AACb,AAACM,AAAIzH;AACxBY,AAAE,AAAC8G,AAAQH;AAPjB,AAQE,AAACE,AAAI,AAAC5C,AAAM,AAAC8C,AAAkBP,AAAMG;;AAKzC,AAAA,AAAMK,AACHC,AAAOtB;AADV,AAEE,AAAMuB,AAAS,AAACjD,AAAM,AAAA,AAAY0B;AAC5BwB,AAAO,AAAA,AAASD;AAChBE,AAAM,AAAA,AAAC3C,AAAqB0C;AAC5BE,AAAQ,AAAA,AAACC,AAAgBH;AACzBI,AAAQ,AAAA,AAACD,AAAqBD;AAC9BG,AAAU,AAACC,AAAS,AAAA,AAAChD,AAAa8C;AAClCG,AAAU,AAAA,AAACC,AAAwB,AAAA,AAAUV;AAC7CW,AAAU,AAAA,AAAYX;AACtBY,AAAa,AAACnC,AAAuBC;AACrCmC,AAAe,AAAC7B,AAAyBN;AACzCoC,AAAc,AAAC1B,AAA0BV;AACzCqC,AAAU,AAACvD,AAAIW,AACA,AAAA,AAAS,AAAA,AAAmB6B;AAZjD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAaa,AAAA,AAAKS,AACJ,AAAA,AAAKA,AAAwBA,AACxC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAACtB,AAAI,AAAA,AAAkBa,AAEZ,AAAA,AAAKS,AAEjB,AAAA,AAAG,AAACO,AAAmB,AAAA,AAAOL,AAEtB,AAAA,AAAKF,AAAmCpI,AAAW,AAAA,AAACkB,AAAI,AAAA,AAAY,AAAA,AAAMyG,AACzE,AAAA,AAAKS,AAAmCpI,AAAW,AAAA,AAACkB,AAAI,AAAA,AAAW,AAAA,AAAMyG,AACxE,AAAA,AAAKS,AACH,AAAA,AAAG,AAAA,AAAClH,AAAI,AAAA,AAAY,AAAA,AAAMyG,AACzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAK,AAAA,AAACzG,AAAI,AAAA,AAAU,AAAA,AAAMyG,AAChB,AAAA,AAAKS,AACI,AAAA,AAAG,AAAA,AAAClH,AAAI,AAAA,AAAU,AAAA,AAAMyG,AACnC,AAAA,AAAKS,AAEhB,AAAA,AAACC,AAAwB,AAAClD,AAAIW,AAAU,AAAA,AAAU6B,AAEvC,AAAA,AAAKS,AAEhB,AAAA,AAACC,AAAwB,AAAClD,AAAIW,AAAU,AAAA,AAAW6B,AAExC,AAAA,AAAKS,AAEhB,AAAA,AAACC,AAAwB,AAAClD,AAAIW,AAAU,AAAA,AAAY6B,AAGzC,AAAA,AAAKS,AAEhB,AAAA,AAACC,AAAwB,AAAClD,AAAIW,AAAU,AAAA,AAAQ6B,AAC3C,AAAA,AAAG,AAAA,AAAOW,AACJ,AAAA,AAAKF,AAEhB,AAAA,AAAG,AAAA,AAASE,AACD,AAAA,AAAKF,AAEhB,AAAA,AAAG,AAAA,AAASE,AACD,AAAA,AAAKF,AAEhB,AAAA,AAAG,AAAA,AAAUE,AAGF,AAAA,AAAKF,AACN,AAACjD,AAAI,AAAA,AAACyD,AAAKpD,AACP,AAAA,AAAQa,AAEvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAK,AAACwC,AAAM,AAAA,AAAQxC,AACV,AAAA,AAAK+B,AACN,AAACjD,AAAI,AAAA,AAACyD,AAAKpD,AACP,AAAA,AAAQa,AAEzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAK,AAACwC,AAAM,AAAA,AAAUxC,AACZ,AAAA,AAAK+B,AACK,AAACjD,AAAI,AAAA,AAACyD,AAAKpD,AACP,AAAA,AAAUa,AAEtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAK,AAACyC,AAAOL,AACH,AAAA,AAAKL,AAGhB,AAACjD,AAAIO,AAAoB+C,AAG5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAK,AAACI,AAAMX,AACF,AAAA,AAAKE,AACI,AAACjD,AAAIW,AACA,AAAA,AAAU,AAAA,AAAmB6B,AACtD,AAACxC,AAAIK,AAAe0C,AAEvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAACrB,AAAc,AAAClC,AAAM+D,AACZ,AAAA,AAAKN,AACMM,AACzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAK,AAACI,AAAOP,AACH,AAAA,AAAKH,AAEhB,AAACjD,AAAIO,AAAoB6C,AAC5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAK,AAACO,AAAON,AACH,AAAA,AAAKJ,AAEhB,AAACjD,AAAIO,AAAoB8C,AAGhB,AAAA,AAAKJ,AACL,AAACjD,AAAIW,AACA,AAACiD,AAAO,AAACC,AAAK,AAAA,AAASrB,AACf,AAACxC,AAAI,AAAK8D;AAAL,AAAQ,AAAA,AAAC/H,AAAI+H;AAnG9C,AAAA,AAmGwD,AAAC1D,AAAK,AAAA,AAASoC,AACpE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI/I,AAAOsK,AAAqB7C,AAAWsB,AACrC5H;;AAGX,AAAA,AAAMoJ;AAAN,AAEE,AAAApH,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAiH;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAA,AAAAD,AAI4B3K;AAJ5BqK,AAAAA;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAP,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAS,AAAA,AAAAP,AAAAQ;AAAAC,AAAA,AAAAC,AAAAV;AAAAW,AAAA,AAAA,AAAAF;AAAAG,AAAA,AAAAC,AAAAF,AAAA;AAAAG,AAAA,AAAAP,AAAAK;AAAAd,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAAf;;AAAAe;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAlB,AAAA;AAAA,AAAAmB,AAAA,AAAApB,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAApF,AAAAoF,AAAAoB;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAA3I,AAAA,AAAA+J,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAtB,AAAA;;AAAAqB;;AAAAE,AAAA,AAC+CsB;AAD/CrB,AAAA,AAAAD;AAAAE,AAAA,AAAAC,AAAAF;AAAAxB,AAAAA;AAAA,AAAA,AAAArG,AAAAqG,AAAA,AAAAyB;;AAAA,AAAA,AAAAxB,AAAA;AAAA,AAAA0B,AAAA,AAAA3B,AAAA;AAAA4B,AAAA,AAAAD,AACgCpG;AADhCsG,AAAA,AAAA,AAAAD,AAEgBjM;AAFhBmM,AAAA,AAAAF,AAAA,AAGUnJ;AAHVnB,AAAA,AAAAyK,AAAA/B;AAAA,AAAA,AAAA+B,AAAA,AAAA,AAAAC,AAAA,AAAAhC,AAAA;;AAAA+B;;AAAA/B,AAAA,AAAAiC,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAAJ;;AAAAI;;AAAA,AAAA,AAAA,AAAAC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAAJ;;AAAA,AAAAI,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAA3I,AAAA,AAAA6K,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAA,AAAAH,AAAA,AAAAhC,AAAA;;AAAAmC;;AAAAnC,AAAAA;AAAA,AAAA,AAAAoC,AAAA,AAAApC,AAAA;AAAA,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AAIctF;AAJd,AAAAwF,AAAAtC;AAAA,AAAA,AAAAsC,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAAnC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAuC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAArC;;AAAA,AAAAqC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA1H;;AAAA,AAAA0H,AAAA,AAAA;;AAAAA;;AAAAxC;;AAAA,AAAA,AAAAjF,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAiH;AAAA,AAAA,AAAA,AAAA/E,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAuH;AAAA,AAAA,AAAAC,AAAA1C;AAAA,AAAA,AAAA0C,AAAA,AAAAxH;;AAAAwH;AAAA,AAAA,AAAArH,AAAA,AAAA2E,AAAA;AAAA,AAAA2C,AAAA3C;AAAA,AAAA,AAAA2C,AAAA,AAAA,AAAApH,AAAA,AAAAyE,AAAA;;AAAA2C;AAAA,AAAAzH;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAiF;;;;AAAAjF;;;;;AAAAiF;;;;;AAAAA;;;;;;;;;AAAAxE,AAAA,AAAAoH,AAAA,AAAA9J;AAAA,AAAA,AAAA8J,AAAAlH,AAAA,AAAA/C;;AAAAiK;;AAAA,AAAA,AAAAjH,AAAAH;;;AAAA7C;;AAMF,AAAA,AAAMmK;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIsB/C;;AAGtB,AAAA,AAAMgD,AACH7L;AADH,AAEE,AAAC8L,AAAoB9L;;AACrB,AAAA,AAACuB,AAAevB;;AAElB,AAAA,AAAM+L,AAAkBC;AAAxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAEsB,AAAA,AAAAC,AAACJ,AAAwBG;;;AAE/C,AAAA,AAAME,AAAYF;AAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAK2B,AAAA,AAAI,AAAA,AAACzF,AAAK4F,AAChB,AAAA,AAACrM,AAAKqM,AACF,AAAKC;AAAL,AACE,AAAI,AAAA,AAACvC,AAAE,AAAOuC;AACZ,AAAA,AAAAH,AAACJ,AAAwBG;;AAD3B;;AAR3B,AAUuB,AAAKK;AAAL,AACE,AAAC/K,AAAO0K,AAAM,AAAA,AAAIK;AACxC,AAACN,AAAiBC;;AAGrB,AAAA,AAAMM;AAAN,AACE,AAAMC,AAAI,AAAA,AAAClN;AAAX,AACE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA4M,AAAA,AAAA,AAAA,AAAA,AAE+BM,AACFL,AAAWK;;;AAG5C,AAAMC,AAAM,AAACN,AAAW,AAAA,AAAC7M;AAAzB,AACE,AAAA,AAAMoN;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGI,AAAI,AAAA,AAAC5C,AAAK,AAAA,AAAA,AAAAoC,AAAS7M,AACjB,AAAA,AAAIP,AAAS,AAAC+M,AACd,AAAA,AAAA,AAAAK,AAAS7M,AACW,AAAA,AAAA,AAAI,AAAA,AAAMP,AAEjC,AAAA,AAAA,AAAA,AAAA,AAAAoN,AAAA,AAAI3N,AACDoO,AAAkCtN,AAErC,AAAA,AAAI,AAAK,AAAA,AAAMP,AACb2N,AACF,AAAA,AAAA,AAAI,AAAA,AAAG,AAACjE,AAAM,AAAA,AAAA,AAAA0D,AAAS7M,AAEpB,AAACyF,AAAK,AAAK8H;AAAL,AAAA,AAAA,AAAwBA;AAfpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAaG,AAAA,AAAA,AAAA,AAAA,AAAA,AAGS,AAACC,AAAQ,AAAA,AAAA,AAAAX,AAAS7M,AACS,AAACyN,AAAK,AAAA,AAAA,AAAAZ,AAAS7M,AAIrD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAK,AAAA,AAAM,AAAA,AAAA,AAAA6M,AAAiB7M,AAGRM,AAAW,AAAA,AAAA,AAAAuM,AAAiB7M,AAChBM,AAAW,AAAA,AAAA,AAAAuM,AAAgB7M,AACxC,AAAA,AAAA,AAAA6M,AAAiB7M,AACN,AAAA,AAAA,AAAA6M,AAAe7M,AAEhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAK,AAAA,AAAM,AAAA,AAAA,AAAA6M,AAAkB7M,AAGTM,AAAW,AAAA,AAAA,AAAAuM,AAAkB7M,AACxBM,AAAW,AAAA,AAAA,AAAAuM,AAAiB7M,AAClC,AAAA,AAAA,AAAA6M,AAAkB7M,AACP,AAAA,AAAA,AAAA6M,AAAgB7M,AAGlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAK,AAAA,AAAM,AAAA,AAAA,AAAA6M,AAAiB7M,AAK7B,AAAA,AAAA0N,AAACjI;AAAD,AAAM,AAAAiI,AAAC1F,AAAgB,AAACxG,AAAI,AAAA,AAAM,AAAA,AAAA,AAAAqL,AAAc7M,AAAY,AAAA,AAAA0N;AACtD,AAAA,AAAAC,AAAC/G;AAAD,AAAS,AAACgH,AAAiB,AAAA5G,AAAA,AAAwB,AAAC6G,AAAOC,AAAiB,AAACjI,AAAK,AAAA,AAAA8H;AAN3F,AAOiB,AAAA,AAAA,AAAAd,AAAgB7M,AACjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAK,AAAA,AAAM,AAAA,AAAA,AAAA6M,AAAiB7M,AAK7B,AAAA,AAAA+N,AAACtI;AAAD,AAAM,AAAAsI,AAAC/F,AAAgB,AAACxG,AAAI,AAAA,AAAM,AAAA,AAAA,AAAAqL,AAAc7M,AAAY,AAAA,AAAA+N;AACvD,AAAA,AAAAC,AAACpH;AAAD,AAAS,AAACqH,AAAkB,AAAAjH,AAAA,AAAwB,AAAC6G,AAAOC,AAAiB,AAACjI,AAAK,AAAA,AAAAmI;AAN3F,AAOgB,AAAA,AAAA,AAAAnB,AAAgB7M;;AAIpC,AAAA,AAAA,AAAAkO,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAaG;AAAnB,AACE,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAhK,AAAA8J;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA9J,AAAA+J,AAAMzO;AAAN,AAAA,AAAA0O,AAAA;AAAAC;AAAA,AAAA,AAAAJ,AAAA,AAAA;;AAAA,AAAA,AAAAI,AAAAA;;AAAA,AAAA,AAAAH,AAAA,AAAAhK,AAAAmK;AAAA,AAAA,AAAAH;AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAA,AAAAI,AAAAD;AAAA,AAAAE,AAg5DiD,AAAAuoD,AAAAzoD;AAh5DjDG,AAAA,AAAAlG,AAAAiG;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AACMS;AADN,AAAA,AAAA,AAAAP,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAESW,AAAQ1P,AAAY,AAAG,AAAA,AAAC4P,AAAS,AAAGF,AAAE,AAAC9G,AAAM5I,AAAS,AAAC6P,AAAS,AAACjH,AAAM5I;;AAFhF,AAAA,AAAAiP,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAZ;;AAAA,AAAAS,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAArK,AAAAiK,AACMe;AADN,AAAA,AAAAjF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA6E,AAAA,AAAAnE,AAAAwD,AAESe,AAAQ1P,AAAY,AAAG,AAAA,AAAC4P,AAAS,AAAGF,AAAE,AAAC9G,AAAM5I,AAAS,AAAC6P,AAAS,AAACjH,AAAM5I;;;AAFhF;;;;;AAAA,AAAA;;;AAAAwP,AAAA,AAAAhL,AAAA,AAAAkK,AACQ,AAAA,AAACiB;AADT,AAAA,AAAAH;AAAA,AAAAnI,AAAAmI,AAAA,AAAAC,AAAA,AAAAtE,AAAAmD;;AAAA,AAAA,AAAAnD,AAAAmD;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAQD;;;AADV,AAAA,AAAA,AAAMH;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA3J,AAAA0J;;;AAAA,AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAK4B,AACa,AAAA,AAAA,AAAA,AAACC;AAMnB,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAACC,AACOnD,AACLoD,AAAkB,AAACC,AAAQL,AAE5B,AAAA,AAAGM;;AACL,AAAI,AAAK,AAAKzR,AAAO,AAAA,AAACiI,AAAK4F;AACzB,AAAA,AAAC5K,AAAe,AAAA,AAACzB,AAAKqM;;AADxB;;;AAGF,AAAA,AAAe6D;AAAf,AAIE,AAACL;;;AAGH,AAAA,AAAMM;AAAN,AAGE,AAAA,AAACxR;;AA+BH,AAAA,AAAMyR,AACHC,AAAgBC,AAAgBC;AADnC,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAyO;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD,AAAAhH;AAAAkH,AAAA,AAAAhH,AAAA8G;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA/G,AAAA8G,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAT;AAAA,AAAA,AAAAS,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAW,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAMO1S,AAA8C0R,AAAgBC,AAAgBC;AANrFe,AAAA,AAAAhL,AAAA;AAAAkK,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA,AAAAC,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAAgB,AAAA,AAAAjB,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAAF,AAIiDlB;AAJjDqB,AAAA,AAAAlH,AAAAiH;AAAAnB,AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAlP,AAAA6N,AAAA,AAAAoB;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAqB,AAAA,AAAAtB,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA5M,AAAA4M,AAAAsB;;AAAA,AAAA,AAAArB,AAAA;AAAA,AAAAnQ,AAAA,AAAAyR,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAA,AAAAzH,AAAA,AAAA,AAAAkG,AAAA;;AAAAuB;;AAAAN,AAAA,AAE4ByB,AAAuBC,AAAgB9C;AAFnE2B,AAAA,AAG+BoB,AAAyB9C;AAHxDE,AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAR;;AAAAQ;;AAAA,AAAA,AAAAtP,AAAA6N,AAAA,AAAAwB;;AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAAxB;;AAAA,AAAAwB,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzB,AAAA;AAAA,AAAAnQ,AAAA,AAAA6R,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAA,AAAAnH,AAAA,AAAAwF,AAAA;;AAAA2B;;AAAA3B,AAAAA;AAAA,AAAA,AAAA4B,AAAA,AAAA5B,AAAA;AAAA,AAAA,AAAA6B,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AAKWtM;AALX,AAAAwM,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAA3B,AAAA;AAAA,AAAAiB,AAAA,AAAAlB,AAAA;AAAA+B,AAAA,AAAA/B,AAAA;AAAAgC,AAAA,AAAAD,AAAAb,AAIO2B;AAJP/S,AAAA,AAAAmS,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAA,AAAAzH,AAAA,AAAAwF,AAAA;;AAAAiC;;AAAAjC,AAAAA;AAAA,AAAA,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAmC,AAAA,AAAAjC;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAoC,AAAApC;AAAA,AAAA,AAAAoC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA/O;;AAAA,AAAA+O,AAAA,AAAA;;AAAAA;;AAAArC;;AAAA,AAAA,AAAAzM,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAyO;AAAA,AAAA,AAAA,AAAAvM,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA4O;AAAA,AAAA,AAAAC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAA7O;;AAAA6O;AAAA,AAAA,AAAA1O,AAAA,AAAAmM,AAAA;AAAA,AAAAwC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAA,AAAAzO,AAAA,AAAAiM,AAAA;;AAAAwC;AAAA,AAAA9O;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAyM;;;;AAAAzM;;;;;AAAAyM;;;;;AAAAA;;;;;;;;;AAAAhM,AAAA,AAAAyO,AAAA,AAAAnR;AAAA,AAAA,AAAAmR,AAAAvO,AAAA,AAAA/C;;AAAAsR;;AAAA,AAAA,AAAAtO,AAAAH;;;AAAA7C;;AASF,AAAA,AAAM2R,AACHjD;AADH,AAEE,AAAMkD,AAAiB,AAACL,AAAuBC,AAAgB9C;AAA/D,AACE,AAAA1O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAyR;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAG,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAnT,AAAA,AAAAuT,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA7I,AAAA,AAAAwI,AAAA;;AAAAK;;AAAAL,AAAAA;AAAA,AAAA,AAAAM,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAO,AAAAP;AAAA,AAAA,AAAAO,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AAY4EhO;AAZ5E,AAAAkO,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAU,AAAA,AAAAD;AAAAT,AAAAA;AAAA,AAAA,AAAA,AAAAW,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAD,AAAAA;AAAA,AAAA,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAX,AAAA;AAAA,AAAAY,AAAA,AAAAb,AAAA;AAAAlT,AAAA,AAAAgU,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAA,AAAAtJ,AAAA,AAAAwI,AAAA;;AAAAc;;AAAAd,AAAAA;AAAA,AAAA,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAd,AAAA;AAAA,AAAAe,AAAA,AAAAhB,AAAA;AAAAlT,AAAA,AAAAmU,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA,AAAAzJ,AAAA,AAAAwI,AAAA;;AAAAiB;;AAAAjB,AAAAA;AAAA,AAAA,AAAA,AAAAkB,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAkB,AAAA,AAAAnB,AAAA;AAAAmB,AAAA,AAAAnB,AAAA;AAAAoB,AAAA,AAAAD,AAAAjL;AAAAmL,AAAA,AAAAjL,AAAA+K;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAhL,AAAA+K,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAvB,AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAA2B,AAAA,AAAA5B,AAAA;AAAAA,AAAA,AAAA6B,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA7B,AAAA;AAAA,AAAA8B,AAAA,AAAA/B,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA/B,AAAA;AAAA,AAAAkB,AAAA,AAAAnB,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAiC,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAAd;;AAAA,AAAAc,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAAiC,AAAA,AAAAlC,AAAA;AAAAkC,AAAA,AAAAlC,AAAA;AAAAmC,AAAA,AAAAD,AAAAhM;AAAAkM,AAAA,AAAAhM,AAAA8L;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA/L,AAAA8L,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAtC,AAAA,AAAAwC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA1C;AAAA,AAAA,AAAA0C,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAzC,AAAA;AAAA,AAAA0C,AAAA,AAAA3C,AAAA;AAAA2C,AAAA,AAAA3C,AAAA;AAAA4C,AAAA,AAAAD,AAAAzM;AAAA2M,AAAA,AAAAzM,AAAAuM;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAxM,AAAAuM,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA/C,AAAA,AAAAiD,AAAAjD;AAAA,AAAA,AAAAiD,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAlD;AAAA,AAAA,AAAAkD,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAnD;AAAA,AAAA,AAAAmD,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAlD,AAAA;AAAA,AAAA0C,AAAA,AAAA3C,AAAA;AAAAoD,AAAA,AAAAT;AAAA3C,AAAAA;AAAA,AAAA,AAAA,AAAAqD,AAAArD;AAAA,AAAA,AAAAqD,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApD,AAAA;AAAA,AAAAnT,AAAA,AAAAwW,AAAAtD;AAAA,AAAA,AAAAsD,AAAA,AAAA,AAAA9L,AAAA,AAAAwI,AAAA;;AAAAsD;;AAAAtD,AAAAA;AAAA,AAAA,AAAAuD,AAAA,AAAAvD,AAAA;AAAA,AAAA,AAAAwD,AAAAxD;AAAA,AAAA,AAAAwD,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AAG4BjR;AAH5B,AAAAmR,AAAAzD;AAAA,AAAA,AAAAyD,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAAtD,AAAA;AAAA,AAAA0C,AAAA,AAAA3C,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA0D,AAAA1D;AAAA,AAAA,AAAA0D,AAAA,AAAAf;;AAAA,AAAAe,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzD,AAAA;AAAA,AAAA0D,AAAA,AAAA3D,AAAA;AAAAA,AAAA,AAAA4D,AAAA5D;AAAA,AAAA,AAAA4D,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAA7D;AAAA,AAAA,AAAA6D,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA5D,AAAA;AAAA,AAAAiC,AAAA,AAAAlC,AAAA;AAAA8D,AAAA,AAAA5B;AAAAlC,AAAAA;AAAA,AAAA,AAAA,AAAA+D,AAAA/D;AAAA,AAAA,AAAA+D,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA9D,AAAA;AAAA,AAAA+D,AAAA,AAAAhE,AAAA;AAAAgE,AAAA,AAAAhE,AAAA;AAAAiE,AAAA,AAAAD,AAAA9N;AAAAgO,AAAA,AAAA9N,AAAA4N;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA7N,AAAA4N,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAApE,AAAA,AAAAsE,AAAAtE;AAAA,AAAA,AAAAsE,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAvE;AAAA,AAAA,AAAAuE,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAxE;AAAA,AAAA,AAAAwE,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAvE,AAAA;AAAA,AAAAwE,AAAA,AAAAzE,AAAA;AAAAyE,AAAA,AAAAzE,AAAA;AAAA0E,AAAA,AAAAD,AAAAvO;AAAAyO,AAAA,AAAAvO,AAAAqO;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAtO,AAAAqO,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA7E,AAAA,AAAA+E,AAAA/E;AAAA,AAAA,AAAA+E,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAhF;AAAA,AAAA,AAAAgF,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAjF;AAAA,AAAA,AAAAiF,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAhF,AAAA;AAAA,AAAAwE,AAAA,AAAAzE,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAkF,AAAAlF;AAAA,AAAA,AAAAkF,AAAA,AAAAT;;AAAA,AAAAS,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjF,AAAA;AAAA,AAAAkF,AAAA,AAAAnF,AAAA;AAAAlT,AAAA,AAAAsY,AAAApF;AAAA,AAAA,AAAAoF,AAAA,AAAA,AAAA5N,AAAA,AAAAwI,AAAA;;AAAAoF;;AAAApF,AAAAA;AAAA,AAAA,AAAA,AAAAqF,AAAArF;AAAA,AAAA,AAAAqF,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApF,AAAA;AAAA,AAAAqF,AAAA,AAAAtF,AAAA;AAAAlT,AAAA,AAAAyY,AAAAvF;AAAA,AAAA,AAAAuF,AAAA,AAAA,AAAA/N,AAAA,AAAAwI,AAAA;;AAAAuF;;AAAAvF,AAAAA;AAAA,AAAA,AAAA,AAAAwF,AAAAxF;AAAA,AAAA,AAAAwF,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAvF,AAAA;AAAA,AAAAwF,AAAA,AAAAzF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA0F,AAAA1F;AAAA,AAAA,AAAA0F,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzF,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA2F,AAAA3F;AAAA,AAAA,AAAA2F,AAAA,AAAAlF;;AAAA,AAAAkF,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA1F,AAAA;AAAA,AAAAnT,AAAA,AAAA8Y,AAAA5F;AAAA,AAAA,AAAA4F,AAAA,AAAA,AAAApO,AAAA,AAAAwI,AAAA;;AAAA4F;;AAAA5F,AAAAA;AAAA,AAAA,AAAA6F,AAAA,AAAA7F,AAAA;AAAA,AAAA,AAAA8F,AAAA9F;AAAA,AAAA,AAAA8F,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AASgEvT;AAThE,AAAAyT,AAAA/F;AAAA,AAAA,AAAA+F,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAA5F,AAAA;AAAA,AAAA+F,AAAA,AAAAhG,AAAA;AAAAlT,AAAA,AAAAmZ,AAAAjG;AAAA,AAAA,AAAAiG,AAAA,AAAA,AAAAzO,AAAA,AAAAwI,AAAA;;AAAAiG;;AAAAjG,AAAAA;AAAA,AAAA,AAAA,AAAAkG,AAAAlG;AAAA,AAAA,AAAAkG,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjG,AAAA;AAAA,AAAAnT,AAAA,AAAAqZ,AAAAnG;AAAA,AAAA,AAAAmG,AAAA,AAAA,AAAArP,AAAA,AAAA,AAAAkJ,AAAA;;AAAAmG;;AAAAC,AAAA,AAW6ErG;AAX7EsG,AAAA,AAAAnP,AAAAkP;AAAApG,AAAAA;AAAA,AAAA,AAAA7Q,AAAA6Q,AAAA,AAAAqG;;AAAA,AAAA,AAAApG,AAAA;AAAA,AAAAqG,AAAA,AAAAtG,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA5P,AAAA4P,AAAAsG;;AAAA,AAAA,AAAArG,AAAA;AAAA,AAAAsG,AAAA,AAAAvG,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAwG,AAAAxG;AAAA,AAAA,AAAAwG,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAvG,AAAA;AAAA,AAAAnT,AAAA,AAAA2Z,AAAAzG;AAAA,AAAA,AAAAyG,AAAA,AAAA,AAAA3P,AAAA,AAAA,AAAAkJ,AAAA;;AAAAyG;;AAAAC,AAAA,AAAiB3G;AAAjB4G,AAAA,AAAAzP,AAAAwP;AAAA1G,AAAAA;AAAA,AAAA,AAAA7Q,AAAA6Q,AAAA,AAAA2G;;AAAA,AAAA,AAAA1G,AAAA;AAAA,AAAAiC,AAAA,AAAAlC,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA4G,AAAA5G;AAAA,AAAA,AAAA4G,AAAA,AAAA1E;;AAAA,AAAA0E,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3G,AAAA;AAAA,AAAAkB,AAAA,AAAAnB,AAAA;AAAA6G,AAAA,AAAA1F;AAAAnB,AAAAA;AAAA,AAAA,AAAA,AAAA8G,AAAA9G;AAAA,AAAA,AAAA8G,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA7G,AAAA;AAAA,AAAAnT,AAAA,AAAAia,AAAA/G;AAAA,AAAA,AAAA+G,AAAA,AAAA,AAAAvP,AAAA,AAAAwI,AAAA;;AAAA+G;;AAAA/G,AAAAA;AAAA,AAAA,AAAAgH,AAAA,AAAAhH,AAAA;AAAA,AAAA,AAAAiH,AAAAjH;AAAA,AAAA,AAAAiH,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AAKwC1U;AALxC,AAAA4U,AAAAlH;AAAA,AAAA,AAAAkH,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAA/G,AAAA;AAAA,AAAAkH,AAAA,AAAAnH,AAAA;AAAAA,AAAA,AAAAoH,AAAApH;AAAA,AAAA,AAAAoH,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAArH;AAAA,AAAA,AAAAqH,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApH,AAAA;AAAA,AAAAnT,AAAA,AAAAwa,AAAAtH;AAAA,AAAA,AAAAsH,AAAA,AAAA,AAAAxQ,AAAA,AAAA,AAAAkJ,AAAA;;AAAAsH;;AAAAC,AAAA,AAMqDxH;AANrDyH,AAAA,AAAAtQ,AAAAqQ;AAAAvH,AAAAA;AAAA,AAAA,AAAA7Q,AAAA6Q,AAAA,AAAAwH;;AAAA,AAAA,AAAAvH,AAAA;AAAA,AAAAwH,AAAA,AAAAzH,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA0H,AAAA1H;AAAA,AAAA,AAAA0H,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzH,AAAA;AAAA,AAAAnT,AAAA,AAAA6a,AAAA3H;AAAA,AAAA,AAAA2H,AAAA,AAAA,AAAA7Q,AAAA,AAAA,AAAAkJ,AAAA;;AAAA2H;;AAAAC,AAAA,AAE6B7H;AAF7B8H,AAAA,AAAA3Q,AAAA0Q;AAAA5H,AAAAA;AAAA,AAAA,AAAA7Q,AAAA6Q,AAAA,AAAA6H;;AAAA,AAAA,AAAA5H,AAAA;AAAA,AAAAnT,AAAA,AAAAgb,AAAA9H;AAAA,AAAA,AAAA8H,AAAA,AAAA,AAAAhR,AAAA,AAAA,AAAAkJ,AAAA;;AAAA8H;;AAAAC,AAAA,AAQiEhI;AARjEiI,AAAA,AAAA9Q,AAAA6Q;AAAA/H,AAAAA;AAAA,AAAA,AAAA7Q,AAAA6Q,AAAA,AAAAgI;;AAAA,AAAA,AAAA/H,AAAA;AAAA,AAAAnT,AAAA,AAAAmb,AAAAjI;AAAA,AAAA,AAAAiI,AAAA,AAAA,AAAAzQ,AAAA,AAAAwI,AAAA;;AAAAiI;;AAAAjI,AAAAA;AAAA,AAAA,AAAAkI,AAAA,AAAAlI,AAAA;AAAA,AAAA,AAAAmI,AAAAnI;AAAA,AAAA,AAAAmI,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AACgB5V;AADhB,AAAA8V,AAAApI;AAAA,AAAA,AAAAoI,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAAjI,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAqI,AAAA,AAAA5H,AAAAvK;AAAAoS,AAAA,AAAAlS,AAAAqK;AAAA8H,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAjS,AAAAgS,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAxI,AAAA,AAAA0I,AAAA1I;AAAA,AAAA,AAAA0I,AAAA,AAAAjI;;AAAAiI;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA3I;AAAA,AAAA,AAAA2I,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA5I;AAAA,AAAA,AAAA4I,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA3I,AAAA;AAAA,AAAA4I,AAAA,AAAA7I,AAAA;AAAAA,AAAA,AAAA8I,AAAA9I;AAAA,AAAA,AAAA8I,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAA/I;AAAA,AAAA,AAAA+I,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA9I,AAAA;AAAA,AAAA+D,AAAA,AAAAhE,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAgJ,AAAAhJ;AAAA,AAAA,AAAAgJ,AAAA,AAAAhF;;AAAA,AAAAgF,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA/I,AAAA;AAAA,AAAAnT,AAAA,AAAAmc,AAAAjJ;AAAA,AAAA,AAAAiJ,AAAA,AAAA,AAAAzR,AAAA,AAAAwI,AAAA;;AAAAiJ;;AAAAjJ,AAAAA;AAAA,AAAA,AAAAkJ,AAAA,AAAAlJ,AAAA;AAAA,AAAA,AAAAmJ,AAAAnJ;AAAA,AAAA,AAAAmJ,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AAOoD5W;AAPpD,AAAA8W,AAAApJ;AAAA,AAAA,AAAAoJ,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAAjJ,AAAA;AAAA,AAAAoJ,AAAA,AAAArJ,AAAA;AAAAA,AAAA,AAAAsJ,AAAAtJ;AAAA,AAAA,AAAAsJ,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAAvJ;AAAA,AAAA,AAAAuJ,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAtJ,AAAA;AAAA,AAAAuJ,AAAA,AAAAxJ,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAyJ,AAAAzJ;AAAA,AAAA,AAAAyJ,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAxJ,AAAA;AAAA,AAAAwE,AAAA,AAAAzE,AAAA;AAAA0J,AAAA,AAAAjF;AAAAzE,AAAAA;AAAA,AAAA,AAAA,AAAA2J,AAAA3J;AAAA,AAAA,AAAA2J,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA1J,AAAA;AAAA,AAAA+D,AAAA,AAAAhE,AAAA;AAAA4J,AAAA,AAAA5F;AAAAhE,AAAAA;AAAA,AAAA,AAAA,AAAA6J,AAAA7J;AAAA,AAAA,AAAA6J,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA5J,AAAA;AAAA,AAAAnT,AAAA,AAAAgd,AAAA9J;AAAA,AAAA,AAAA8J,AAAA,AAAA,AAAAhT,AAAA,AAAA,AAAAkJ,AAAA;;AAAA8J;;AAAAC,AAAA,AAIyChK;AAJzCiK,AAAA,AAAA9S,AAAA6S;AAAA/J,AAAAA;AAAA,AAAA,AAAA7Q,AAAA6Q,AAAA,AAAAgK;;AAAA,AAAA,AAAA/J,AAAA;AAAA,AAAAgK,AAAA,AAAAjK,AAAA;AAAAlT,AAAA,AAAAod,AAAAlK;AAAA,AAAA,AAAAkK,AAAA,AAAA,AAAA1S,AAAA,AAAAwI,AAAA;;AAAAkK;;AAAAlK,AAAAA;AAAA,AAAA,AAAA,AAAAmK,AAAAnK;AAAA,AAAA,AAAAmK,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA9Z;;AAAA,AAAA8Z,AAAA,AAAA;;AAAAA;;AAAApK;;AAAA,AAAA,AAAAzP,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAyR;AAAA,AAAA,AAAA,AAAAvP,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA2Z;AAAA,AAAA,AAAAC,AAAAtK;AAAA,AAAA,AAAAsK,AAAA,AAAA5Z;;AAAA4Z;AAAA,AAAA,AAAAzZ,AAAA,AAAAmP,AAAA;AAAA,AAAAuK,AAAAvK;AAAA,AAAA,AAAAuK,AAAA,AAAA,AAAAxZ,AAAA,AAAAiP,AAAA;;AAAAuK;AAAA,AAAA7Z;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAyP;;;;AAAAzP;;;;;AAAAyP;;;;;AAAAA;;;;;;;;;AAAAhP,AAAA,AAAAwZ,AAAA,AAAAlc;AAAA,AAAA,AAAAkc,AAAAtZ,AAAA,AAAA/C;;AAAAqc;;AAAA,AAAA,AAAArZ,AAAAH;;;AAAA7C;;AAeJ,AAAA,AAAMsc,AACH5N,AAAgBE;AADnB,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAmc;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD,AAAA1U;AAAA4U,AAAA,AAAA1U,AAAAwU;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAzU,AAAAwU,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAT;AAAA,AAAA,AAAAS,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAU,AAAA,AAC0BmC,AAAoB3Q;AAD9CyO,AAAA,AAEsB1L,AAAyB/C;AAF/C6N,AAAA,AAAAa,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAApc,AAAAub,AAAA,AAAAY;;AAAA,AAAA,AAAAX,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAe,AAAA,AAAAD;AAAAd,AAAAA;AAAA,AAAA,AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAAgB,AAAA,AAAAjB,AAAA;AAAAW,AAAA,AAAAX,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAAD,AAAAD,AAGsB9L;AAHtBiM,AAAA,AAAAT;AAAAU,AAAA,AAAA7U,AAAA4U;AAAApB,AAAA,AAAAsB,AAAAtB;AAAA,AAAA,AAAAsB,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA7c,AAAAub,AAAA,AAAAqB;;AAAA,AAAA,AAAApB,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAAuB,AAAA,AAAAT,AAAAtV;AAAAgW,AAAA,AAAA9V,AAAAoV;AAAAW,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA7V,AAAA4V,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA1B,AAAA,AAAA4B,AAAA5B;AAAA,AAAA,AAAA4B,AAAA,AAAAd;;AAAAc;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA7B,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAA+B,AAAA,AAAApB,AAGmEtO;AAHnE2P,AAAA,AAAAxV,AAAAuV;AAAA/B,AAAA,AAAAiC,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAAhB;;AAAAgB;;AAAA,AAAA,AAAAxd,AAAAub,AAAA,AAAAgC;;AAAA,AAAA,AAAA/B,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAAhC;;AAAA,AAAAgC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAmC,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAArB;;AAAA,AAAAqB,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAlC,AAAA;AAAA,AAAAgB,AAAA,AAAAjB,AAAA;AAAAmB,AAAA,AAAAnB,AAAA;AAAAoC,AAAA,AAAApC,AAAA;AAAAqC,AAAA,AAAAD,AAAAnB,AAIsB9L;AAJtBmN,AAAA,AAAAnB,AAAAkB,AAKKU;AALL/C,AAAAA;AAAA,AAAA,AAAAta,AAAAsa,AAAAsC;;AAAA,AAAA,AAAArC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAuC,AAAA,AAAArC;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAwC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA7c;;AAAA,AAAA6c,AAAA,AAAA;;AAAAA;;AAAAzC;;AAAA,AAAA,AAAAna,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAmc;AAAA,AAAA,AAAA,AAAAja,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA0c;AAAA,AAAA,AAAAC,AAAA3C;AAAA,AAAA,AAAA2C,AAAA,AAAA3c;;AAAA2c;AAAA,AAAA,AAAAxc,AAAA,AAAA6Z,AAAA;AAAA,AAAA4C,AAAA5C;AAAA,AAAA,AAAA4C,AAAA,AAAA,AAAAvc,AAAA,AAAA2Z,AAAA;;AAAA4C;AAAA,AAAA5c;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAma;;;;AAAAna;;;;;AAAAma;;;;;AAAAA;;;;;;;;;AAAA1Z,AAAA,AAAAuc,AAAA,AAAAjf;AAAA,AAAA,AAAAif,AAAArc,AAAA,AAAA/C;;AAAAof;;AAAA,AAAA,AAAApc,AAAAH;;;AAAA7C;;AAQF,AAAA,AAAMuf,AACH7Q,AAAgBE;AADnB,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAof;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAC0BL,AAAoB3Q;AAD9CiR,AAAA,AAEsBlO,AAAyB/C;AAF/C8Q,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA5e,AAAAwe,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAJ,AAGkD9Q;AAHlDmR,AAAA,AAAAhX,AAAA+W;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAhf,AAAAwe,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAU,AAAA,AAAAD,AAAAlY;AAAAoY,AAAA,AAAAlY,AAAAgY;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAjY,AAAAgY,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAb,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAkB,AAAA,AAAAT;AAAAT,AAAAA;AAAA,AAAA,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAlB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAoB,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAsB,AAAA,AAAAD,AAAAhB,AAGKnO;AAHL8N,AAAAA;AAAA,AAAA,AAAAvd,AAAAud,AAAAsB;;AAAA;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA5e;;AAAA,AAAA4e,AAAA,AAAA;;AAAAA;;AAAAvB;;AAAA,AAAA,AAAApd,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAof;AAAA,AAAA,AAAA,AAAAld,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAye;AAAA,AAAA,AAAAC,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAA1e;;AAAA0e;AAAA,AAAA,AAAAve,AAAA,AAAA8c,AAAA;AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA,AAAAte,AAAA,AAAA4c,AAAA;;AAAA0B;AAAA,AAAA3e;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAod;;;;AAAApd;;;;;AAAAod;;;;;AAAAA;;;;;;;;;AAAA3c,AAAA,AAAAse,AAAA,AAAAhhB;AAAA,AAAA,AAAAghB,AAAApe,AAAA,AAAA/C;;AAAAmhB;;AAAA,AAAA,AAAAne,AAAAH;;;AAAA7C;;AAOF,AAAA,AAAMohB,AACHC,AAAW3S;AADd,AAEE,AAAA1O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAkhB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAK,AAAA,AACqBtC,AAAoBgC;AADzCO,AAAA,AAAAD;AAAAE,AAAA,AAAA9Y,AAAA6Y;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA9gB,AAAAsgB,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAW,AAAA,AAAAT,AAAAzZ;AAAAma,AAAA,AAAAja,AAAAuZ;AAAAW,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAha,AAAA+Z,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAd,AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAd;;AAAAc;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAmB,AAAA,AAAAV;AAAAT,AAAAA;AAAA,AAAA,AAAA,AAAAoB,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAqB,AAAA,AAAAZ,AAAAha;AAAA6a,AAAA,AAAA3a,AAAA8Z;AAAAc,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA1a,AAAAya,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAxB,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAAjB;;AAAAiB;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA5B;AAAA,AAAA,AAAA4B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA3B,AAAA;AAAA,AAAA4B,AAAA,AAAA7B,AAAA;AAAA8B,AAAA,AAAA9B,AAAA;AAAA+B,AAAA,AAAAD,AAAAD,AAGKzR;AAHL4P,AAAAA;AAAA,AAAA,AAAArf,AAAAqf,AAAA+B;;AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAA6B,AAAA,AAAA7B,AAAA;AAAAgC,AAAA,AAAA3B,AAG6CjT;AAH7C6U,AAAA,AAAAxa,AAAAua;AAAAhC,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAxiB,AAAAsgB,AAAA,AAAAiC;;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAmC,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAAjC;;AAAA,AAAAiC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAvhB;;AAAA,AAAAuhB,AAAA,AAAA;;AAAAA;;AAAApC;;AAAA,AAAA,AAAAlf,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAkhB;AAAA,AAAA,AAAA,AAAAhf,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAohB;AAAA,AAAA,AAAAC,AAAAtC;AAAA,AAAA,AAAAsC,AAAA,AAAArhB;;AAAAqhB;AAAA,AAAA,AAAAlhB,AAAA,AAAA4e,AAAA;AAAA,AAAAuC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAA,AAAAjhB,AAAA,AAAA0e,AAAA;;AAAAuC;AAAA,AAAAthB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAkf;;;;AAAAlf;;;;;AAAAkf;;;;;AAAAA;;;;;;;;;AAAAze,AAAA,AAAAihB,AAAA,AAAA3jB;AAAA,AAAA,AAAA2jB,AAAA/gB,AAAA,AAAA/C;;AAAA8jB;;AAAA,AAAA,AAAA9gB,AAAAH;;;AAAA7C;;AAMF,AAAA,AAAM+jB,AACH1C;AADH,AAEE,AAAArhB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA4jB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AACqB7E,AAAoBgC;AADzC8C,AAAA,AAEsB1S,AAAyB4P;AAF/C2C,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAApjB,AAAAgjB,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAJ;AAAAK,AAAA,AAAAxb,AAAAub;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAxjB,AAAAgjB,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAU,AAAA,AAAAD,AAAA1c;AAAA4c,AAAA,AAAA1c,AAAAwc;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAzc,AAAAwc,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAb,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAkB,AAAA,AAAAT;AAAAT,AAAAA;AAAA,AAAA,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAlB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAoB,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAsB,AAAA,AAAAD,AAAAhB,AAGK3S;AAHLsS,AAAAA;AAAA,AAAA,AAAA/hB,AAAA+hB,AAAAsB;;AAAA;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAApjB;;AAAA,AAAAojB,AAAA,AAAA;;AAAAA;;AAAAvB;;AAAA,AAAA,AAAA5hB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA4jB;AAAA,AAAA,AAAA,AAAA1hB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAijB;AAAA,AAAA,AAAAC,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAljB;;AAAAkjB;AAAA,AAAA,AAAA/iB,AAAA,AAAAshB,AAAA;AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA,AAAA9iB,AAAA,AAAAohB,AAAA;;AAAA0B;AAAA,AAAAnjB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA4hB;;;;AAAA5hB;;;;;AAAA4hB;;;;;AAAAA;;;;;;;;;AAAAnhB,AAAA,AAAA8iB,AAAA,AAAAxlB;AAAA,AAAA,AAAAwlB,AAAA5iB,AAAA,AAAA/C;;AAAA2lB;;AAAA,AAAA,AAAA3iB,AAAAH;;;AAAA7C;;AAKF,AAAA,AAAM4lB,AACHvE;AADH,AAEE,AAAMwE,AAAY,AAACxG,AAAoBgC;AAAvC,AACE,AAAArhB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA0lB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAI,AAAA,AAAAhlB;AAAAilB,AAAA,AAAaP;AAAbQ,AAAA,AAAAtd,AAAAqd;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAtlB,AAAA8kB,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAW,AAAA,AAAAT,AAAAje;AAAA2e,AAAA,AAAAze,AAAA+d;AAAAW,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAxe,AAAAue,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAd,AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAd;;AAAAc;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAmB,AAAA,AAAAV;AAAAT,AAAAA;AAAA,AAAA,AAAA,AAAAoB,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAqB,AAAA,AAAAZ,AAAAxe;AAAAqf,AAAA,AAAAnf,AAAAse;AAAAc,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAlf,AAAAif,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAxB,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAAjB;;AAAAiB;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA5B;AAAA,AAAA,AAAA4B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA3B,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAA6B,AAAA,AAAA7B,AAAA;AAAA8B,AAAA,AAAA9B,AAAA;AAAA+B,AAAA,AAAAF,AAAAC;AAAAE,AAAA,AAAA3mB,AAAA,AAAA,AAAA,AAAAglB,AAAA0B,AAAA;AAAA/B,AAAAA;AAAA,AAAA,AAAA7jB,AAAA6jB,AAAAgC;;AAAA,AAAA,AAAA/B,AAAA;AAAA,AAAA4B,AAAA,AAAA7B,AAAA;AAAAiC,AAAA,AACalC;AADbmC,AAAA,AAAAjf,AAAAgf;AAAAjC,AAAA,AAAAmC,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAAjnB,AAAA8kB,AAAA,AAAAkC;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAoC,AAAApC;AAAA,AAAA,AAAAoC,AAAA,AAAAlC;;AAAA,AAAAkC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAhmB;;AAAA,AAAAgmB,AAAA,AAAA;;AAAAA;;AAAArC;;AAAA,AAAA,AAAA1jB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA0lB;AAAA,AAAA,AAAA,AAAAxjB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA6lB;AAAA,AAAA,AAAAC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAA9lB;;AAAA8lB;AAAA,AAAA,AAAA3lB,AAAA,AAAAojB,AAAA;AAAA,AAAAwC,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAA,AAAA1lB,AAAA,AAAAkjB,AAAA;;AAAAwC;AAAA,AAAA/lB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA0jB;;;;AAAA1jB;;;;;AAAA0jB;;;;;AAAAA;;;;;;;;;AAAAjjB,AAAA,AAAA0lB,AAAA,AAAApoB;AAAA,AAAA,AAAAooB,AAAAxlB,AAAA,AAAA/C;;AAAAuoB;;AAAA,AAAA,AAAAvlB,AAAAH;;;AAAA7C;;AAIJ,AAAA,AAAMwoB,AACHnH;AADH,AAEE,AAAArhB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAqoB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD,AAAA5gB;AAAA8gB,AAAA,AAAA5gB,AAAA0gB;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA3gB,AAAA0gB,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAT;AAAA,AAAA,AAAAS,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAU,AAAA,AACuBxD,AAAgBvE;AADvCoH,AAAAA;AAAA,AAAA,AAAAznB,AAAAynB,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAD;AAAAZ,AAAAA;AAAA,AAAA,AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAc,AAAA,AAAAf,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAiB,AAAA,AAAAF;AAAAG,AAAA,AAAA5gB,AAAA2gB;AAAAjB,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA5oB,AAAAynB,AAAA,AAAAkB;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAoB,AAAA,AAAAR,AAAAthB;AAAA+hB,AAAA,AAAA7hB,AAAAohB;AAAAU,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA5hB,AAAA2hB,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAvB,AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAb;;AAAAa;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAA2B,AAAA,AAAA5B,AAAA;AAAA6B,AAAA,AAAAD,AAE8CznB;AAF9C2nB,AAAA,AAAAD,AAEyBjL;AAFzBmL,AAAA,AAAAH,AAG8CoB;AAH9CjC,AAAA,AAAAgB,AAGyBnL;AAHzBoL,AAAA,AAAAtpB;AAAAupB,AAAA,AAAAH;AAAAI,AAAA,AAAA5hB,AAAA2hB;AAAAjC,AAAA,AAAAmC,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAApB;;AAAAoB;;AAAA,AAAA,AAAA5pB,AAAAynB,AAAA,AAAAkC;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAoC,AAAApC;AAAA,AAAA,AAAAoC,AAAA,AAAAlC;;AAAA,AAAAkC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnC,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAzB;;AAAA,AAAAyB,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApC,AAAA;AAAA,AAAAe,AAAA,AAAAhB,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAAsC,AAAA,AAAAtC,AAAA;AAAAuC,AAAA,AAAAvB,AAAAsB;AAAAE,AAAA,AAAA9pB,AAAA,AAAA,AAAA,AAAAspB,AAAAO,AAAA;AAAAvC,AAAAA;AAAA,AAAA,AAAAxmB,AAAAwmB,AAAAwC;;AAAA,AAAA,AAAAvC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAyC,AAAA,AAAAvC;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAA0C,AAAA1C;AAAA,AAAA,AAAA0C,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAjpB;;AAAA,AAAAipB,AAAA,AAAA;;AAAAA;;AAAA3C;;AAAA,AAAA,AAAArmB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAqoB;AAAA,AAAA,AAAA,AAAAnmB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA8oB;AAAA,AAAA,AAAAC,AAAA7C;AAAA,AAAA,AAAA6C,AAAA,AAAA/oB;;AAAA+oB;AAAA,AAAA,AAAA5oB,AAAA,AAAA+lB,AAAA;AAAA,AAAA8C,AAAA9C;AAAA,AAAA,AAAA8C,AAAA,AAAA,AAAA3oB,AAAA,AAAA6lB,AAAA;;AAAA8C;AAAA,AAAAhpB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAqmB;;;;AAAArmB;;;;;AAAAqmB;;;;;AAAAA;;;;;;;;;AAAA5lB,AAAA,AAAA2oB,AAAA,AAAArrB;AAAA,AAAA,AAAAqrB,AAAAzoB,AAAA,AAAA/C;;AAAAwrB;;AAAA,AAAA,AAAAxoB,AAAAH;;;AAAA7C;;AAUF,AAAA,AAAM0rB,AACHrK;AADH,AAEE,AAAArhB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAurB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAK,AAAA,AACqB3M,AAAoBgC;AADzC4K,AAAA,AAAAD;AAAAE,AAAA,AAAAnjB,AAAAkjB;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAnrB,AAAA2qB,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAc,AAAA,AAAAtrB;AAAAurB,AAAA,AAAAF,AAOiB5pB;AAPjB+pB,AAAA,AAAAD,AAAAJ,AAOM5a;AAPNkb,AAAA,AAAAJ,AAQiBf;AARjBoB,AAAA,AAAAD,AAAAL,AAQM7a;AARNob,AAAA,AAAAH,AAAAE;AAAAE,AAAA,AAAA5rB,AAAA,AAAA,AAAA,AAAAsrB,AAAAK,AAAA;AAAAnB,AAAAA;AAAA,AAAA,AAAA1pB,AAAA0pB,AAAAoB;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAoB,AAAA,AAAArB,AAAA;AAAAsB,AAAA,AAAAD;AAAArB,AAAAA;AAAA,AAAA,AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAtB,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAwB,AAAA,AAAAtB,AAAA9jB;AAAAqlB,AAAA,AAAAnlB,AAAA4jB;AAAAwB,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAllB,AAAAilB,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA3B,AAAA,AAAA6B,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAA3B;;AAAA2B;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA/B;AAAA,AAAA,AAAA+B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAgC,AAAA,AAAAvB;AAAAT,AAAAA;AAAA,AAAA,AAAA,AAAAiC,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAAoB,AAAA,AAAArB,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAkC,AAAA,AAAAb,AAAAjlB;AAAA+lB,AAAA,AAAA7lB,AAAA+kB;AAAAe,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA5lB,AAAA2lB,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAArC,AAAA,AAAAuC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAAlB;;AAAAkB;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAxC,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAA0C,AAAA,AAAAjC,AAAArkB;AAAAumB,AAAA,AAAArmB,AAAAmkB;AAAAmC,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAApmB,AAAAmmB,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA7C,AAAA,AAAA+C,AAAA/C;AAAA,AAAA,AAAA+C,AAAA,AAAAtC;;AAAAsC;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAhD;AAAA,AAAA,AAAAgD,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAjD;AAAA,AAAA,AAAAiD,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAhD,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAkD,AAAA,AAAA7C;AAAA8C,AAAA,AAAA/lB,AAAA8lB;AAAAlD,AAAA,AAAAoD,AAAApD;AAAA,AAAA,AAAAoD,AAAA,AAAAxC;;AAAAwC;;AAAA,AAAA,AAAA/tB,AAAA2qB,AAAA,AAAAmD;;AAAA,AAAA,AAAAlD,AAAA;AAAA,AAAAoD,AAAA,AAAArD,AAAA;AAAAsD,AAAA,AAAAtD,AAAA;AAAAuD,AAAA,AAAAF,AAIuBvd;AAJvBka,AAAA,AAAAwD,AAAAxD;AAAA,AAAA,AAAAwD,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAnuB,AAAA2qB,AAAA,AAAAuD;;AAAA,AAAA,AAAAtD,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAqD,AAAA,AAAArD,AAAA;AAAAyD,AAAA,AAAApD;AAAAqD,AAAA,AAAAtmB,AAAAqmB;AAAAzD,AAAA,AAAA2D,AAAA3D;AAAA,AAAA,AAAA2D,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAAtuB,AAAA2qB,AAAA,AAAA0D;;AAAA,AAAA,AAAAzD,AAAA;AAAA,AAAAoB,AAAA,AAAArB,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA4D,AAAA5D;AAAA,AAAA,AAAA4D,AAAA,AAAAvC;;AAAA,AAAAuC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3D,AAAA;AAAA,AAAAqD,AAAA,AAAAtD,AAAA;AAAAW,AAAA,AAAAX,AAAA;AAAA6D,AAAA,AAAAP,AAKuBxd;AALvBka,AAAA,AAAA8D,AAAA9D;AAAA,AAAA,AAAA8D,AAAA,AAAAnD;;AAAAmD;;AAAA,AAAA,AAAAzuB,AAAA2qB,AAAA,AAAA6D;;AAAA,AAAA,AAAA5D,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA+D,AAAA/D;AAAA,AAAA,AAAA+D,AAAA,AAAA7D;;AAAA,AAAA6D,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxtB;;AAAA,AAAAwtB,AAAA,AAAA;;AAAAA;;AAAAhE;;AAAA,AAAA,AAAAvpB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAurB;AAAA,AAAA,AAAA,AAAArpB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAqtB;AAAA,AAAA,AAAAC,AAAAlE;AAAA,AAAA,AAAAkE,AAAA,AAAAttB;;AAAAstB;AAAA,AAAA,AAAAntB,AAAA,AAAAipB,AAAA;AAAA,AAAAmE,AAAAnE;AAAA,AAAA,AAAAmE,AAAA,AAAA,AAAAltB,AAAA,AAAA+oB,AAAA;;AAAAmE;AAAA,AAAAvtB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAupB;;;;AAAAvpB;;;;;AAAAupB;;;;;AAAAA;;;;;;;;;AAAA9oB,AAAA,AAAAktB,AAAA,AAAA5vB;AAAA,AAAA,AAAA4vB,AAAAhtB,AAAA,AAAA/C;;AAAA+vB;;AAAA,AAAA,AAAA/sB,AAAAH;;;AAAA7C;;AAmBF,AAAA,AAAMgwB,AACHC,AAAkBC;AADrB,AAEE,AAACC,AAAiBF,AAAkBC;;AAKtC,AAAA,AAAME,AACHC,AAAcC;AADjB,AAEE,AAACH,AAAiBE,AAAcC;;AAElC,AAAA,AAAMC,AACHC,AAAIC;AADP,AAEE,AAACnR,AAAiBkR,AAAIC;;AAIxB,AAAA,AAAMC,AACHC,AAAYF,AAAUG,AAAUC;AADnC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEcD,AACK,AAACR,AACA,AAACxtB,AAAM+tB,AACP,AAACJ,AAAeK,AAAUH,AAC5B,AAAC7tB,AAAMiuB,AACN,AAACT,AACA,AAAC3E,AAAOkF,AACR,AAACJ,AAAeK,AAAUH,AAC5B,AAAChF,AAAOoF;;AAI1B,AAAA,AAAMC,AACHpiB;AADH,AAEE,AAAA1O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA2wB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AACkB1f,AAAuB0hB,AAAqBvkB;AAD9DwiB,AAAA,AAAAD;AAAAE,AAAA,AAAApoB,AAAAmoB;AAAAH,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAApwB,AAAA+vB,AAAA,AAAAI;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAD,AAAAtpB;AAAAwpB,AAAA,AAAAtpB,AAAAopB;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAArpB,AAAAopB,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAV,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAe,AAAA,AAAAT;AAAAN,AAAAA;AAAA,AAAA,AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAkB,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAAD,AAEoBkB;AAFpBhB,AAAA,AAAAlB,AACQ+B;AADRd,AAEQgB;AAFR,AAIwB,AAAKE;AAAL,AAAQ,AAAApzB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAizB;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AACqBP,AAAkBI;AADvCI,AAAA,AAAAzqB,AAAAwqB;AAAAF,AAAAA;AAAA,AAAA,AAAAryB,AAAAqyB,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAI,AAAA,AAAAJ,AAAA;AAAAK,AAAA,AAAAD,AAAA1rB;AAAA4rB,AAAA,AAAA1rB,AAAAwrB;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAzrB,AAAAwrB,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAR,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAX,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAa,AAAA,AAAAT;AAAAJ,AAAAA;AAAA,AAAA,AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAd,AAAA;AAAA,AAAAe,AAAA,AAAAhB,AAAA;AAAAiB,AAAA,AAAAD,AACOzxB;AADP2xB,AAAA,AAAAD,AAAMjvB;AAANmvB,AAAA,AAAAD;AAAAE,AAAA,AAEKrB;AAFLsB,AAAA,AAAAnC,AAAAiC,AAAAC;AAAApB,AAAAA;AAAA,AAAA,AAAApxB,AAAAoxB,AAAAqB;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxyB;;AAAA,AAAAwyB,AAAA,AAAA;;AAAAA;;AAAAtB;;AAAA,AAAA,AAAAjxB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAizB;AAAA,AAAA,AAAA,AAAA/wB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAqyB;AAAA,AAAA,AAAAC,AAAAxB;AAAA,AAAA,AAAAwB,AAAA,AAAAtyB;;AAAAsyB;AAAA,AAAA,AAAAnyB,AAAA,AAAA2wB,AAAA;AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAA,AAAAlyB,AAAA,AAAAywB,AAAA;;AAAAyB;AAAA,AAAAvyB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAixB;;;;AAAAjxB;;;;;AAAAixB;;;;;AAAAA;;;;;;;;;AAAAxwB,AAAA,AAAAkyB,AAAA,AAAA50B;AAAA,AAAA,AAAA40B,AAAAhyB,AAAA,AAAA/C;;AAAA+0B;;AAAA,AAAA,AAAA/xB,AAAAH;;;AAAA7C;;;AAJhCoyB,AAAA,AAAAF,AAOuBrkB;AAPvBwkB,AAAA,AAAAF,AAAAC,AAIoBhvB;AAJpBkvB,AAAA,AAAAC;AAAAC,AAAA,AAAAH,AAQc2C;AARdvC,AAAA,AAAAH,AAAAE,AAScyC,AAAuBC;AATrCnE,AAAAA;AAAA,AAAA,AAAA/vB,AAAA+vB,AAAA,AAAA0B;;AAAA,AAAA,AAAAzB,AAAA;AAAA,AAAA0B,AAAA,AAAA3B,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA9uB,AAAA8uB,AAAA2B;;AAAA;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAxwB;;AAAA,AAAAwwB,AAAA,AAAA;;AAAAA;;AAAA5B;;AAAA,AAAA,AAAA3uB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA2wB;AAAA,AAAA,AAAA,AAAAzuB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAqwB;AAAA,AAAA,AAAAC,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAAtwB;;AAAAswB;AAAA,AAAA,AAAAnwB,AAAA,AAAAquB,AAAA;AAAA,AAAA+B,AAAA/B;AAAA,AAAA,AAAA+B,AAAA,AAAA,AAAAlwB,AAAA,AAAAmuB,AAAA;;AAAA+B;AAAA,AAAAvwB;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA2uB;;;;AAAA3uB;;;;;AAAA2uB;;;;;AAAAA;;;;;;;;;AAAAluB,AAAA,AAAAkwB,AAAA,AAAA5yB;AAAA,AAAA,AAAA4yB,AAAAhwB,AAAA,AAAA/C;;AAAA+yB;;AAAA,AAAA,AAAA/vB,AAAAH;;;AAAA7C;;AAWF,AAAA,AAAMm1B,AACHC;AADH,AAAA,AAAA,AAAA,AAAA,AAEQ,AAAA,AAASA,AACL,AAAA,AAAOA,AACF,AAAA,AAAeA;;AAGhC,AAAA,AAAMC,AACHhU,AAAW3S,AAAgBE;AAD9B,AAEE,AAAA,AACE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAm1B;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD,AAwB4BhnB,AAAwBC,AAA8BE;AAxBlF2mB,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA30B,AAAAu0B,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAI,AAAA,AAUqBoC,AAA6BppB,AAAaF;AAV/D6mB,AAAAA;AAAA,AAAA,AAAAv0B,AAAAu0B,AAAA,AAAAK;;AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAP,AAAA;AAAAQ,AAAA,AAAAR,AAAA;AAAAS,AAAA,AAAAF,AAAAD,AAgByBvW;AAhBzB2W,AAAA,AAAAD,AAAAD,AAewB5F;AAfxB+F,AAAA,AAqBwBnS,AAAgB1C;AArBxCkU,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAn1B,AAAAu0B,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAY,AAAA,AAAAb,AAAA;AAAAc,AAAA,AAuB2B1kB,AAAuBjD;AAvBlD6mB,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAt1B,AAAAu0B,AAAA,AAAAc;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAgB,AAAA,AAcsB2B,AAA6BxpB;AAdnD6mB,AAAA,AAAAiB,AAAAjB;AAAA,AAAA,AAAAiB,AAAA,AAAAX;;AAAAW;;AAAA,AAAA,AAAAx1B,AAAAu0B,AAAA,AAAAgB;;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAAM,AAAA,AAAAP,AAAA;AAAAkB,AAAA,AAaqBwB,AAA6BvpB;AAblD6mB,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAAZ;;AAAAY;;AAAA,AAAA,AAAA11B,AAAAu0B,AAAA,AAAAkB;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAmB,AAAA,AAAApB,AAAA;AAAAqB,AAAA,AAAAD,AA2BsByB,AAAKjD;AA3B3B0B,AAAA,AA4BiCnL,AAAqBrK;AA5BtDkU,AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA91B,AAAAu0B,AAAA,AAAAsB;;AAAA,AAAA,AAAArB,AAAA;AAAA,AAAAuB,AAAA,AAAAxB,AAAA;AAAAyB,AAAA,AAsBwBxO,AAAiBnH;AAtBzCkU,AAAA,AAAA0B,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAj2B,AAAAu0B,AAAA,AAAAyB;;AAAA,AAAA,AAAAxB,AAAA;AAAA,AAAA0B,AAAA,AAAA3B,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAwB,AAAA,AAAAxB,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAU,AAAA,AAAAV,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAA4B,AAAA,AAAA5B,AAAA;AAAA6B,AAAA,AAAAD,AAAAJ,AAAAd,AAAAG,AA6Ba1F;AA7Bb2G,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAJ,AAAAzB,AAAAmB;AAAAW,AAAA,AAAAhF,AAAA8E,AAAAC;AAAAE,AAAA,AAAAJ,AAAAG,AA8BKc;AA9BL9C,AAAAA;AAAA,AAAA,AAAAtzB,AAAAszB,AAAAiC;;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAA2B,AAAA,AAAA3B,AAAA;AAAAkC,AAAA,AAAAhC,AAyB8B0C,AACA/6B,AAAuBsR,AAAgBE;AA1BrE2mB,AAAA,AAAAmC,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAAR;;AAAAQ;;AAAA,AAAA,AAAA12B,AAAAu0B,AAAA,AAAAkC;;AAAA;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAx1B;;AAAA,AAAAw1B,AAAA,AAAA;;AAAAA;;AAAApC;;AAAA,AAAA,AAAAnzB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAm1B;AAAA,AAAA,AAAA,AAAAjzB,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAq1B;AAAA,AAAA,AAAAC,AAAAtC;AAAA,AAAA,AAAAsC,AAAA,AAAAt1B;;AAAAs1B;AAAA,AAAA,AAAAn1B,AAAA,AAAA6yB,AAAA;AAAA,AAAAuC,AAAAvC;AAAA,AAAA,AAAAuC,AAAA,AAAA,AAAAl1B,AAAA,AAAA2yB,AAAA;;AAAAuC;AAAA,AAAAv1B;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAmzB;;;;AAAAnzB;;;;;AAAAmzB;;;;;AAAAA;;;;;;;;;AAAA1yB,AAAA,AAAAk1B,AAAA,AAAA53B;AAAA,AAAA,AAAA43B,AAAAh1B,AAAA,AAAA/C;;AAAA+3B;;AAAA,AAAA,AAAA/0B,AAAAH;;;AAAA7C;AADF,AAAA,AAAAs1B,AAkCSnxB;AAlCT,AAAAmxB,AAkCkBlxB;AAlClB,AAAA;;AAAA,AAAA,AAAAkxB;;;;AAoCF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKgD;AAML,AAAA,AAAMC,AACHlX,AAAW3S,AAAgBE;AAD9B,AAEE,AAAA,AACE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAq4B;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AACsBT,AAA6BxpB;AADnD+pB,AAAAA;AAAA,AAAA,AAAAz3B,AAAAy3B,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAl0B,AAAA;AAAAm0B,AAAA,AAAAF,AAAAC,AAESiB;AAFTrB,AAAAA;AAAA,AAAA,AAAA,AAAAK;AAAA,AAAAC,AAAAN;AAAA,AAAA,AAAAM,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAAO,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAO,AAAA,AAKY95B,AAAIm5B,AAAgBjX;AALhC6X,AAAA,AAAAD,AAGW5D,AACAhU,AAEAzS;AANX6pB,AAAAA;AAAA,AAAA,AAAAz3B,AAAAy3B,AAAA,AAAAS;;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAS,AAAA,AAOW9D,AACAhU,AACA3S,AACAE;AAVX6pB,AAAAA;AAAA,AAAA,AAAAz3B,AAAAy3B,AAAA,AAAAU;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAAx2B,AAAAw2B,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAa,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAt3B;;AAAA,AAAAs3B,AAAA,AAAA;;AAAAA;;AAAAhB;;AAAA,AAAA,AAAAr2B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAq4B;AAAA,AAAA,AAAA,AAAAn2B,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAm3B;AAAA,AAAA,AAAAC,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAAp3B;;AAAAo3B;AAAA,AAAA,AAAAj3B,AAAA,AAAA+1B,AAAA;AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAA,AAAAh3B,AAAA,AAAA61B,AAAA;;AAAAmB;AAAA,AAAAr3B;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAq2B;;;;AAAAr2B;;;;;AAAAq2B;;;;;AAAAA;;;;;;;;;AAAA51B,AAAA,AAAAg3B,AAAA,AAAA15B;AAAA,AAAA,AAAA05B,AAAA92B,AAAA,AAAA/C;;AAAA65B;;AAAA,AAAA,AAAA72B,AAAAH;;;AAAA7C;AADF,AAAA,AAAAw4B,AAYSr0B;AAZT,AAAAq0B,AAYkBp0B;AAZlB,AAAA;;AAAA,AAAA,AAAAo0B;;;;AAgBF,AAAA,AAAMuB,AACH1Y,AAAW3S,AAAgBE;AAD9B,AAEE,AAAA,AACE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA65B;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AACW10B;AADX20B,AAAA,AAK4B7a,AAAe7Q,AAAgBE;AAL3DqrB,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAr5B,AAAAi5B,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAA,AAAAD,AAMW70B;AANX+0B,AAAA,AAYwBzW,AAAgB1C;AAZxC4Y,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAz5B,AAAAi5B,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAU,AAAA,AAAA,AAAAD,AAaWj1B;AAbXm1B,AAAA,AAcwBpS,AAAiBnH;AAdzC4Y,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA75B,AAAAi5B,AAAA,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAY,AAAA,AAAAb,AAAA;AAAAc,AAAA,AAe2BppB,AAAuBjD;AAflDurB,AAAA,AAAAe,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAh6B,AAAAi5B,AAAA,AAAAc;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAe,AAAA,AAAAhB,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAiB,AAAA,AAAA,AAAAD,AAgBWx1B;AAhBX01B,AAAA,AAAAF,AAiB4BxsB,AAAwBC,AAA8BE;AAjBlFqrB,AAAA,AAAAmB,AAAAnB;AAAA,AAAA,AAAAmB,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAp6B,AAAAi5B,AAAA,AAAAkB;;AAAA,AAAA,AAAAjB,AAAA;AAAA,AAAAmB,AAAA,AAAApB,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAoB,AAAA,AAAApB,AAAA;AAAAqB,AAAA,AAAA,AAAAD,AAkBW51B;AAlBX81B,AAAA,AAAAN,AAmB8B9C,AACA/6B,AAAuBsR,AAAgBE;AApBrEqrB,AAAA,AAAAuB,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAx6B,AAAAi5B,AAAA,AAAAsB;;AAAA,AAAA,AAAArB,AAAA;AAAA,AAAAuB,AAAA,AAAAxB,AAAA;AAAAyB,AAAA,AAAA,AAAAD,AAqBWh2B;AArBXk2B,AAAA,AAAAF,AAsBsBrD,AAAKjD;AAtB3ByG,AAAA,AAuBiClQ,AAAqBrK;AAvBtD4Y,AAAA,AAAA4B,AAAA5B;AAAA,AAAA,AAAA4B,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA76B,AAAAi5B,AAAA,AAAA2B;;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAAmB,AAAA,AAAApB,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAA0B,AAAA,AAAA1B,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAA6B,AAAA,AAAA7B,AAAA;AAAA8B,AAAA,AAAAD,AAAApB,AAAAJ,AAAAQ,AAwBapK;AAxBbsL,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAZ,AAAAJ,AAAAU;AAAAO,AAAA,AAAA3J,AAAAyJ,AAAAC;AAAAE,AAAA,AAAAJ,AAAAG,AAyBK7D;AAzBL4B,AAAAA;AAAA,AAAA,AAAAh4B,AAAAg4B,AAAAkC;;AAAA;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAj6B;;AAAA,AAAAi6B,AAAA,AAAA;;AAAAA;;AAAAnC;;AAAA,AAAA,AAAA73B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA65B;AAAA,AAAA,AAAA,AAAA33B,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA85B;AAAA,AAAA,AAAAC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAA/5B;;AAAA+5B;AAAA,AAAA,AAAA55B,AAAA,AAAAu3B,AAAA;AAAA,AAAAsC,AAAAtC;AAAA,AAAA,AAAAsC,AAAA,AAAA,AAAA35B,AAAA,AAAAq3B,AAAA;;AAAAsC;AAAA,AAAAh6B;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA63B;;;;AAAA73B;;;;;AAAA63B;;;;;AAAAA;;;;;;;;;AAAAp3B,AAAA,AAAA25B,AAAA,AAAAr8B;AAAA,AAAA,AAAAq8B,AAAAz5B,AAAA,AAAA/C;;AAAAw8B;;AAAA,AAAA,AAAAx5B,AAAAH;;;AAAA7C;AADF,AAAA,AAAAg6B,AA6BS71B;AA7BT,AAAA61B,AA6BkB51B;AA7BlB,AAAA;;AAAA,AAAA,AAAA41B;;;;AAkCF,AAAA,AAAMyC,AACHpb,AAAW3S,AAAgBE;AAD9B,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAs8B;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAKiCnR,AAAqBrK;AALtDqb,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA97B,AAAA07B,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAK,AAAA,AAC0BxrB,AAAuBsvB,AAAmBnyB;AADpEsuB,AAAA,AAAAD,AAE2DnuB;AAF3DquB,AAAA,AAAAl0B,AAAAi0B;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAAl8B,AAAA07B,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAAz6B,AAAAy6B,AAAAW;;AAAA,AAAA,AAAAV,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAAe,AAAA,AAAAF,AAAAD,AAAAE,AAAAZ,AASOlM;AATPgM,AAAAA;AAAA,AAAA,AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAf,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAAiB,AAAA,AAIwBnV,AAAiBnH;AAJzCqb,AAAA,AAAAkB,AAAAlB;AAAA,AAAA,AAAAkB,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA58B,AAAA07B,AAAA,AAAAiB;;AAAA,AAAA,AAAAhB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAmB,AAAA,AAAAV;AAAAT,AAAAA;AAAA,AAAA,AAAA,AAAAoB,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAoB,AAAA,AAAArB,AAAA;AAAAqB,AAAA,AAAArB,AAAA;AAAAsB,AAAA,AAAAD,AAOY14B;AAPZ44B,AAAA,AAQY54B,AAA0Bgc;AARtC6c,AAAA,AAAAF,AAAAC,AAOS71B;AAPTs0B,AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAJ;;AAAAI;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA1B;AAAA,AAAA,AAAA0B,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAA4B,AAAA,AAAAnB,AAAAp1B;AAAAw2B,AAAA,AAAAt2B,AAAAk1B;AAAAqB,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAr2B,AAAAo2B,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA/B,AAAA,AAAAiC,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAAxB;;AAAAwB;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAlC,AAAA;AAAA,AAAAmC,AAAA,AAAApC,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAAqC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApC,AAAA;AAAA,AAAAmC,AAAA,AAAApC,AAAA;AAAAoC,AAAA,AAAApC,AAAA;AAAAsC,AAAA,AAAAF,AAAA/2B;AAAAk3B,AAAA,AAAAh3B,AAAA62B;AAAAI,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA/2B,AAAA82B,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAzC,AAAA,AAAA2C,AAAA3C;AAAA,AAAA,AAAA2C,AAAA,AAAAP;;AAAAO;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA5C;AAAA,AAAA,AAAA4C,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA7C;AAAA,AAAA,AAAA6C,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA5C,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAA8C,AAAA,AAGwBzb,AAAgB1C;AAHxCqb,AAAA,AAAA+C,AAAA/C;AAAA,AAAA,AAAA+C,AAAA,AAAAjC;;AAAAiC;;AAAA,AAAA,AAAAz+B,AAAA07B,AAAA,AAAA8C;;AAAA,AAAA,AAAA7C,AAAA;AAAA,AAAAoB,AAAA,AAAArB,AAAA;AAAAgD,AAAA,AAAA,AAAA3B,AAUW/gC,AAA4C0R,AAAgB2S;AAVvEse,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAj7B,AAAA;AAAAk7B,AAAA,AAAAl7B,AAAA;AAAAm7B,AAAA,AAAAn7B,AAAA;AAAAo7B,AAAA,AAAAH,AAAAC,AAAAC;AAAAE,AAAA,AAAAzN,AAAAoN,AAAAI;AAAArD,AAAA,AAAAuD,AAAAvD;AAAA,AAAA,AAAAuD,AAAA,AAAAP;;AAAAO;;AAAA,AAAA,AAAA,AAAAC,AAAAxD;AAAA,AAAA,AAAAwD,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAvD,AAAA;AAAA,AAAAmC,AAAA,AAAApC,AAAA;AAAAyD,AAAA,AAAArB;AAAApC,AAAAA;AAAA,AAAA,AAAA,AAAA0D,AAAA1D;AAAA,AAAA,AAAA0D,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzD,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAA2D,AAAA,AAAAtD;AAAAuD,AAAA,AAAAv3B,AAAAs3B;AAAA3D,AAAA,AAAA6D,AAAA7D;AAAA,AAAA,AAAA6D,AAAA,AAAAhD;;AAAAgD;;AAAA,AAAA,AAAAv/B,AAAA07B,AAAA,AAAA4D;;AAAA;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAr+B;;AAAA,AAAAq+B,AAAA,AAAA;;AAAAA;;AAAA9D;;AAAA,AAAA,AAAAt6B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAs8B;AAAA,AAAA,AAAA,AAAAp6B,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAk+B;AAAA,AAAA,AAAAC,AAAAhE;AAAA,AAAA,AAAAgE,AAAA,AAAAn+B;;AAAAm+B;AAAA,AAAA,AAAAh+B,AAAA,AAAAg6B,AAAA;AAAA,AAAAiE,AAAAjE;AAAA,AAAA,AAAAiE,AAAA,AAAA,AAAA/9B,AAAA,AAAA85B,AAAA;;AAAAiE;AAAA,AAAAp+B;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAs6B;;;;AAAAt6B;;;;;AAAAs6B;;;;;AAAAA;;;;;;;;;AAAA75B,AAAA,AAAA+9B,AAAA,AAAAzgC;AAAA,AAAA,AAAAygC,AAAA79B,AAAA,AAAA/C;;AAAA4gC;;AAAA,AAAA,AAAA59B,AAAAH;;;AAAA7C;;AAiBF,AAAA,AAAM8gC,AACHzf,AAAW3S,AAAgBE;AAD9B,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA2gC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD,AAAAl5B;AAAAo5B,AAAA,AAAAl5B,AAAAg5B;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAj5B,AAAAg5B,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAN,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAT;AAAA,AAAA,AAAAS,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAA,AAAAF,AAAAC,AAmBW3kC,AAA8DqkB;AAnBzEwgB,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAn9B,AAAA;AAAAo9B,AAAA,AAAAp9B,AAAA;AAAAq9B,AAAA,AAAAr9B,AAAA;AAAAs9B,AAAA,AAAAH,AAAAC,AAAAC;AAAAE,AAAA,AAAA3P,AAAAsP,AAAAI;AAAAlB,AAAA,AAAAoB,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAP;;AAAAO;;AAAA,AAAA,AAAA,AAAAC,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApB,AAAA;AAAA,AAAAqB,AAAA,AAC0B9wB,AAAuB21B,AAAmBx4B;AADpE4zB,AAAA,AAI4BnK,AAA+B/6B,AAASsR,AAAgBE;AAJpFmyB,AAAA,AAAAwB,AAAAxB;AAAA,AAAA,AAAAwB,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAvhC,AAAA+/B,AAAA,AAAAuB;;AAAA,AAAA,AAAAtB,AAAA;AAAA,AAAAwB,AAAA,AAAAzB,AAAA;AAAA0B,AAAA,AAAAD;AAAAzB,AAAAA;AAAA,AAAA,AAAA,AAAA2B,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAA2B,AAAA,AAAA5B,AAAA;AAAA6B,AAAA,AAawB7e,AAAgB1C;AAbxC0f,AAAA,AAAA8B,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA7hC,AAAA+/B,AAAA,AAAA6B;;AAAA,AAAA,AAAA5B,AAAA;AAAA,AAAA8B,AAAA,AAAA/B,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA9+B,AAAA8+B,AAAA+B;;AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAA+B,AAAA,AAAAhC,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAiC,AAAAjC;AAAA,AAAA,AAAAiC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAhC,AAAA;AAAA,AAAAiC,AAAA,AAAAlC,AAAA;AAAAmC,AAAA,AAAAnC,AAAA;AAAAW,AAAA,AAAAX,AAAA;AAAAoC,AAAA,AAAApC,AAAA;AAAAqC,AAAA,AAAArC,AAAA;AAAAsC,AAAA,AAAAD,AAM8B+D;AAN9B7D,AAAA,AAAAD;AAAAF,AAAA,AAAAG;AAAAC,AAAA,AAAAL,AAOgCtgC;AAPhC8+B,AAAA,AAAA,AAAA6B;AAAAN,AAAA,AAAAvB,AAQwBnwB,AAAuB0hB;AAR/CuQ,AAAA,AAAAP,AAAAE,AASkEv0B;AATlE60B,AAAA,AAAA16B,AAAAy6B;AAAAzC,AAAA,AAAA2C,AAAA3C;AAAA,AAAA,AAAA2C,AAAA,AAAAT;;AAAA,AAAAS,AAAA,AAAAhC;;AAAA,AAAAgC,AAAA,AAAAP;;AAAAO;;AAAA,AAAA,AAAA1iC,AAAA+/B,AAAA,AAAA0C;;AAAA,AAAA,AAAAzC,AAAA;AAAA,AAAA2C,AAAA,AAAA5C,AAAA;AAAA6C,AAAA,AAeiClY,AAAqBrK;AAftD0f,AAAA,AAAA8C,AAAA9C;AAAA,AAAA,AAAA8C,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA7iC,AAAA+/B,AAAA,AAAA6C;;AAAA,AAAA,AAAA5C,AAAA;AAAA,AAAAwB,AAAA,AAAAzB,AAAA;AAAAyB,AAAA,AAAAzB,AAAA;AAAA+C,AAAA,AAAAtB,AAAAz6B;AAAAg8B,AAAA,AAAA97B,AAAAu6B;AAAAwB,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA77B,AAAA47B,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAlD,AAAA,AAAAoD,AAAApD;AAAA,AAAA,AAAAoD,AAAA,AAAA3B;;AAAA2B;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAArD;AAAA,AAAA,AAAAqD,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAtD;AAAA,AAAA,AAAAsD,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAArD,AAAA;AAAA,AAAA+B,AAAA,AAAAhC,AAAA;AAAAuD,AAAA,AAAAvB;AAAAhC,AAAAA;AAAA,AAAA,AAAA,AAAAwD,AAAAxD;AAAA,AAAA,AAAAwD,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAvD,AAAA;AAAA,AAAAkC,AAAA,AAAAnC,AAAA;AAAAmC,AAAA,AAAAnC,AAAA;AAAAyD,AAAA,AAAAtB,AAKuDtgC;AALvD6hC,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAD,AAKuBrnC;AALvBunC,AAAA,AAAA57B,AAAA27B;AAAA3D,AAAA,AAAA6D,AAAA7D;AAAA,AAAA,AAAA6D,AAAA,AAAA1B;;AAAA0B;;AAAA,AAAA,AAAA5jC,AAAA+/B,AAAA,AAAA4D;;AAAA,AAAA,AAAA3D,AAAA;AAAA,AAAA2C,AAAA,AAAA5C,AAAA;AAAA8D,AAAA,AAAA9D,AAAA;AAAA+D,AAAA,AAAA/D,AAAA;AAAAgE,AAAA,AAAAhE,AAAA;AAAAiE,AAAA,AAAAF,AAAAD,AAAAE,AAAApB,AAkBOjT;AAlBPqQ,AAAAA;AAAA,AAAA,AAAA,AAAAkE,AAAAlE;AAAA,AAAA,AAAAkE,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjE,AAAA;AAAA,AAAA+B,AAAA,AAAAhC,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAAmE,AAAA,AAAAnC,AAAAh7B;AAAAo9B,AAAA,AAAAl9B,AAAA86B;AAAAqC,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAj9B,AAAAg9B,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAtE,AAAA,AAAAwE,AAAAxE;AAAA,AAAA,AAAAwE,AAAA,AAAAxC;;AAAAwC;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAzE;AAAA,AAAA,AAAAyE,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA1E;AAAA,AAAA,AAAA0E,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAzE,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA2E,AAAA3E;AAAA,AAAA,AAAA2E,AAAA,AAAAzE;;AAAA,AAAAyE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA1E,AAAA;AAAA,AAAAwB,AAAA,AAAAzB,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA4E,AAAA5E;AAAA,AAAA,AAAA4E,AAAA,AAAAnD;;AAAA,AAAAmD,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3E,AAAA;AAAA,AAAA4E,AAAA,AAAA7E,AAAA;AAAAY,AAAA,AAAAiE,AAWiChjC;AAXjCijC,AAAA,AAYiCzkB,AAAkBC,AAAW3S;AAZ9DqyB,AAAA,AAAA+E,AAAA/E;AAAA,AAAA,AAAA+E,AAAA,AAAAnE;;AAAAmE;;AAAA,AAAA,AAAA9kC,AAAA+/B,AAAA,AAAA8E;;AAAA,AAAA,AAAA7E,AAAA;AAAA,AAAA6D,AAAA,AAAA9D,AAAA;AAAAgF,AAAA,AAcwBvd,AAAiBnH;AAdzC0f,AAAA,AAAAiF,AAAAjF;AAAA,AAAA,AAAAiF,AAAA,AAAAnB;;AAAAmB;;AAAA,AAAA,AAAAhlC,AAAA+/B,AAAA,AAAAgF;;AAAA,AAAA,AAAA/E,AAAA;AAAA,AAAAiC,AAAA,AAAAlC,AAAA;AAAAoC,AAAA,AAAApC,AAAA;AAAAkF,AAAA,AAAAlF,AAAA;AAAAgE,AAAA,AAAAkB,AASwBrjC;AATxBsjC,AAAA,AAAAjD,AAAAE;AAAAgD,AAAA,AAAAp9B,AAAAm9B;AAAAnF,AAAA,AAAAqF,AAAArF;AAAA,AAAA,AAAAqF,AAAA,AAAArB;;AAAAqB;;AAAA,AAAA,AAAAplC,AAAA+/B,AAAA,AAAAoF;;AAAA,AAAA,AAAAnF,AAAA;AAAA,AAAAW,AAAA,AAAAZ,AAAA;AAAA+D,AAAA,AAAA/D,AAAA;AAAAsF,AAAA,AAAA1E,AAgBYt8B;AAhBZihC,AAAA,AAiBYjhC,AAA0Bgc;AAjBtCklB,AAAA,AAAAF,AAAAC,AAgBSl+B;AAhBT24B,AAAA,AAAAyF,AAAAzF;AAAA,AAAA,AAAAyF,AAAA,AAAA1B;;AAAA0B;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA1F;AAAA,AAAA,AAAA0F,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA3F;AAAA,AAAA,AAAA2F,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA1F,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAA4F,AAAA,AAAA1F;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAA6F,AAAA7F;AAAA,AAAA,AAAA6F,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA1kC;;AAAA,AAAA0kC,AAAA,AAAA;;AAAAA;;AAAA9F;;AAAA,AAAA,AAAA3+B,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA2gC;AAAA,AAAA,AAAA,AAAAz+B,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAukC;AAAA,AAAA,AAAAC,AAAAhG;AAAA,AAAA,AAAAgG,AAAA,AAAAxkC;;AAAAwkC;AAAA,AAAA,AAAArkC,AAAA,AAAAq+B,AAAA;AAAA,AAAAiG,AAAAjG;AAAA,AAAA,AAAAiG,AAAA,AAAA,AAAApkC,AAAA,AAAAm+B,AAAA;;AAAAiG;AAAA,AAAAzkC;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA2+B;;;;AAAA3+B;;;;;AAAA2+B;;;;;AAAAA;;;;;;;;;AAAAl+B,AAAA,AAAAokC,AAAA,AAAA9mC;AAAA,AAAA,AAAA8mC,AAAAlkC,AAAA,AAAA/C;;AAAAinC;;AAAA,AAAA,AAAAjkC,AAAAH;;;AAAA7C;;AA2BF,AAAA,AAAMonC,AACHC,AAAez4B;AADlB,AAEE,AAAMF,AAAgB,AAAA,AAAM24B;AACtBhmB,AAAW,AAAA,AAAQgmB;AACnBC,AAAQ,AAAA,AAASD;AACjBE,AAAG,AAACh2B,AAAuBi2B,AAA4B94B;AACvD+4B,AAAO,AAACl2B,AAAuBm2B,AAA0Bh5B;AACzDi5B,AAAe,AAACp2B,AAAuB0hB,AAAqBvkB;AAC5Dk5B,AAAe,AAAC,AAAA,AAAAL,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAmB34B,AAAAA;AACnCjQ,AAAE,AAAA,AAAM,AAAIipC;AACZjpC,AAAE,AAAA,AAAM,AAAIipC;AACZC,AAAc,AAAC,AAAA,AAAAN,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAkB34B,AAAAA;AACjCjQ,AAAE,AAAA,AAAM,AAAIkpC;AACZlpC,AAAE,AAAA,AAAM,AAAIkpC;AACZC,AAAe,AAAC,AAAA,AAAAL,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAsB74B,AAAAA;AACtCjQ,AAAE,AAAA,AAAM,AAAImpC;AACZnpC,AAAE,AAAA,AAAM,AAAImpC;AAdlB,AAeE,AAAA9nC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA2nC;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAM,AAAAN;AAAA,AAAA,AAAAM,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAM,AAAA,AAAAP,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAP,AAAA;AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAiC,AAACrgC,AAAEk/B,AAAQ,AAAAmB;;;AAA5CC,AAAA,AACwCtrC,AAAiByqC;AADzDc,AAAA,AAAA5/B,AAAA2/B;AAAAX,AAAA,AAAAa,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAAJ;;AAAAI;;AAAA,AAAA,AAAA5nC,AAAA+mC,AAAA,AAAAY;;AAAA,AAAA,AAAAX,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAe,AAAA,AAAAC,AAciCnmC;AAdjComC,AAAA,AAAAF,AAAA,AAeiCp3B;AAfjCu3B,AAAA,AAAAJ,AAgBmClB;AAhBnCuB,AAAA,AAAAngC,AAAAkgC;AAAAlB,AAAA,AAAAoB,AAAApB;AAAA,AAAA,AAAAoB,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAnoC,AAAA+mC,AAAA,AAAAmB;;AAAA,AAAA,AAAAlB,AAAA;AAAA,AAAAoB,AAAA,AAAArB,AAAA;AAAAsB,AAAA,AAAAtB,AAAA;AAAAuB,AAAA,AAAAvB,AAAA;AAAAwB,AAAA,AAAAxB,AAAA;AAAAyB,AAAA,AAAAzB,AAAA;AAAA0B,AAAA,AAAA1B,AAAA;AAAA2B,AAAA,AAAA3B,AAAA;AAAA4B,AAAA,AAAA5B,AAAA;AAAA6B,AAAA,AAAA7B,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAA8B,AAAA,AAAA9B,AAAA;AAAA+B,AAAA,AAAA/B,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAAlC,AAAA;AAAAmC,AAAA,AAAAnC,AAAA;AAAAoC,AAAA,AAAApC,AAAA;AAAAqC,AAAA,AAAArC,AAAA;AAAAsC,AAAA,AAAAtC,AAAA;AAAAuC,AAAA,AAAAvC,AAAA;AAAAwC,AAAA,AAAAD,AA4EmCnX;AA5EnCqX,AAAA,AAAA,AAAAD,AA4EoB9kC;AA5EpBglC,AAAA,AAAApB,AAiBiBkM;AAjBjBlL,AAmBiBxZ;AAnBjBkZ,AA4DiBgM;AA5DjB7L,AAqBiBwL;AArBjB7M,AAYiBqM;AAZjB/K,AAWiB6K;AAXjB1L,AAiEiB2M;AAjEjBjN,AAeiBqM;AAfjBvM,AAciBsM;AAdjB7L,AAuDiBsM;AAvDjB/L,AAAU+K;AAAV5K,AAoBiBwL;AApBjB7L,AAmEiBuM;AAnEjB3L,AAsBiB7rC;AAtBjB6qC,AAgBiB8L;AAhBjB7L,AAwBiBmM;AAxBjBjM,AAEUmL;AAFVjL,AAkBiB2L;AAlBjB,AAaiBL;AAbjBzL,AA8DiBsM;AA9DjB1L,AAuEiB+L;AAvEjBjN,AAoEiBgN;AApEjBpM,AAuBiB2L;AAvBjBvL,AAMc2K;AANd,AAAA,AAAArK;AAAA,AAmFmD,AAACtiC,AAAE,AAAA,AAAAsiC,AAAS0L;;;AAnF/DzL,AAAA,AAAAL,AAAAf,AAoFmDhkC;AApFnDqlC,AAAA,AAAAH,AAAAE,AAmF2CpmC;AAnF3CsmC,AAAA,AAAA,AAAAD,AAkFsCxnC;AAlFtC0nC,AAAA,AAAAD,AAkFiCzlC;AAlFjC2lC,AAAA,AAAA1B,AAiBiBkM;AAjBjBlL,AAmBiBxZ;AAnBjBkZ,AA4DiBgM;AA5DjB7L,AAqBiBwL;AArBjB7M,AAYiBqM;AAZjB/K,AAWiB6K;AAXjB1L,AAiEiB2M;AAjEjBjN,AAeiBqM;AAfjBvM,AAciBsM;AAdjB7L,AAuDiBsM;AAvDjB/L,AAAU+K;AAAV5K,AAoBiBwL;AApBjB7L,AAmEiBuM;AAnEjB3L,AAsBiB7rC;AAtBjB6qC,AAgBiB8L;AAhBjB7L,AAwBiBmM;AAxBjBjM,AAEUmL;AAFVjL,AAkBiB2L;AAlBjB1K,AAkFiByL;AAlFjB,AAaiBpB;AAbjBzL,AA8DiBsM;AA9DjB1L,AAuEiB+L;AAvEjBjN,AAoEiBgN;AApEjBpM,AAuBiB2L;AAvBjBvL,AAMc2K;AANd,AAAA,AAAA/J;AAAA,AAsF+C,AAACkL,AAAUK,AAAe,AAAA,AAAAvL;;;AAtFzEC,AAAA,AAAAF,AAAAtB,AAsFuCllC;AAtFvC2mC,AAAA,AAAA,AAAAD,AAwFoBxlC;AAxFpB0lC,AAAA,AAAAF,AAyF+B7S,AAAKjD;AAzFpCiW,AAAA,AAAA/B,AA2FsBhkC;AA3FtBgmC,AAAA,AA4FsBhmC,AAA0Bgc;AA5FhDiqB,AAAA,AAAAF,AAAAC,AA2FmBjjC;AA3FnB2/B,AAAA,AAAAwD,AAAAxD;AAAA,AAAA,AAAAwD,AAAA,AAAAL;;AAAA,AAAAK,AAAA,AAAAJ;;AAAAI;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAzD;AAAA,AAAA,AAAAyD,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA1D;AAAA,AAAA,AAAA0D,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAzD,AAAA;AAAA,AAAA0D,AAAA,AAAA3D,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA4D,AAAA5D;AAAA,AAAA,AAAA4D,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3D,AAAA;AAAA,AAAA4D,AAAA,AAAA7D,AAAA;AAAA8D,AAAA,AAAAD;AAAA7D,AAAAA;AAAA,AAAA,AAAA,AAAA+D,AAAA/D;AAAA,AAAA,AAAA+D,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA9D,AAAA;AAAA,AAAA+D,AAAA,AAAAhE,AAAA;AAAAgE,AAAA,AAAAhE,AAAA;AAAAiE,AAAA,AAAAD,AAAAhkC;AAAAkkC,AAAA,AAAAhkC,AAAA8jC;AAAAG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA/jC,AAAA8jC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAApE,AAAA,AAAAsE,AAAAtE;AAAA,AAAA,AAAAsE,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAvE;AAAA,AAAA,AAAAuE,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAxE;AAAA,AAAA,AAAAwE,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAvE,AAAA;AAAA,AAAAiC,AAAA,AAAAlC,AAAA;AAAAyE,AAAA,AAqBoC76B,AAAuBjD;AArB3Dq5B,AAAA,AAAA0E,AAAA1E;AAAA,AAAA,AAAA0E,AAAA,AAAAxC;;AAAAwC;;AAAA,AAAA,AAAAzrC,AAAA+mC,AAAA,AAAAyE;;AAAA,AAAA,AAAAxE,AAAA;AAAA,AAAAkC,AAAA,AAAAnC,AAAA;AAAAmC,AAAA,AAAAnC,AAAA;AAAA2E,AAAA,AAAA,AAAAxC,AAsBoBzkC;AAtBpBukC,AAAA,AAAArlC,AAAA;AAAAgoC,AAAA,AAAAzC,AAwBuC/R,AACA/6B,AAAuBsR,AAAgBE;AAzB9Em5B,AAAA,AAAA6E,AAAA7E;AAAA,AAAA,AAAA6E,AAAA,AAAA5C;;AAAA,AAAA4C,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA1C;;AAAA0C;;AAAA,AAAA,AAAA5rC,AAAA+mC,AAAA,AAAA4E;;AAAA,AAAA,AAAA3E,AAAA;AAAA,AAAAmD,AAAA,AAAApD,AAAA;AAAA8B,AAAA,AAAA9B,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAAlC,AAAA;AAAAmC,AAAA,AAAAnC,AAAA;AAAAsC,AAAA,AAAAtC,AAAA;AAAA8E,AAAA,AAAA5C,AAAAJ,AAAAb,AAAAqB,AA6FyB3Z;AA7FzBoc,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAA/C,AAAAE,AAAAiB;AAAA6B,AAAA,AAAAza,AAAAua,AAAAC;AAAAE,AAAA,AAAAJ,AAAAG,AA6FmB3U;AA7FnB0P,AAAAA;AAAA,AAAA,AAAA,AAAAmF,AAAAnF;AAAA,AAAA,AAAAmF,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAlF,AAAA;AAAA,AAAAyB,AAAA,AAAA1B,AAAA;AAAA0B,AAAA,AAAA1B,AAAA;AAAAoF,AAAA,AAAA,AAAA1D,AA2BoBhkC;AA3BpB2nC,AAAA,AAuD2C0I,AACA14C,AACAsR,AACAE;AA1D3Cm5B,AAAA,AAAAsF,AAAAtF;AAAA,AAAA,AAAAsF,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA5D;;AAAA4D;;AAAA,AAAA,AAAArsC,AAAA+mC,AAAA,AAAAqF;;AAAA,AAAA,AAAApF,AAAA;AAAA,AAAAsF,AAAA,AAAAvF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAwF,AAAAxF;AAAA,AAAA,AAAAwF,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAvF,AAAA;AAAA,AAAA+D,AAAA,AAAAhE,AAAA;AAAAyF,AAAA,AAAAzB;AAAAhE,AAAAA;AAAA,AAAA,AAAA,AAAA0F,AAAA1F;AAAA,AAAA,AAAA0F,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAzF,AAAA;AAAA,AAAA4B,AAAA,AAAA7B,AAAA;AAAA2F,AAAA,AAAA9D,AAqEwBhnC;AArExBmlC,AAAAA;AAAA,AAAA,AAAA,AAAA4F,AAAA5F;AAAA,AAAA,AAAA4F,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3F,AAAA;AAAA,AAAAqB,AAAA,AAAAtB,AAAA;AAAAoD,AAAA,AAAApD,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAA8B,AAAA,AAAA9B,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAAlC,AAAA;AAAAmC,AAAA,AAAAnC,AAAA;AAAAsC,AAAA,AAAAtC,AAAA;AAAA6F,AAAA,AAAA/E;AAAAgF,AAAA,AAAA,AAAAxE,AAAA,AAAAuE,AAiGqB5wC,AACe0R,AAAgB2S;AAlGpDysB,AAAA,AAAAnpC,AAAA;AAAAopC,AAAA,AAAA9D,AAAAJ,AAAAiE,AAAAzD,AAmG2B3Z;AAnG3Bsd,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAjE,AAAAE,AAAAiB;AAAA+C,AAAA,AAAA3b,AAAAyb,AAAAC;AAAAE,AAAA,AAAAJ,AAAAG,AAmGqB7V;AAnGrB0P,AAAA,AAAAqG,AAAArG;AAAA,AAAA,AAAAqG,AAAA,AAAAP;;AAAAO;;AAAA,AAAA,AAAA,AAAAC,AAAAtG;AAAA,AAAA,AAAAsG,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAArG,AAAA;AAAA,AAAA6B,AAAA,AAAA9B,AAAA;AAAAuG,AAAA,AAmBiC9lB,AAAiBnH;AAnBlD0mB,AAAA,AAAAwG,AAAAxG;AAAA,AAAA,AAAAwG,AAAA,AAAA1E;;AAAA0E;;AAAA,AAAA,AAAAvtC,AAAA+mC,AAAA,AAAAuG;;AAAA,AAAA,AAAAtG,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAyG,AAAA,AAAAvG,AAAAlgC;AAAA0mC,AAAA,AAAAxmC,AAAAggC;AAAAyG,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAvmC,AAAAsmC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA5G,AAAA,AAAA8G,AAAA9G;AAAA,AAAA,AAAA8G,AAAA,AAAA5G;;AAAA4G;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA/G;AAAA,AAAA,AAAA+G,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAhH;AAAA,AAAA,AAAAgH,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA/G,AAAA;AAAA,AAAAwB,AAAA,AAAAzB,AAAA;AAAAyB,AAAA,AAAAzB,AAAA;AAAAsB,AAAA,AAAAG,AAiB0C5mC;AAjB1CosC,AAAA,AAkBiCjrB,AAAgB1C;AAlBjD0mB,AAAA,AAAAkH,AAAAlH;AAAA,AAAA,AAAAkH,AAAA,AAAA5F;;AAAA,AAAA4F,AAAA,AAAAzF;;AAAAyF;;AAAA,AAAA,AAAAjuC,AAAA+mC,AAAA,AAAAiH;;AAAA,AAAA,AAAAhH,AAAA;AAAA,AAAAM,AAAA,AAAAP,AAAA;AAAAO,AAAA,AAAAP,AAAA;AAAAmH,AAAA,AAAA5G,AAAAvgC;AAAAonC,AAAA,AAAAlnC,AAAAqgC;AAAA8G,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAjnC,AAAAgnC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAtH,AAAA,AAAAwH,AAAAxH;AAAA,AAAA,AAAAwH,AAAA,AAAAjH;;AAAAiH;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAzH;AAAA,AAAA,AAAAyH,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA1H;AAAA,AAAA,AAAA0H,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAzH,AAAA;AAAA,AAAAuB,AAAA,AAAAxB,AAAA;AAAA2H,AAAA,AA4DsCvX,AACA/6B,AAASikB,AAAWzS,AAAaF;AA7DvEq5B,AAAA,AAAA4H,AAAA5H;AAAA,AAAA,AAAA4H,AAAA,AAAApG;;AAAAoG;;AAAA,AAAA,AAAA3uC,AAAA+mC,AAAA,AAAA2H;;AAAA,AAAA,AAAA1H,AAAA;AAAA,AAAA4H,AAAA,AAAA7H,AAAA;AAAAqC,AAAA,AAAArC,AAAA;AAAA8H,AAAA,AAAA9H,AAAA;AAAA+H,AAAA,AAAAF,AAAAC,AAM8BtrC;AAN9B6lC,AAAA,AAAA0F,AAMuBltC;AANvBmtC,AAAA,AAAA3F,AAAA;AAAArC,AAAA,AAAAiI,AAAAjI;AAAA,AAAA,AAAAiI,AAAA,AAAA5F;;AAAA4F;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAlI;AAAA,AAAA,AAAAkI,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAnI;AAAA,AAAA,AAAAmI,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAlI,AAAA;AAAA,AAAA0D,AAAA,AAAA3D,AAAA;AAAAoI,AAAA,AAAAzE;AAAA3D,AAAAA;AAAA,AAAA,AAAA,AAAAqI,AAAArI;AAAA,AAAA,AAAAqI,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApI,AAAA;AAAA,AAAAqI,AAAA,AAAAtI,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA9lC,AAAA8lC,AAAAsI;;AAAA,AAAA,AAAArI,AAAA;AAAA,AAAA0D,AAAA,AAAA3D,AAAA;AAAA2D,AAAA,AAAA3D,AAAA;AAAAuI,AAAA,AAAA5E,AAAA3jC;AAAAwoC,AAAA,AAAAtoC,AAAAyjC;AAAA8E,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAroC,AAAAooC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAA1I,AAAA,AAAA4I,AAAA5I;AAAA,AAAA,AAAA4I,AAAA,AAAAjF;;AAAAiF;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA7I;AAAA,AAAA,AAAA6I,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA9I;AAAA,AAAA,AAAA8I,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA7I,AAAA;AAAA,AAAA+D,AAAA,AAAAhE,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA+I,AAAA/I;AAAA,AAAA,AAAA+I,AAAA,AAAA/E;;AAAA,AAAA+E,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA9I,AAAA;AAAA,AAAAqB,AAAA,AAAAtB,AAAA;AAAAuB,AAAA,AAAAvB,AAAA;AAAAwB,AAAA,AAAAxB,AAAA;AAAAyB,AAAA,AAAAzB,AAAA;AAAAoF,AAAA,AAAApF,AAAA;AAAA0B,AAAA,AAAA1B,AAAA;AAAA2B,AAAA,AAAA3B,AAAA;AAAA4B,AAAA,AAAA5B,AAAA;AAAA6B,AAAA,AAAA7B,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAA8B,AAAA,AAAA9B,AAAA;AAAA+B,AAAA,AAAA/B,AAAA;AAAAiB,AAAA,AAAAjB,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAAlC,AAAA;AAAAmC,AAAA,AAAAnC,AAAA;AAAAoC,AAAA,AAAApC,AAAA;AAAAqC,AAAA,AAAArC,AAAA;AAAAsC,AAAA,AAAAtC,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAAgJ,AAAA,AAAA,AAAAhH,AA8D2C3mC;AA9D3CsmC,AAAA,AAAAqH,AA8DsC3rC;AA9DtC4rC,AAAA,AAAA3H,AAiBiBkM;AAjBjBlL,AAmBiBxZ;AAnBjBkZ,AA4DiBgM;AA5DjB7L,AAqBiBwL;AArBjB7M,AAYiBqM;AAZjB/K,AAWiB6K;AAXjBhM,AAeiBqM;AAfjBvM,AAciBsM;AAdjB7L,AAuDiBsM;AAvDjB/L,AAAU+K;AAAV5K,AAoBiBwL;AApBjBtI,AAsBiBxuC;AAtBjB6qC,AAgBiB8L;AAhBjB7L,AAwBiBmM;AAxBjBjM,AAEUmL;AAFVjL,AAkBiB2L;AAlBjB,AAaiBL;AAbjBzL,AA8DiBsM;AA9DjBhM,AAuBiB2L;AAvBjBvL,AAMc2K;AANd,AAAA,AAAA9D;AAAA,AAiEsC,AAACiF,AAAUF,AAAoB,AAAA,AAAA/E;;;AAjErE3H,AAAA,AAAA0H,AAAAzH,AAiE8BhlC;AAjE9B2sC,AAAA,AAAA,AAAA5H,AAmE4BlmC;AAnE5BwmC,AAAA,AAAAsH,AAmEuB9rC;AAnEvB+rC,AAAA,AAAAvH,AAoEgC9iC;AApEhCsqC,AAAA,AAAAD,AAAA,AAoE0BrsC;AApE1BijC,AAAA,AAAAsJ,AAAAtJ;AAAA,AAAA,AAAAsJ,AAAA,AAAA/H;;AAAA,AAAA+H,AAAA,AAAA3H;;AAAA,AAAA2H,AAAA,AAAAzH;;AAAA,AAAAyH,AAAA,AAAAtH;;AAAAsH;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAvJ;AAAA,AAAA,AAAAuJ,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAxJ;AAAA,AAAA,AAAAwJ,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAvJ,AAAA;AAAA,AAAAa,AAAA,AAAAd,AAAA;AAAAoC,AAAA,AAAApC,AAAA;AAAAqC,AAAA,AAAArC,AAAA;AAAAoC,AAAA,AAAAC,AAW+B6K;AAX/BzD,AAAA,AAAArH;AAAAsH,AAAA,AAAAD,AAAA,AAY8B9/B;AAZ9Bm3B,AAAA,AAAA4I;AAAAC,AAAA,AAAA7I,AAc+ClB,AAAiC/4B;AAdhF+iC,AAAA,AAAA5oC,AAAA2oC;AAAA3J,AAAA,AAAA6J,AAAA7J;AAAA,AAAA,AAAA6J,AAAA,AAAA/I;;AAAA,AAAA+I,AAAA,AAAAzH;;AAAAyH;;AAAA,AAAA,AAAA5wC,AAAA+mC,AAAA,AAAA4J;;AAAA,AAAA,AAAA3J,AAAA;AAAA,AAAA2B,AAAA,AAAA5B,AAAA;AAAA+B,AAAA,AAAA/B,AAAA;AAAA6H,AAAA,AAAA9F,AAAU+K;AAAVlL,AAEUmL;AAFV,AAAA,AAAAjD;AAAA,AAMsC,AAACzpC,AAAEk/B,AAAQ,AAAAuK;;;AANjDC,AAAA,AAO6C10C,AAAiBwqC;AAP9DmK,AAAA,AAAAhpC,AAAA+oC;AAAA/J,AAAA,AAAAiK,AAAAjK;AAAA,AAAA,AAAAiK,AAAA,AAAApC;;AAAAoC;;AAAA,AAAA,AAAAhxC,AAAA+mC,AAAA,AAAAgK;;AAAA,AAAA,AAAA/J,AAAA;AAAA,AAAAiK,AAAA,AAAAlK,AAAA;AAAA4B,AAAA,AAAA5B,AAAA;AAAA+B,AAAA,AAAA/B,AAAA;AAAAmK,AAAA,AAAAnK,AAAA;AAAAoK,AAAA,AAAAF,AAAAC,AAE0B3tC;AAF1BolC,AAAA,AAAAwI,AAEmBvvC;AAFnBwvC,AAAA,AAAAtI,AAAA;AAAAuI,AAAA,AAAA1I,AAAA;AAAA2I,AAAA,AAAAF,AAAAC;AAAAE,AAAA,AAAAD,AAIWvtC;AAJXgjC,AAAA,AAAAyK,AAAAzK;AAAA,AAAA,AAAAyK,AAAA,AAAA7I;;AAAA6I;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA1K;AAAA,AAAA,AAAA0K,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAA3K;AAAA,AAAA,AAAA2K,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAA1K,AAAA;AAAA,AAAA8B,AAAA,AAAA/B,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAA4K,AAAA,AAAA5K,AAAA;AAAA6K,AAAA,AAAApK,AAAAmK,AAAyBpuC;AAAzBulC,AAAA,AAAA8I,AAAkBhwC;AAAlBqvC,AAAA,AAAAnI,AAAU+K;AAAV,AAAA,AAAAhC;AAAA,AAEkC,AAACzqC,AAAEk/B,AAAQ,AAAAuL;;;AAF7CC,AAAA,AAGwC11C,AAAiB0qC;AAHzDiL,AAAA,AAAAhqC,AAAA+pC;AAAA/K,AAAA,AAAAiL,AAAAjL;AAAA,AAAA,AAAAiL,AAAA,AAAAf;;AAAA,AAAAe,AAAA,AAAAlJ;;AAAAkJ;;AAAA,AAAA,AAAAhyC,AAAA+mC,AAAA,AAAAgL;;AAAA,AAAA,AAAA/K,AAAA;AAAA,AAAA4D,AAAA,AAAA7D,AAAA;AAAA6D,AAAA,AAAA7D,AAAA;AAAAkL,AAAA,AAAArH,AAAA7jC;AAAAmrC,AAAA,AAAAjrC,AAAA2jC;AAAAuH,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAhrC,AAAA+qC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAArL,AAAA,AAAAuL,AAAAvL;AAAA,AAAA,AAAAuL,AAAA,AAAA1H;;AAAA0H;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAxL;AAAA,AAAA,AAAAwL,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAzL;AAAA,AAAA,AAAAyL,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAxL,AAAA;AAAA,AAAAM,AAAA,AAAAP,AAAA;AAAA0L,AAAA,AAAAnL;AAAAP,AAAAA;AAAA,AAAA,AAAA,AAAA2L,AAAA3L;AAAA,AAAA,AAAA2L,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA1L,AAAA;AAAA,AAAA4D,AAAA,AAAA7D,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA4L,AAAA5L;AAAA,AAAA,AAAA4L,AAAA,AAAA/H;;AAAA,AAAA+H,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA3L,AAAA;AAAA,AAAAoB,AAAA,AAAArB,AAAA;AAAA6L,AAAA,AAuE8C0C,AACAl5C,AACAsR,AACAE;AA1E9Cm5B,AAAA,AAAA8L,AAAA9L;AAAA,AAAA,AAAA8L,AAAA,AAAAzK;;AAAAyK;;AAAA,AAAA,AAAA7yC,AAAA+mC,AAAA,AAAA6L;;AAAA,AAAA,AAAA5L,AAAA;AAAA,AAAAqC,AAAA,AAAAtC,AAAA;AAAA+L,AAAA,AAoB0CpoB,AAAqBrK;AApB/D0mB,AAAA,AAAAgM,AAAAhM;AAAA,AAAA,AAAAgM,AAAA,AAAA1J;;AAAA0J;;AAAA,AAAA,AAAA/yC,AAAA+mC,AAAA,AAAA+L;;AAAA,AAAA,AAAA9L,AAAA;AAAA,AAAAgM,AAAA,AAKaja,AAAwB1Y,AAAW3S,AAAgBE;AALhEm5B,AAAAA;AAAA,AAAA,AAAA/mC,AAAA+mC,AAAA,AAAAiM;;AAAA,AAAA,AAAAhM,AAAA;AAAA,AAAAiM,AAAA,AAAA,AASaj3C;AATb+qC,AAAAA;AAAA,AAAA,AAAA,AAAAmM,AAAAnM;AAAA,AAAA,AAAAmM,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAlM,AAAA;AAAA,AAAAmM,AAAA,AAAApM,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAqM,AAAArM;AAAA,AAAA,AAAAqM,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAApM,AAAA;AAAA,AAAA4B,AAAA,AAAA7B,AAAA;AAAAsM,AAAA,AAAAzK,AAsEwBhnC;AAtExBmlC,AAAAA;AAAA,AAAA,AAAA,AAAAuM,AAAAvM;AAAA,AAAA,AAAAuM,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAtM,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAwM,AAAAxM;AAAA,AAAA,AAAAwM,AAAA,AAAAtM;;AAAA,AAAAsM,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAryC;;AAAA,AAAAqyC,AAAA,AAAA;;AAAAA;;AAAAzM;;AAAA,AAAA,AAAA3lC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA2nC;AAAA,AAAA,AAAA,AAAAzlC,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAkyC;AAAA,AAAA,AAAAC,AAAA3M;AAAA,AAAA,AAAA2M,AAAA,AAAAnyC;;AAAAmyC;AAAA,AAAA,AAAAhyC,AAAA,AAAAqlC,AAAA;AAAA,AAAA4M,AAAA5M;AAAA,AAAA,AAAA4M,AAAA,AAAA,AAAA/xC,AAAA,AAAAmlC,AAAA;;AAAA4M;AAAA,AAAApyC;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA2lC;;;;AAAA3lC;;;;;AAAA2lC;;;;;AAAAA;;;;;;;;;AAAAllC,AAAA,AAAA+xC,AAAA,AAAAz0C;AAAA,AAAA,AAAAy0C,AAAA7xC,AAAA,AAAA/C;;AAAA40C;;AAAA,AAAA,AAAA5xC,AAAAH;;;AAAA7C;;AA6GJ,AAAA,AAAMw2C,AACHnP,AAAez4B;AADlB,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAq2C;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAD;AAAAF,AAAAA;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAA,AAC2B1P;AAD3ByP,AAAA,AAAA,AAE8BzP;AAF9B2P,AAAA,AAAAF,AAG0Bz3B;AAH1Bo3B,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAAT;AAAA,AAAA,AAAAS,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAU,AAAA,AAAAV,AAAA;AAAAW,AAAA,AAAA,AAAAL,AAAAD,AAM8B95C;AAN9By5C,AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA,AAAAC,AAAAb;AAAA,AAAA,AAAAa,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAc,AAAA,AAAAR,AAAAD,AAWiCve,AAA8D3pB;AAX/F6nC,AAAAA;AAAA,AAAA,AAAAz1C,AAAAy1C,AAAA,AAAAc;;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAe,AAAA,AAAAT,AAAAD,AAU2BhW,AAA8DlyB;AAVzF6nC,AAAAA;AAAA,AAAA,AAAAz1C,AAAAy1C,AAAA,AAAAe;;AAAA,AAAA,AAAAd,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAgB,AAAA,AAAAd,AAAA5uC;AAAA2vC,AAAA,AAAAzvC,AAAA0uC;AAAAgB,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAxvC,AAAAuvC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG;AAAAnB,AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAAnB;;AAAAmB;;AAAA,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAAtB;AAAA,AAAA,AAAAsB,AAAA,AAAA;;AAAAA;AAAA,AAAAC,AAAAvB;AAAA,AAAA,AAAAuB,AAAA,AAAA;;AAAAA;;AAAA;;AAAA,AAAA,AAAAtB,AAAA;AAAA,AAAAuB,AAAA,AAYW7Q,AAA8BC,AAAez4B;AAZxD6nC,AAAAA;AAAA,AAAA,AAAAz1C,AAAAy1C,AAAA,AAAAwB;;AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAAwB,AAAA,AAAAzB,AAAA;AAAA0B,AAAA,AAAA,AAAAD,AAOWzyC;AAPXgxC,AAAA,AAAA2B,AAAA3B;AAAA,AAAA,AAAA2B,AAAA,AAAAD;;AAAAC;;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAG;AAAA;AAAA,AAAAC,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAA;;AAAAA;;AAAA;AAAA,AAAAC,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA;;AAAAA;;AAAA;AAAA,AAAAC,AAAA/B;AAAA,AAAA,AAAA+B,AAAA,AAAA;;AAAAA;;;AAAA,AAAA,AAAAC,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAA;;AAAAA;AAAA;;;AAAA;;AAAA,AAAA,AAAA/B,AAAA;AAAA,AAAAgC,AAAA,AAAAjC,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAkC,AAAAlC;AAAA,AAAA,AAAAkC,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAAM,AAAA,AAAAP,AAAA;AAAA93C,AAAA,AAAAi6C,AAAAnC;AAAA,AAAA,AAAAmC,AAAA,AAAA,AAAAjwC,AAAA,AAAA,AAAA8tC,AAAA;;AAAAmC;;AAAAC,AAAA,AAAA7B;AAAA8B,AAAA,AAAA/vC,AAAA8vC;AAAApC,AAAAA;AAAA,AAAA,AAAAz1C,AAAAy1C,AAAA,AAAAqC;;AAAA,AAAA,AAAApC,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAsC,AAAA,AAAAhC,AAAAD,AASmBra,AAAsD7tB;AATzE6nC,AAAAA;AAAA,AAAA,AAAAz1C,AAAAy1C,AAAA,AAAAsC;;AAAA,AAAA,AAAArC,AAAA;AAAA,AAAAsC,AAAA,AAAAvC,AAAA;AAAA93C,AAAA,AAAAs6C,AAAAxC;AAAA,AAAA,AAAAwC,AAAA,AAAA,AAAA5vC,AAAA,AAAAotC,AAAA;;AAAAwC;;AAAAxC,AAAAA;AAAA,AAAA,AAAA,AAAAyC,AAAAzC;AAAA,AAAA,AAAAyC,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAxC,AAAA;AAAA,AAAA/3C,AAAA,AAAAw6C,AAAA1C;AAAA,AAAA,AAAA0C,AAAA,AAAA,AAAA9vC,AAAA,AAAAotC,AAAA;;AAAA0C;;AAAA1C,AAAAA;AAAA,AAAA,AAAA2C,AAAA,AAAA3C,AAAA;AAAA,AAAA,AAAA4C,AAAA5C;AAAA,AAAA,AAAA4C,AAAA,AAAAD;;AAAAC;AAAA,AAAA,AAAAD,AAKkCj1C;AALlC,AAAAm1C,AAAA7C;AAAA,AAAA,AAAA6C,AAAA,AAAA;;AAAA,AAAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAF;;;;AAAA;;AAAA,AAAA,AAAA1C,AAAA;AAAA,AAAA6C,AAAA,AAAA9C,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAA+C,AAAA/C;AAAA,AAAA,AAAA+C,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAA9C,AAAA;AAAA,AAAA+C,AAAA,AAAAhD,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAiD,AAAAjD;AAAA,AAAA,AAAAiD,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAhD,AAAA;AAAA,AAAAiD,AAAA,AAAAlD,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAAx0C,AAAAw0C,AAAAkD;;AAAA,AAAA,AAAAjD,AAAA;AAAA,AAAAkD,AAAA,AAAAnD,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAoD,AAAApD;AAAA,AAAA,AAAAoD,AAAA,AAAAD;;AAAA,AAAAC,AAAA,AAAA;;AAAAA;AAAA;;AAAA,AAAA,AAAAnD,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA,AAAAqD,AAAArD;AAAA,AAAA,AAAAqD,AAAA,AAAAnD;;AAAA,AAAAmD,AAAA,AAAA;;AAAAA;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA53C;;AAAA,AAAA43C,AAAA,AAAA;;AAAAA;;AAAAtD;;AAAA,AAAA,AAAAr0C,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAq2C;AAAA,AAAA,AAAA,AAAAn0C,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAy3C;AAAA,AAAA,AAAAC,AAAAxD;AAAA,AAAA,AAAAwD,AAAA,AAAA13C;;AAAA03C;AAAA,AAAA,AAAAv3C,AAAA,AAAA+zC,AAAA;AAAA,AAAAyD,AAAAzD;AAAA,AAAA,AAAAyD,AAAA,AAAA,AAAAt3C,AAAA,AAAA6zC,AAAA;;AAAAyD;AAAA,AAAA33C;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAq0C;;;;AAAAr0C;;;;;AAAAq0C;;;;;AAAAA;;;;;;;;;AAAA5zC,AAAA,AAAAs3C,AAAA,AAAAh6C;AAAA,AAAA,AAAAg6C,AAAAp3C,AAAA,AAAA/C;;AAAAm6C;;AAAA,AAAA,AAAAn3C,AAAAH;;;AAAA7C;;AAgBF,AAAA,AAAMo6C,AACHC,AAAIr2C,AAAMs2C;AADb,AAAA,AAAA,AAAA,AAAA,AAEQD,AACGC,AACDt2C;;AAEV,AAAA,AAAMu2C,AACHC,AAAa9rC,AAAgBzL;AADhC,AAEE,AAAMqB,AAAG,AAACnF,AAAI,AAAA,AAAM8D,AAAeu3C;AAC7BC,AAAI,AAAA,AAAAC,AAACn2C;AAAD,AAAS,AAAC6D,AAAE,AAAA,AAAAsyC,AAAQhsC;AACZ,AAAA,AAAUpK;AAF5B,AAGEm2C;;AAEJ;;;;;;;AAAA,AAAME,AAMHH,AAAa9rC,AAAgBzL;AANhC,AAOE,AAAMS,AAAG,AAACd,AAAM,AAAC23C,AAAYC,AAAa9rC,AAAgBzL;AACpD23C,AAAK,AAACR,AAAS1rC,AAAgB8rC,AAAa,AAAA,AAAS92C;AAD3D,AAEE,AAAA1D,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAy6C;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAkD93C;AAAlD+3C,AAAA,AAAAD,AAASvE,AAAqBoE;AAA9BC,AAAAA;AAAA,AAAA,AAAA75C,AAAA65C,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAG,AAAA,AAAAJ,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAA54C,AAAA44C,AAAAI;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA/4C;;AAAA,AAAA+4C,AAAA,AAAA;;AAAAA;;AAAAL;;AAAA,AAAA,AAAAz4C,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAy6C;AAAA,AAAA,AAAA,AAAAv4C,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA44C;AAAA,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAAO,AAAA,AAAA74C;;AAAA64C;AAAA,AAAA,AAAA14C,AAAA,AAAAm4C,AAAA;AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAA,AAAAz4C,AAAA,AAAAi4C,AAAA;;AAAAQ;AAAA,AAAA94C;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAy4C;;;;AAAAz4C;;;;;AAAAy4C;;;;;AAAAA;;;;;;;;;AAAAh4C,AAAA,AAAAy4C,AAAA,AAAAn7C;AAAA,AAAA,AAAAm7C,AAAAv4C,AAAA,AAAA/C;;AAAAs7C;;AAAA,AAAA,AAAAt4C,AAAAH;;;AAAA7C;;AAGJ,AAAA,AAEA,AAAA,AAAMu7C,AACH3sC;AADH,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAo7C;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAyBgB,AAA4B9tC;AAArD4sC,AAAAA;AAAA,AAAA,AAAAx6C,AAAAw6C,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA,AAAA,AACyB/0C;AADzBg1C,AAAA,AAAAF,AAAAA,AAEyBgB,AAAAA,AAAAA;AAFzBb,AAAA,AAAAF,AAAAC,AACoBz4C;AADpB24C,AAAA,AAAAD,AAGyBc,AAAmBhuC;AAH5C4sC,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAh7C,AAAAw6C,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAU,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAR,AAAAM,AAIqBrtC;AAJrBwtC,AAAA,AAAA7pB,AAAA2pB,AAAAC;AAAAX,AAAAA;AAAA,AAAA,AAAAv5C,AAAAu5C,AAAAY;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAl6C;;AAAA,AAAAk6C,AAAA,AAAA;;AAAAA;;AAAAb;;AAAA,AAAA,AAAAp5C,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAo7C;AAAA,AAAA,AAAA,AAAAl5C,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA+5C;AAAA,AAAA,AAAAC,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAh6C;;AAAAg6C;AAAA,AAAA,AAAA75C,AAAA,AAAA84C,AAAA;AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA55C,AAAA,AAAA44C,AAAA;;AAAAgB;AAAA,AAAAj6C;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAo5C;;;;AAAAp5C;;;;;AAAAo5C;;;;;AAAAA;;;;;;;;;AAAA34C,AAAA,AAAA45C,AAAA,AAAAt8C;AAAA,AAAA,AAAAs8C,AAAA15C,AAAA,AAAA/C;;AAAAy8C;;AAAA,AAAA,AAAAz5C,AAAAH;;;AAAA7C;;AASF,AAAA,AAAA,AAAA6L,AAAMgxC;AAAN,AAAA,AAAA/wC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA+wC,AAAA,AAAA,AAAA,AAAA5wC;;;AAAA,AAAA,AAAA,AAAA,AAAA6wC,AAAMD,AACHU;AADH,AAAA,AAAAR,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAA59C,AAAA49C,AAAA,AAAA,AAC0BS;AAD1B,AAEE,AAAAx9C,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAq9C;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAIuB,AAAA,AAAG,AAACqE,AAAK,AAAA,AAAArE;;;AAJhCC,AAAA,AAKiDqE,AAAoB3E;AALrEE,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA98C,AAAAy8C,AAAA,AAAAI;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAP,AAAA;AAAAQ,AAAA,AAAAR,AAAA;AAAAS,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAT,AAAAQ,AAGsB6D;AAHtBhE,AAAA,AAAAI,AACqB2D,AACAvE;AAFrBa,AAAA,AAAAL,AAOsCp7C;AAPtC07C,AAAA,AAAA,AAAAD;AAAAN,AAAA,AAAA,AAAAO;AAAAC,AAAA,AAAAP,AAQsCp7C;AARtC47C,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAV,AASyCp7C;AATzC+7C,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAb,AAUyCp7C;AAVzCk8C,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAhB,AAW6Bl3C;AAX7Bm4C,AAAA,AAAAlB,AAYwDyE;AAZxD/E,AAAA,AAAAyB,AAAAzB;AAAA,AAAA,AAAAyB,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAT;;AAAA,AAAAS,AAAA,AAAAnB;;AAAA,AAAAmB,AAAA,AAAAlB;;AAAA,AAAAkB,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAAl+C,AAAAy8C,AAAA,AAAAwB;;AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAAsB,AAAA,AAAAvB,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAO,AAAA,AAAAP,AAAA;AAAA0B,AAAA,AAAA1B,AAAA;AAAA2B,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAN,AAAAK,AAWuB0C;AAXvBxC,AAAA,AAAAvB,AAa6Bl3C;AAb7B04C,AAAA,AAAAf,AAcwD+D;AAdxD/E,AAAA,AAAAgC,AAAAhC;AAAA,AAAA,AAAAgC,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAz+C,AAAAy8C,AAAA,AAAA+B;;AAAA,AAAA,AAAA9B,AAAA;AAAA,AAAA4B,AAAA,AAAA7B,AAAA;AAAAsB,AAAA,AAAAtB,AAAA;AAAA8B,AAAA,AAAA9B,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAP,AAAA;AAAAmB,AAAA,AAAAnB,AAAA;AAAAiC,AAAA,AAAAjC,AAAA;AAAAkC,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAA,AAAAD;AAAAE,AAAA,AAAAN,AAAAK,AAauBmC;AAbvBjC,AAAA,AAAA,AAAA9B,AAgBqB0E;AAhBrB3C,AAAA,AAAA,AAAAT,AAiBuBoD;AAjBvB1C,AAAA,AAAA,AAAAH,AAkBuB6C;AAlBvBzC,AAAA,AAAA,AAAAH,AAmBoB18C;AAnBpB88C,AAAA,AAAA,AAoB0Br5C,AAAKo7C;AApB/B9B,AAAA,AAAAD,AAAAJ,AAoBqB18C;AApBrBg9C,AAAA,AAAA,AAqB2Bv5C,AAAKo7C;AArBhC5B,AAAA,AAAAD,AAAAN,AAqBsB18C;AArBtBk9C,AAAA,AAAAN,AAaQyC;AAbR,AAeQv3C;AAfR60C,AAWQwC;AAXRxD,AAUQuD;AAVR1D,AASQyD;AATR5D,AAQQ2D;AARRrE,AAOQoE;AAPRrC,AACQgC;AADR7B,AAmBQ0C;AAnBRtC,AAqBQwC;AArBR1C,AAoBQyC;AApBR,AAsB2B,AAAKE,AAAEC;AAAP,AAAU,AAACzjC,AAAiBwjC,AAAEC;;;AAtBzDxC,AAAA,AAAAD,AAAAH,AAAAE,AAsBuBj9C;AAtBvBo9C,AAAA,AAAA,AAyB6B35C,AAAKo7C;AAzBlCxB,AAAA,AAAAD,AAAAV,AAyBwB18C;AAzBxBs9C,AAAA,AAAA,AA0B8B75C,AAAKo7C;AA1BnCtB,AAAA,AAAAD,AAAAZ,AA0ByB18C;AA1BzBw9C,AAAA,AAAA,AA2B8B/5C,AAAKo7C;AA3BnCpB,AAAA,AAAAD,AAAAd,AA2ByB18C;AA3BzB09C,AAAA,AAAA,AA4B6Bj6C,AAAKo7C;AA5BlClB,AAAA,AAAAD,AAAAhB,AA4BwB18C;AA5BxB49C,AAAA,AAAA,AA6B6Bn6C,AAAKo7C;AA7BlChB,AAAA,AAAAD,AAAAlB,AA6BwB18C;AA7BxB89C,AAAA,AAAA,AA8B4Br6C,AAAKo7C;AA9BjCd,AAAA,AAAAD,AAAAnB,AA8BuB38C;AA9BvBg+C,AAAA,AAAA,AA+B4Bv6C,AAAKo7C;AA/BjCZ,AAAA,AAAAD,AAAApB,AA+BuB58C;AA/BvBk+C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AAAAV,AAAAjC,AAAAH,AAAAV,AAAA4C,AAAAJ,AAAAF,AAAAJ,AAAAE,AAAAY,AAAAE,AAAAI,AAAAF,AAAAV,AAAA1B;AAAAyC,AAAA,AAAAjvB,AAAA+uB,AAAAC;AAAA9D,AAAAA;AAAA,AAAA,AAAAx7C,AAAAw7C,AAAA+D;;AAAA;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAt/C;;AAAA,AAAAs/C,AAAA,AAAA;;AAAAA;;AAAAhE;;AAAA,AAAA,AAAAr7C,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAq9C;AAAA,AAAA,AAAA,AAAAn7C,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAm/C;AAAA,AAAA,AAAAC,AAAAlE;AAAA,AAAA,AAAAkE,AAAA,AAAAp/C;;AAAAo/C;AAAA,AAAA,AAAAj/C,AAAA,AAAA+6C,AAAA;AAAA,AAAAmE,AAAAnE;AAAA,AAAA,AAAAmE,AAAA,AAAA,AAAAh/C,AAAA,AAAA66C,AAAA;;AAAAmE;AAAA,AAAAr/C;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAq7C;;;;AAAAr7C;;;;;AAAAq7C;;;;;AAAAA;;;;;;;;;AAAA56C,AAAA,AAAAg/C,AAAA,AAAA1hD;AAAA,AAAA,AAAA0hD,AAAA9+C,AAAA,AAAA/C;;AAAA6hD;;AAAA,AAAA,AAAA7+C,AAAAH;;;AAAA7C;;;AAFF,AAAA,AAAA,AAAM68C;;AAAN;AAAA,AAAA,AAAA,AAAAM,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAx6C,AAAAu6C;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAD;;;AAAA,AAmDA,AAAA,AAAM6F,AACHC;AADH,AAEE,AAAMZ,AAAc,AAAA,AAAgBY;AAC9BX,AAAc,AAAA,AAAgBW;AAC9BC,AAAQ,AAAG,AAAC93C,AAAK,AAAA,AAAiB63C;AAClCE,AAAiB,AAAG,AAAC/3C,AAAK,AAAA,AAAe63C;AACzCG,AAAc,AAAG,AAACh4C,AAAK,AAAA,AAAkB63C;AACzCI,AAAc,AAAG,AAACj4C,AAAK,AAAA,AAAkB63C;AACzCK,AAAkB,AAAG,AAACl4C,AAAK,AAAA,AAAgB63C;AAC3CM,AAAkB,AAAG,AAACn4C,AAAK,AAAA,AAAgB63C;AAC3CtkD,AAAE,AAAA,AAAC8G,AAA4B69C;AAC/B3kD,AAAE,AAAA,AAAC8G,AAA4B89C;AAC/B5kD,AAAE,AAAA,AAAC8G,AAAgB29C;AACnBzkD,AAAE,AAAA,AAAC8G,AAAgB49C;AACnBG,AAAS,AAAA,AAACvB;AACVwB,AAAe,AAACnkC,AAAiBkkC,AAASL;AAC1CO,AAAQ,AAACvzB,AACAszB,AACAP;AAGTvkD,AAAE,AAAA,AAAC8G,AAAmBi+C;AACtBC,AAAY,AAACxzB,AAAiBszB,AAAeL;AAC7CQ,AAAY,AAACzzB,AAAiBszB,AAAeJ;AAC7C1kD,AAAE,AAAA,AAAC8G,AAA0Bg+C;AAC7B9kD,AAAE,AAAA,AAAC8G,AAAuBk+C;AAC1BhlD,AAAE,AAAA,AAAC8G,AAAuBm+C;AAxBhC,AAyBG,AAACv6C,AAAK,AAACjG,AAAI,AAAKygD,AAAGC,AAAIC,AAAIC,AACXC,AAAaC,AACbC,AAAeC,AACfC,AACAC,AAAUC;AAJf,AAKJ,AAAMC,AAAc,AAAGP;AACjBQ,AAAc,AAAGP;AACjBQ,AAAW,AAAGJ;AACdK,AAAW,AAAGJ;AACdK,AAAkB,AAACtlC,AAAiBokC,AAAQW;AAC5CQ,AAAe,AAAC10B,AACDy0B,AACAT;AACfW,AAAe,AAAC30B,AACAy0B,AACAR;AAEhBW,AAAe,AAAA,AAAG,AAAGP,AAAclB;AACnC0B,AAAgB,AAAA,AAAI,AAAA,AAAC58C,AAAI28C,AAAkBA;AAC3CE,AAAc,AAAA,AAAGD;AACjBE,AAAc,AAAA,AAAG,AAAA,AAAG,AAAGT,AAAclB;AAErC4B,AAAiB,AAACC,AAAS,AAAGH,AAAcC;AAI5CG,AAAe,AAAA,AACC,AAAC55C,AACA,AAAC0kB,AAAiBq0B,AAAcE,AAChC,AAACv0B,AAAiBs0B,AAAcE;AAEjDW,AAAqB,AAAGD,AAAe,AAAGtB;AAC1CwB,AAAY,AAACC,AAAiBX,AAAelB;AAC7C8B,AAAY,AAACD,AAAiBV,AAAelB;AAC7CJ,AAAS,AAAG,AAAGG,AAAYa,AAAe,AAAGZ,AAAYa;AACzDiB,AAAU,AAACv1B,AACD,AAAC1kB,AACA,AAAC0kB,AAAiBq0B,AAAce,AAChC,AAACp1B,AAAiBs0B,AAAcgB,AACjC,AAAA,AAACxD;AACX0D,AAAS,AAAA,AAAG,AAAGD,AAAUlC;AAnC/B,AAoCMoC;AApCN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAqCc,AAACC,AAAehC,AACTsB,AACH9C,AACAC,AACC,AAAA,AAAOuC,AACP,AAAA,AAAOC,AACJ,AAAA,AAAOF,AACd,AAAGd,AACKuB,AACN,AAAGtB,AACF,AAAGC,AACIsB,AACRd,AACAC,AACE,AAAGN,AACH,AAAGC,AACL,AAAGC,AACPsB,AACJC;AACX,AAAA,AAAa3C,AACb,AAAA,AAAcA,AACd,AAAA,AAAeA,AACf,AAAA,AAAgBA,AAChB,AAAA,AAAgBA,AAChB,AAAA,AAAgBA,AAChB,AAAA,AAAkBA,AAClB,AAAA,AAAkBA,AAClB,AAAA,AAAiBA,AACjB,AAAA,AAAiBA,AACjB,AAAA,AAAiBA;;AAE3B,AAAA,AAAM6C,AACHC,AAAM3yB;AADT,AAEE,AAAM4yB,AAAO,AAAC56C,AAAK26C;AACbE,AAAkB,AAAA,AAAeD;AACjC9C,AAAQ,AAAA,AAAe8C;AACvB5C,AAAc,AAAA,AAAiB4C;AAC/B3C,AAAc,AAAA,AAAiB2C;AAC/BxC,AAAS,AAAA,AAACvB;AACVwB,AAAe,AAACnkC,AAAiBkkC,AAASyC;AAC1CvC,AAAQ,AAACvzB,AACAszB,AACAP;AACTS,AAAY,AAACxzB,AAAiBszB,AAAeL;AAC7CQ,AAAY,AAACzzB,AAAiBszB,AAAeJ;AAG7Cc,AAAe,AAAA,AAAiB/wB;AAChCgxB,AAAe,AAAA,AAAiBhxB;AAChCwxB,AAAkB,AAACtlC,AAAiBokC,AAAQ,AAAA,AAAetwB;AAC3DyxB,AAAe,AAAC10B,AACAy0B,AACAT;AAChBW,AAAe,AAAC30B,AACAy0B,AACAR;AAChBH,AAAa,AAAA,AAAe7wB;AAC5B8wB,AAAa,AAAA,AAAe9wB;AAC5BmyB,AAAY,AAACC,AAAiBX,AAAelB;AAC7C8B,AAAY,AAACD,AAAiBV,AAAelB;AAE7CJ,AAAS,AAAG,AAAGG,AAAYM,AAAc,AAAGL,AAAYM;AACxDwB,AAAU,AAACv1B,AACA,AAAC1kB,AACA,AAAC0kB,AAAiB8zB,AAAasB,AAC/B,AAACp1B,AAAiB+zB,AAAauB,AAChC,AAAA,AAACxD;AACZ0D,AAAS,AAAA,AAAG,AAAGD,AAAUlC;AACzB0C,AAAG,AAAA,AAAA,AAAC7tB,AAAKjF,AAAiBsyB;AAnChC,AAqCE,AAACS,AAAKJ,AAAMG;;AAGhB,AAAA,AAAME,AACHC;AADH,AAEE,AAAA,AAAC76C,AACAs6C,AACC,AAAA,AAAA,AAAA,AAACztB,AAAK,AAACz1B,AAAMyjD,AAAkC,AAACh9C,AAAKg9C;;AAEzD,AAAA,AAAMC,AACHC;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAc6BA,AAkBHA;;AAK1B,AAAA,AAAA,AAAA16C,AAAM26C;AAAN,AAAA,AAAA16C,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA06C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAv6C;;;AAAA,AAAA,AAAA,AAAA,AAAAw6C,AAAMD,AACHD,AAAQO;AADX,AAAA,AAAAJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1J,AAAA,AAAA0J,AAAA,AAAA,AAAA,AAAA,AAAAzJ,AAAAC,AAAAwJ,AAAAA;AAAA,AAAAvnD,AAAAunD,AAAA,AAAA,AAC6BK;AAD7B,AAAA5nD,AAAAunD,AAAA,AAAA,AACyCM;AADzC,AAAA7nD,AAAAunD,AAAA,AAAA,AAC+CO;AAD/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC1hD,AAIgCwhD,AAERR,AACAO,AACA,AAAI,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAWD;;AAAXC;;AAR7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQyB,AAAA,AAAA,AAAA,AACYF,AAAMC,AAS1C,AAACX,AAAYC;;;AAvBxB,AAAA,AAAA,AAAMC;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAhkD,AAAA+jD;AAAAA,AAAA,AAAAtJ,AAAAsJ;AAAAE,AAAA,AAAAjkD,AAAA+jD;AAAAA,AAAA,AAAAtJ,AAAAsJ;AAAA,AAAA,AAAArJ,AAAA;AAAA,AAAA,AAAAA,AAAAsJ,AAAAC,AAAAF;;;AAAA,AAyBA,AAAA,AAAMQ,AACHC;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBA,AAWL,AAAA,AAAA,AAACZ,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAACA,AAAyB,AAAA,AAAK,AAAA,AAAgB,AAAC5jD,AAAMwkD,AACtD,AAAA,AAACZ,AAAyB,AAAA,AAAK,AAAA,AAAgB,AAAC5jD,AAAMwkD,AACtD,AAAA,AAAA,AAACZ,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAACa;;AA8Ed,AAAA,AAAA,AAAAx7C,AAAMy7C;AAAN,AAAA,AAAAx7C,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAw7C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAr7C;;;AAAA,AAAA,AAAA,AAAA,AAAAs7C,AAAMD,AACHf,AAAQO;AADX,AAAA,AAAAU,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxK,AAAA,AAAAwK,AAAA,AAAA,AAAA,AAAA,AAAAvK,AAAAC,AAAAsK,AAAAA;AAAA,AAAAroD,AAAAqoD,AAAA,AAAA,AAC6BT;AAD7B,AAAA5nD,AAAAqoD,AAAA,AAAA,AACyCR;AADzC,AAAA7nD,AAAAqoD,AAAA,AAAA,AAC+CP;AAD/C,AAAA9nD,AAAAqoD,AAAA,AAAA,AACqDI;AADrD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACriD,AAOgCwhD,AACD,AAAA,AAAA,AAAIA,AACXR,AACAO,AAIA,AAAI,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAWD;;AAAXC;;AAd7B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAcyB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACYF,AAAMC,AACT,AAAA,AAAA,AAAIW;;;AAxBhD,AAAA,AAAA,AAAMN;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA9kD,AAAA6kD;AAAAA,AAAA,AAAApK,AAAAoK;AAAAE,AAAA,AAAA/kD,AAAA6kD;AAAAA,AAAA,AAAApK,AAAAoK;AAAA,AAAA,AAAAnK,AAAA;AAAA,AAAA,AAAAA,AAAAoK,AAAAC,AAAAF;;;AAAA,AAuCA,AAAA,AAAMI,AACHT;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBA,AAWL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA;;AAqBd,AAAA,AAAA,AAAAj8C,AAAMk8C;AAAN,AAAA,AAAAj8C,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAi8C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA97C;;;AAAA,AAAA,AAAA,AAAA,AAAA+7C,AAAMD,AACHxB,AAAQO;AADX,AAAA,AAAAmB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjL,AAAA,AAAAiL,AAAA,AAAA,AAAA,AAAA,AAAAhL,AAAAC,AAAA+K,AAAAA;AAAA,AAAA9oD,AAAA8oD,AAAA,AAAA,AAC6BlB;AAD7B,AAAA5nD,AAAA8oD,AAAA,AAAA,AACyCjB;AADzC,AAAA7nD,AAAA8oD,AAAA,AAAA,AAC+ChB;AAD/C,AAAA9nD,AAAA8oD,AAAA,AAAA,AACqDL;AADrD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACriD,AAOgCwhD,AACD,AAAA,AAAA,AAAIA,AACXR,AACAO,AAIS,AAAI,AAAAI,AAAKF;AAAL,AAAA,AAAAE;AAAWD;;AAAXC;;AAdtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAckC,AAAA,AAAuBF,AAAMC,AAC/B,AAAA,AAAA,AAAIW;;;AAvB9C,AAAA,AAAA,AAAMG;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAvlD,AAAAslD;AAAAA,AAAA,AAAA7K,AAAA6K;AAAAE,AAAA,AAAAxlD,AAAAslD;AAAAA,AAAA,AAAA7K,AAAA6K;AAAA,AAAA,AAAA5K,AAAA;AAAA,AAAA,AAAAA,AAAA6K,AAAAC,AAAAF;;;AAAA,AAqCA,AAAA,AAAMG,AACHjB;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBA,AAYL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACkB,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA;;AAId,AAAA,AAAMC,AACHnB;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBA,AAYL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACkB,AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA;;AA+Kd,AAAA,AAAME,AAAerqD;AAArB,AACE,AAACmhB,AAAiB,AAAA,AAAwBnhB,AACxB,AAAA,AAA4BA;;AAEhD,AAAA,AAAMsqD,AAAmBtqD;AAAzB,AACE,AAAMuqD,AAAS,AAAAC,AAAU,AAAA,AAAQ,AAAA,AAAYxqD;AACvCyqD,AAAO,AAAA,AAAS,AAAA,AAAS,AAAA,AAAOzqD;AAChC0qD,AAAO,AAAA,AAAS,AAAA,AAAS,AAAA,AAAO1qD;AAChC2qD,AAAK,AAACN,AAAcrqD;AACpB4qD,AAAe,AAAC54B,AAAiB24B,AAAK,AAAA,AAAW3qD;AACjD6qD,AAAe,AAAC74B,AAAiB24B,AAAK,AAAA,AAAW3qD;AALvD,AAAA,AAAA,AAAA,AAAA,AAMauqD,AACC,AAACO,AAAQL,AAAQG,AACjB,AAACE,AAAQJ,AAAQG;;AAGjC,AAAA,AAAME,AAAmB/qD;AAAzB,AACE,AAAMuqD,AAAS,AAAAC,AAAU,AAAA,AAAQ,AAAA,AAAYxqD;AACvCyqD,AAAO,AAAA,AAAS,AAAA,AAAS,AAAA,AAAOzqD;AAChC0qD,AAAO,AAAA,AAAS,AAAA,AAAS,AAAA,AAAO1qD;AAChC2qD,AAAK,AAACN,AAAcrqD;AACpB4qD,AAAe,AAAC54B,AAAiB24B,AAAK,AAAA,AAAW3qD;AACjD6qD,AAAe,AAAC74B,AAAiB24B,AAAK,AAAA,AAAW3qD;AALvD,AAAA,AAAA,AAAA,AAAA,AAAA,AAMkByqD,AACAC,AACCE,AACAC;;AAIrB,AAAA,AAAMG,AACHC;AADH,AAEE,AAAMC,AAAe,AAACC,AAAS,AAAA,AAAA,AAACziD,AAAgBuiD;AAC1CG,AAAe,AAACnmD,AAAI,AAAA,AAAAomD,AAAC3iD,AAAKuE;AAAN,AAAY,AAAA,AAAAo+C,AAACC;AAAuB,AAACjmD,AAAK6lD;AADpE,AAEE,AAACjmD,AAAI,AAAKjF;AAAL,AAAA,AAAA,AAAA,AAAgB,AAAC,AAAA,AAAA,AAAC0I,AAAgB1I,AACpB,AAAC+qD,AAAkB/qD;AACjCorD;;AAET;;;;;AAAA,AAAM5M,AAIH+M;AAJH,AAKE,AAAML,AAAe,AAACC,AAAS,AAAA,AAAA,AAACziD,AAAgB6iD;AAC1CH,AAAe,AAACnmD,AAAI,AAAA,AAAAumD,AAAC9iD,AAAKuE;AAAN,AAAY,AAAA,AAAAu+C,AAACF;AAAuB,AAACjmD,AAAK6lD;AADpE,AAEEE;;AAOJ,AAAA,AAAMK,AACHC;AADH,AAEE,AAAMC,AAAK,AAAA,AAAOD;AACZtM,AAAa,AAAA,AAAKuM;AAClBlB,AAAO,AAAA,AAASkB;AAChBjB,AAAO,AAAA,AAASiB;AAChBC,AAAS,AAAA,AAAKnB;AACdoB,AAAS,AAAA,AAAKnB;AALpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMYtL,AAEAwM,AAASC;;AAGvB,AAAA,AAAMC,AACHJ,AAAUK;AADb,AAEE,AAAMJ,AAAK,AAAA,AAAOD;AACZjB,AAAO,AAAA,AAASkB;AAChBjB,AAAO,AAAA,AAASiB;AAChBC,AAAS,AAAA,AAAKnB;AACdoB,AAAS,AAAA,AAAKnB;AACdsB,AAAQ,AAAA,AAASvB;AACjBwB,AAAQ,AAAA,AAASvB;AACjBwB,AAAM,AAAA,AAAOzB;AACb0B,AAAM,AAAA,AAAOzB;AACb0B,AAAU,AAAA,AAAW3B;AACrB4B,AAAU,AAAA,AAAW3B;AACrB5E,AAAa,AAAAwG,AAAC,AAACxB,AAAQc;AAAV,AAAA,AAAAU,AAAAA,AAAAA,AAAoBP,AAAAA;;AACjChG,AAAa,AAAAwG,AAAC,AAACzB,AAAQe;AAAV,AAAA,AAAAU,AAAAA,AAAAA,AAAoBR,AAAAA;;AAZvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAaGH,AAAkBI,AACCJ,AACHM,AACIE,AACI,AAAA,AAAkBtG,AAChB,AAAA,AAAMA,AACN,AAAA,AAAMA,AAChC+F,AAAkBI,AACCJ,AACHM,AACIE,AACI,AAAA,AAAkBtG,AAChB,AAAA,AAAMA,AACN,AAAA,AAAMA;;AAKrC,AAAA,AAAMyG,AACHd,AAAUe;AADb,AAEE,AAAMd,AAAK,AAAA,AAAOD;AACZxoC,AAAW,AAAA,AAAKyoC;AAChBlB,AAAO,AAAA,AAASkB;AAChBjB,AAAO,AAAA,AAASiB;AAChBC,AAAS,AAAA,AAAKnB;AACdoB,AAAS,AAAA,AAAKnB;AACdgC,AAAS,AAAA,AAAWf;AACpBgB,AAAS,AAAA,AAAWhB;AACpBiB,AAAa,AAAA,AAAcjB;AAC3BkB,AAAY,AAAA,AAAwBnB;AACpCoB,AAAgB,AAAA,AAAAC,AAAC3mD;AAAD,AAAS,AAAC6D,AAAEiZ,AAAW,AAAA,AAAA6pC;AAAYN;AACnDO,AAAU,AAAC/yB,AAAK,AAAKj6B;AAAL,AAAA,AAAA,AAAA,AAAA,AAA0B,AAAA,AAAMA,AACZ,AAAA,AAAY,AAAA,AAAMA,AACnB,AAAA,AAAC8H,AAEA,AAAA,AAAAmlD,AAAC7mD;AAAD,AAAS,AAAC6D,AAAE,AAAA,AAAAgjD,AAAS,AAAA,AAAMjtD;AAJ/C,AAK4B8sD,AAEnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI,AAAA,AAAgB,AAAA,AAAM9sD,AAEtB,AAAA,AAAgB,AAAA,AAAMA,AAEtB,AAAA,AAAkB,AAAA,AAAMA,AAExB,AAAA,AAAe,AAAA,AAAMA;AAElC8sD;AA1BtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA2BO,AAACI,AAEaN,AACAhB,AAASc,AACTb,AAASc,AAChBE,AACHG;;AAEb,AAAA,AAAMG,AACHzB,AAAUe,AAAiBW,AAAMC;AADpC,AAEE,AAAM1B,AAAK,AAAA,AAAOD;AACZxoC,AAAW,AAAA,AAAKyoC;AAChBlB,AAAO,AAAA,AAASkB;AAChBjB,AAAO,AAAA,AAASiB;AAChBC,AAAS,AAAA,AAAKnB;AACdoB,AAAS,AAAA,AAAKnB;AALpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMGxnC,AAA4BA,AAEA0oC,AAASC,AAEhB,AAAA,AAAC/jD,AAEA,AAAA,AAAAwlD,AAAClnD;AAAD,AAAS,AAAC6D,AAAE,AAAA,AAAAqjD,AAAWpqC;AAZhD,AAAA,AAAA,AAAA,AAaiCupC,AACXW,AACAC,AACK,AAACb,AAAsBd,AAAUe;;AAG9D;;;;;AAAA,AAAMc,AAIHC,AAAgBf,AAAiBgB,AACjCL,AAAMC;AALT,AAME,AAAM58C,AAAa,AAAA,AAAe+8C;AAC5BE,AAAU,AAAA,AAAYF;AACtBG,AAAa,AAAC7O,AAAM8O,AAAW72B,AACX,AAAA,AAAA82B,AAAC5oD;AAAD,AAAM,AAAA4oD,AAACV,AAEAV,AACA,AAACzrD,AAAIosD,AAAM,AAAA,AAAK,AAAA,AAAAS,AAChB,AAAC7sD,AAAIqsD,AAAM,AAAA,AAAK,AAAA,AAAAQ;AAClBH;AAR/B,AAAA,AAAA,AAAA,AAAA,AAaiBj9C,AACFg9C,AACPE;;AAMV,AAAA,AAAMG,AACHC;AADH,AAEE,AAAMloD,AAAM,AAAA,AACC,AAACpB,AAAM,AAAA,AAAU,AAACA,AAAM,AAAA,AAASspD;AACxCjoD,AAAI,AAAA,AACE,AAACrB,AAAM,AAAA,AAAU,AAACA,AAAM,AAAA,AAASspD;AACvCC,AAAK,AAAIloD,AACFA,AACA,AAAAU,AAAA;AANb,AAAA,AAAA,AAAA,AAAA,AAQSwnD,AACEnoD;;AAEb,AAAA,AAAMooD,AACHC;AADH,AAEE,AAAMroD,AAAM,AAAA,AAAuBqoD;AAC7BC,AAAK,AAAA,AAAClpD,AAAS,AAAA,AAAeipD;AAC9BE,AAAc,AAAI,AAAA,AAAA,AAACnkD,AAAEkkD,AACL,AAAA3nD,AAAA,AACA,AAAC6G,AAAOC,AAAiB6gD;AAJ/C,AAAA,AAAA,AAAA,AAKQC,AACEvoD;;AAGZ,AAAA,AAAMwoD,AACHC;AADH,AAEE,AAACrpD,AAAIgpD,AAA4BK;;AAEnC,AAAA,AAAMC,AACH7mD;AADH,AAEE,AAACo3C,AAAMn+C,AACC,AAACsE,AACA,AAAA,AAACyD,AAAK2lD,AACN,AAAA,AAAS3mD;;AAGpB,AAAA,AAAM8mD,AACHT;AADH,AAEE,AAAMloD,AAAM,AAAA,AAAuB,AAACpB,AAAM,AAAA,AAAU,AAACA,AAAM,AAAA,AAASspD;AAC9DI,AAAK,AAAA,AAAClpD,AAAS,AAAA,AAAe,AAACR,AAAM,AAAA,AAAU,AAACA,AAAM,AAAA,AAASspD;AAC/DK,AAAc,AAAI,AAAA,AAAA,AAACnkD,AAAEkkD,AACL,AAAA3nD,AAAA,AACA,AAAC6G,AAAOC,AAAiB6gD;AAJ/C,AAAA,AAAA,AAAA,AAKQC,AACEvoD;;AAqCZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAK4oD;AAQL,AAAA,AAAMC,AACHC,AAAclB;AADjB,AAEE,AAAI,AAAA,AAAMkB;AACRA;;AACA,AAAMC,AAAO,AAAA,AACC,AAAC5tD,AAAIysD,AACA,AAACvmD,AAA0BynD;AAF9C,AAGE,AAAAE,AAAID;AAAJ,AAAA,AAAAC;AAAAA;;AAAWF;;;;AAEjB,AAAA,AAAMG,AACHC;AADH,AAAA;;AAGA,AAAA,AAAMC,AACHD;AADH,AAAA;;AAGA,AAAA,AAAME,AACHF;AADH,AAEE,AAAMG,AAAO,AAAA,AAAS,AAAA,AAAOH;AACvBrE,AAAO,AAACjmD,AAAMyqD;AACdC,AAAO,AAAC7hC,AAAO4hC;AACf9B,AAAM,AAAA,AAAQ2B;AACdK,AAAS,AAAA,AAACnqD,AAAcmoD;AACxBiC,AAAgB,AAAA,AAAAC,AAACrqD;AAAD,AAAM,AAAAqqD,AAACtuD,AAAM0pD;AAAQ0E;AACrCG,AAAgB,AAAA,AAAAC,AAACvqD;AAAD,AAAM,AAAAuqD,AAACxuD,AAAMmuD;AAAQC;AACrCK,AAAa,AAAI,AAAC7mD,AAAOwmD,AACV,AAAA5oD,AAAA,AACA,AAAC6G,AAAOC,AAAiB+hD;AACxCK,AAAa,AAAI,AAAC9mD,AAAOwmD,AACV,AAAA5oD,AAAA,AACA,AAAC6G,AAAOC,AAAiBiiD;AAZ9C,AAAA,AAaG7E,AAAO+E,AACPN,AAAOO;;AAEZ,AAAA,AAAMC,AACHZ;AADH,AAEE,AAAMG,AAAO,AAAA,AAAS,AAAA,AAAOH;AACvBrE,AAAO,AAACjmD,AAAMyqD;AACdC,AAAO,AAAC7hC,AAAO4hC;AACf9B,AAAM,AAAA,AAAQ2B;AACdK,AAAS,AAAA,AAACnqD,AAAiBmoD;AAC3BiC,AAAgB,AAAA,AAAAO,AAAC3qD;AAAD,AAAM,AAAA2qD,AAAC5uD,AAAM0pD;AAAQ0E;AACrCG,AAAgB,AAAA,AAAAM,AAAC5qD;AAAD,AAAM,AAAA4qD,AAAC7uD,AAAMmuD;AAAQC;AACrCK,AAAa,AAAI,AAAC7mD,AAAOwmD,AACV,AAAA5oD,AAAA,AACA,AAAC6G,AAAOC,AAAiB+hD;AACxCK,AAAa,AAAI,AAAC9mD,AAAOwmD,AACV,AAAA5oD,AAAA,AACA,AAAC6G,AAAOC,AAAiBiiD;AAZ9C,AAAA,AAaG7E,AAAO+E,AACPN,AAAOO;;AAEZ,AAAA,AAAMI,AACHC;AADH,AAEE,AAAMC,AAAU,AAAA,AAAYD;AACtBE,AAAS,AAAA,AAAWF;AACpBG,AAAS,AAACl+B,AAAiBi+B,AAASD;AAF1C,AAGEE;;AAEJ,AAAA,AAAMC,AACHpB;AADH,AAEE,AAAM3B,AAAM,AAAA,AAAQ2B;AACdqB,AAAa,AAAI,AAACxnD,AAAOwkD,AACV,AAAA5mD,AAAA,AACA,AAAC6G,AAAOC,AAAiB,AAACrI,AAAI6qD,AAAS1C;AACtDC,AAAM,AAAA,AAAQ0B;AACdsB,AAAa,AAAI,AAACznD,AAAOykD,AACV,AAAA7mD,AAAA,AACA,AAAC6G,AAAOC,AAAiB,AAACrI,AAAI6qD,AAASzC;AAP5D,AAQE,AAAC//C,AAAiB+iD,AAAaD;;AAInC,AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAA,AAAA3qD,AAAA4qD,AAAA,AAAA,AACI5B;AADJ,AAAAhpD,AAAA4qD,AAAA,AAAA,AACkBE;AADlB,AAAA,AAEG,AAAA,AAASA,AAAY,AAAChsD,AAAM,AAAA,AAASgsD;;AAExC,AAAA,AAAMC,AACH3B,AAAYtB;AADf,AAEE,AAAMkD,AAAgB,AAAClsD,AAAM,AAAA,AAAYsqD;AACnC6B,AAAY,AAAA,AAAS,AAAA,AAAO7B;AAC5B8B,AAAO,AAACtC,AAAqBoC;AAC7BG,AAAe,AAAA,AAAC7rD,AAAW4rD;AAC3BE,AAAW,AAAC9rD,AAAIiC,AACA,AAACE,AAAOwpD,AAAYE;AAL1C,AAME,AAACE,AAAYvD,AAAWsD;;AAI5B,AAAA,AAAME,AACHrC,AAAO7C,AAAamF;AADvB,AAEE,AAAClwD,AACA,AAACyD,AAAM,AAAA,AAAS,AAACA,AAAM,AAAA,AAAA0sD,AAAC/qD;AAAD,AAAS,AAAC6D,AAAE,AAACmnD,AAA0BxC,AAC3B,AAACwC,AAA0B,AAAA,AAAAD;AAC/B,AAAC9rD,AAAK0mD,AACrC,AAAC7kD,AAA0BgqD;;AAE9B,AAAA,AAAMG,AACHxpD,AAAQtH,AAASwrD;AADpB,AAEE,AAAMuF,AAAoB,AAAClrD,AAAOC,AAAM,AAACyC,AAAKjB;AACxC+9C,AAAI,AAAI,AAACh9C,AAAO0oD,AACV,AAAA9qD,AAAA,AACA,AAAC6G,AAAOC,AACA,AAAA,AAAAikD,AAACtsD;AAAD,AAAM,AAAC+sB,AACA,AAAAu/B,AAACvwD,AAAI6G,AACL,AAAA0pD,AAACN,AAAgBlF,AAAaxrD;AAChC+wD;AAPzB,AAQE,AAAI,AAAG1L;AACL,AAAAp/C,AAAA;;AACAo/C;;;AAGN,AAAA,AAAM4L,AACHtC,AAAOnD;AADV,AAEE,AAAM0F,AAAc,AAAC3oD,AAAKomD;AACpBwC,AAAW,AAAA,AAACL,AAAoBnC,AAAanD;AAC7C4F,AAAW,AAAA,AAACN,AAAoBnC,AAAanD;AAFnD,AAAA,AAAA,AAAA,AAGS2F,AACAC;;AAGX,AAAA,AAAMC,AACHC,AAAU9F;AADb,AAAA,AAAA,AAAA,AAES8F,AACA,AAAC7/B,AACA6/B,AACA,AAAA,AAAA,AAACZ,AAAqBlF;;AAGhC,AAAA,AAAM+F,AACHC,AAAMC,AAAWnqD,AAAQkkD;AAD5B,AAEE,AAAMkG,AAAS,AAACT,AAAiBO,AAAMhG;AACjClkD,AAAQ,AAAC2pD,AAAiB3pD,AAAQkkD;AAClCvrD,AAAE,AAAA,AAAC8G,AAAc0qD;AACjBE,AAAU,AAACN,AAAcI,AAAWjG;AAH1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAIakG,AACDpqD,AACEqqD,AACA,AAACC,AAAW9K,AACA,AAAC8K,AAAW7kD,AAAiB2kD,AAASpqD,AACtCqqD;;AAG5B,AAAA,AAAME,AACHrD;AADH,AAEE,AAAM3B,AAAM,AAAA,AAACnoD,AAAe,AAAA,AAAQ8pD;AAApC,AACE,AAAI,AAACnmD,AAAOwkD;AACV,AAAA5mD,AAAA;;AACA,AAAC6G,AAAOC,AAAiB8/C;;;AAE/B,AAAA,AAAMiF,AACHtD;AADH,AAEE,AAAM3B,AAAM,AAAA,AAACnoD,AAAe,AAAA,AAAQ8pD;AAApC,AACE,AAAI,AAACnmD,AAAOwkD;AACV,AAAA5mD,AAAA;;AACA,AAAC6G,AAAOC,AAAiB8/C;;;AAG/B,AAAA,AAAMkF,AACHvD;AADH,AAEE,AAAA,AAAY,AAACtqD,AAAM,AAAA,AAAYsqD;;AAIjC,AAAA,AAAMwD,AACHxD;AADH,AAEE,AAAC1H,AAAiB,AAAC+K,AAAWrD,AACZ,AAACsD,AAAWtD;;AAEhC,AAAA,AAAMyD,AACHzD;AADH,AAEE,AAAMrY,AAAO,AAAA,AAAS,AAACjyC,AAAM,AAAA,AAAYsqD;AACnC0D,AAAW,AAACrsD,AAAOC,AAAM,AAAA,AAACpB,AAAeyxC;AAD/C,AAEE,AAAI,AAAC9tC,AAAO6pD;AACV,AAAAjsD,AAAA;;AACA,AAAC6G,AAAOC,AAAiBmlD;;;AAI/B,AAAA,AAAMrtD,AACH2pD,AAAYtB;AADf,AAEE,AACMmD,AAAY,AAAA,AAAS,AAAA,AAAO7B;AAC5B2D,AAAc,AAAA,AAAAC,AAAC1tD;AAAD,AAAM,AAAA,AAAS,AAAA0tD,AAAC3xD,AAAIysD;AACfmD;AACnBD,AAAgB,AAAClsD,AAAM,AAAA,AAAYsqD;AACnC6D,AAAS,AAAC59B,AAAS,AAAA,AAAY,AAAA,AAAO27B;AACtCkC,AAAW,AAAC79B,AAAS,AAAA,AAAY27B;AACjCmC,AAAW,AAAC1sD,AAAOC,AACA,AAACpB,AAAI,AAAA,AAACyD,AACD,AAAA,AAASioD;AACjC8B,AAAW,AAAI,AAAC7pD,AAAOkqD,AACV,AAAAtsD,AAAA,AACA,AAAC6G,AAAOC,AAAiBwlD;AAEtCC,AAAY,AAACzlD,AAAiBulD,AAAWJ;AACzCO,AAAW,AAAA,AAAC/tD,AAAe,AAAA,AAAQ8pD;AACnCkE,AAAW,AAAI,AAACrqD,AAAOoqD,AACV,AAAAxsD,AAAA,AACA,AAAC6G,AAAOC,AAAiB0lD;AACtCE,AAAW,AAAA,AAACjuD,AAAe,AAAA,AAAQ8pD;AACnCoE,AAAW,AAAI,AAACvqD,AAAOsqD,AACV,AAAA1sD,AAAA,AACA,AAAC6G,AAAOC,AAAiB4lD;AACtCE,AAAU,AAAC/L,AAAiB4L,AAAWE;AACvCE,AAAgB,AAAC5lD,AAAkBslD,AAAYK;AAC/CE,AAAW,AAAI,AAAC33B,AAAiB,AAAAn1B,AAAA,AAAiBosD,AACrC,AAAApsD,AAAA,AACA,AAAC2a,AAAiBiyC,AAAUR;AACzCW,AAAe,AAAA,AAAW,AAAA,AAAO5C;AACjC6C,AAAe,AAACvuD,AAAI,AAACyD,AACA,AAAKqE;AAAL,AAAQ,AAAI,AAAGA;AAAS,AAAAvG,AAAA;;AAAoBuG;;AAD7C,AAAA0mD;AAAA,AAEE,AAAAA,AAACzhC,AAAiBshC;AACpB,AAACjuD,AAAKkuD;AAC1BG,AAAQ,AAAC7qD,AAAO6pD,AAAcc;AAE9B3C,AAAO,AAAC/C,AAAmB6C;AAC3BnwD,AAAE,AAAA,AAAC8G,AAAiBupD;AACpB8C,AAAQ,AAAC9qD,AAAO,AAAC5D,AAAI,AAAA,AAAA2uD,AAAClrD;AAAD,AAAO,AAAAkrD,AAAClF,AAAejB;AAAvB,AAA2CoD,AAChD,AAAA,AAAC5rD,AAAS4rD;AAC1BrwD,AAAE,AAAA,AAAC8G,AAAkBqsD;AAErB5rD,AAAQ,AAACitB,AAAS,AAACu5B,AAAqBoC;AACxCkD,AAAS,AAAChrD,AAAO,AAAA,AAAAirD,AAAC7uD;AAAD,AAAM,AAAA6uD,AAACpF,AAAejB;AAAY,AAAA,AAACxoD,AAAW8C,AAC9C,AAAA,AAAC9C,AAAS8C;AAC3BvH,AAAE,AAAA,AAAC8G,AAA2BusD;AAC9BhsD,AAAQ,AAACyF,AAAiB,AAAA,AAAMujD,AAAQ,AAAA,AAAM,AAACpsD,AAAMsD;AACrDwvC,AAAc,AAAA,AAAQsZ;AACtBkD,AAAc,AAACrF,AAAanX,AAAckW;AAC1CuG,AAAS,AAAA,AAAA,AAAI,AAACprD,AAAOmrD,AAETA,AAAclsD;AAC1BmsD,AAAS,AAAC7B,AAAW7kD,AAAiBumD,AAASF;AAC/CnzD,AAAE,AAAA,AAAC8G,AAAoB0sD;AAEvBC,AAAU,AAACnF,AAAUC;AACrBmF,AAAe,AAACjF,AAAiBF;AACjCoF,AAAgB,AAACtrD,AAAO,AAAA,AAAAurD,AAACnvD;AAAD,AAAM,AAAAmvD,AAAC1F,AAAejB;AAAY,AAAC3kD,AAAKorD,AACxC,AAAC7uD,AAAK6uD;AAC9BG,AAAU,AAACrF,AAAUD;AACrBuF,AAAkB,AAAC3E,AAAiBZ;AACpCwF,AAAmB,AAAC1rD,AAAO,AAAA,AAAA2rD,AAACvvD;AAAD,AAAM,AAAAuvD,AAAC9F,AAAejB;AAAY,AAAC3kD,AAAKwrD,AACxC,AAACjvD,AAAKivD;AACjC5B,AAAc,AAAC5pD,AAAKqrD;AACpBM,AAAc,AAAC5rD,AAAO6pD,AACA,AAACztD,AAAI,AAAKyvD,AAAEC;AAAP,AACG,AAACtN,AAAiBqN,AAAEC;AACvB,AAAA,AAAAC,AAAC3vD;AAAD,AAAM,AAAA2vD,AAAC5zD,AAAImzD;AAAmBzB,AAC9B,AAAA,AAAAmC,AAAC5vD;AAAD,AAAM,AAAA4vD,AAAC7zD,AAAIuzD;AAAsB7B;AAC5DoC,AAAY,AAACjsD,AAAO6pD,AACA,AAACztD,AAAI,AAAKyvD,AAAEC;AAAP,AAAU,AAACtN,AAAiBqN,AAAEC;AAC9B,AAAA,AAAAI,AAAC9vD;AAAD,AAAM,AAAA8vD,AAAC/zD,AAAI0yD;AAAWhB,AACtB,AAAA,AAAAsC,AAAC/vD;AAAD,AAAM,AAAA+vD,AAACh0D,AAAIyzD;AAAiB/B;AAErDV,AAAW,AAAC7B,AAAUpB;AACtBkG,AAAgB,AAACvE,AAAU3B,AAAYtB;AACvCyH,AAAI,AAACpD,AAAOgD,AAAY9C,AAAWgC,AAASvG;AA3ElD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA6EYiG,AAEQL,AACR,AAAA,AAACn5B,AAAQ,AAACj1B,AAAIurD,AAAayE,AAC7BH,AACFI,AACI,AAAA,AAAU,AAAA,AAAOnG,AAChBoF,AACUlB,AACAE,AACCJ,AACH,AAAC1L,AACA0L,AACA,AAAC1L,AACA4L,AACAE,AACToB,AACF7B,AACAsB,AACmBH,AACDF,AAClBc,AACIzC;;AAIlB,AAAA,AAAMmD,AACHC,AAAQ3kD,AAAa4kD,AAASC,AAAgBC;AADjD,AAEE,AAAMhwD,AAAG,AAAA,AAAK8vD;AACRG,AAAG,AAAA,AAAUH;AACbnyC,AAAW,AAAA,AAAUkyC;AACrB3K,AAAO,AAAChmD,AAAM,AAAA,AAAS2wD;AACvB1K,AAAO,AAACp9B,AAAO,AAAA,AAAS8nC;AACxBjZ,AAAO,AAAQ52C;AACfkwD,AAAa,AAAelwD;AANlC,AAOMmwD;AAPN,AAQMC;AARN,AASMC;AACA5F,AAAU,AAACz8C,AAAU,AAAYhO,AAAIqwD;AACrC3F,AAAS,AAAC18C,AAAU,AAAWiiD,AAAIG;AAInCE,AAAc,AAACzvD,AAAOC,AAAM,AAACpB,AAAI6wD,AAA8B,AAAQN;AACvEO,AAAa,AAAA,AAAAC,AAAC5vD;AAAD,AAAS,AAAK,AAAC6D,AAAE,AAAC/C,AAA0Bgc,AAC3B,AAAChc,AAA0B,AAAA,AAAA8uD,AAC9B,AAAC/rD,AAAE,AAAC/C,AAA0BuJ,AAC3B,AAACvJ,AAA0B,AAAA,AAAA8uD,AAC9B,AACC,AAAC/rD,AAAE,AAAC/C,AAA0B,AAAA,AAAA8uD,AAC3B,AAAC9uD,AAA0B,AAAA,AAAA8uD,AAC9B,AAACje,AACAn4C,AACA,AAACsH,AAA0B,AAAA,AAAA8uD;AACnCH;AAErBI,AAAO,AAAI,AAACrtD,AAAOmtD,AACV,AAAAvvD,AAAA,AACA,AAAC6G,AAAOC,AAAiB,AAAA,AAACrI,AAAY8wD;AAE/CG,AAAU,AAAC9vD,AAAOC,AAAM,AAAA,AAAA8vD,AAAClxD;AAAD,AAAM,AAAAkxD,AAACC,AAA4Bd,AAAgBC;AAC9C,AAAQC;AACrCa,AAAS,AAAA,AAAAC,AAAClwD;AAAD,AAAS,AAAC6D,AAAE,AAAC/C,AAA0Bgc,AAC3B,AAAChc,AAA0B,AAAA,AAAAovD;AAC/BJ;AACjBK,AAAW,AAAClpD,AAAOC,AAAiB,AAAA,AAACrI,AAAaoxD;AAClDG,AAAW,AAACnpD,AAAOC,AAAiB,AAAA,AAACrI,AAAaoxD;AAtCxD,AAuCE,AAAI,AAAK,AAAA,AAAGE,AACH,AAAA,AAAGC,AACH,AAAA,AAAGP;AAFZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGiBR,AACLtZ,AACE8Z,AACAjG,AACDC,AACIxF,AAAO8L,AACT7L,AAAO8L;;AATtB;;;AA0BJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAML,AAAKC,AAAe,AAACzvD,AAAI,AAAC+gD,AAAKyO,AAAoBz3D;AAEnD,AAAA,AAAM23D,AACHvB,AAAQ3kD,AAAa4kD,AAASC,AAAgBC;AADjD,AAEE,AAAMhwD,AAAG,AAAA,AAAK8vD;AACRG,AAAG,AAAA,AAAUH;AACbnyC,AAAW,AAAA,AAAUkyC;AACrB3K,AAAO,AAAChmD,AAAM,AAAA,AAAS2wD;AACvB1K,AAAO,AAACp9B,AAAO,AAAA,AAAS8nC;AACxBjZ,AAAO,AAAQ52C;AACfkwD,AAAa,AAAelwD;AANlC,AAOMmwD;AAPN,AAQMC;AARN,AASMC;AACA5F,AAAU,AAACz8C,AAAU,AAAYhO,AAAIqwD;AACrC3F,AAAS,AAAC18C,AAAU,AAAWiiD,AAAIG;AAGnCE,AAAc,AAACzvD,AAAOC,AAAM,AAAA,AAAAuwD,AAAC3xD;AAAD,AAAM,AAAA2xD,AAACd,AAAgCJ;AAAe,AAAQF;AAC1FO,AAAa,AAAA,AAAAc,AAACzwD;AAAD,AAAS,AAAK,AAAC6D,AAAE,AAAC/C,AAA0Bgc,AAC3B,AAAChc,AAA0B,AAAA,AAAA2vD,AAC9B,AAAC9e,AAAU2e,AACA,AAACxvD,AAA0B,AAAA,AAAA2vD,AACtC,AAAC5sD,AAAE,AAAC/C,AAA0BuJ,AAC3B,AAACvJ,AAA0B,AAAA,AAAA2vD;AACpChB;AACrBI,AAAO,AAAI,AAACrtD,AAAOmtD,AACV,AAAAvvD,AAAA,AACA,AAAC6G,AAAOC,AAAiB,AAAA,AAACrI,AAAY8wD;AAE/Ce,AAAU,AAAC1wD,AAAOC,AAAM,AAAA,AAAA0wD,AAAC9xD;AAAD,AAAM,AAAA8xD,AAACC,AAA4B1B,AAAgBC;AAAiB,AAAQC;AAEpGyB,AAAS,AAAA,AAAAC,AAAC9wD;AAAD,AAAS,AAAC6D,AAAE,AAAC/C,AAA0Bgc,AAC3B,AAAChc,AAA0B,AAAA,AAAAgwD;AAC/BJ;AACjBP,AAAW,AAAClpD,AAAOC,AAAiB,AAAA,AAACrI,AAAagyD;AAClDT,AAAW,AAACnpD,AAAOC,AAAiB,AAAA,AAACrI,AAAagyD;AAhCxD,AAiCE,AAAI,AAAK,AAAA,AAAGV,AACH,AAAA,AAAGC,AACH,AAAA,AAAGP;AAFZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMiBR,AACLtZ,AACE8Z,AACAjG,AACDC,AACCxF,AAAO8L,AACP7L,AAAO8L;;AAZrB;;;AAuCJ,AAAA,AAAMY,AACHhC,AAAQ3kD;AADX,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAo1D;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAA,AAE8BpC;AAF9BqC,AAAA,AAAA,AAGsCrC;AAHtCmC,AAAA,AAAAE,AAGuBhzD;AAHvBizD,AAAA,AAAA,AAIuCtC;AAJvCuC,AAAA,AAAAD,AAIuBpqC;AAJvBsqC,AAAA,AAAAL,AAK4BjkD;AAL5B+jD,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAL;;AAAA,AAAAK,AAAA,AAAAN;;AAAAM;;AAAA,AAAA,AAAAh1D,AAAAw0D,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAU,AAAA,AAAAJ,AAM4BrkD;AAN5B+jD,AAAA,AAAAW,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAn1D,AAAAw0D,AAAA,AAAAU;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAV,AAO2B+B,AACAt6D,AAAsBwR;AARjD4mD,AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAt1D,AAAAw0D,AAAA,AAAAa;;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAiB,AAAA,AAAAd,AAEOpY;AAFPmY,AAGOtT;AAHP0T,AAIO0B;AAJPvB,AAKOxC;AALP2C,AAMO1C;AANP6C,AAOOkB;AAPP,AAAA,AAAAf;AAAA,AAW8B,AAAAA;;;AAX9BC,AAAA,AAAAF,AAAAF,AAWyBnzD;AAXzBozD,AAAA,AAAAG,AAWoBvxD;AAXpBwxD,AAAA,AAAAJ,AAYsBqB;AAZtBrC,AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAAN;;AAAA,AAAAM,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAA71D,AAAAw0D,AAAA,AAAAoB;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAsB,AAAA,AAAAtB,AAAA;AAAAuB,AAAA,AAAApB,AAEOpY;AAFPmY,AAGOtT;AAHP0T,AAIO0B;AAJPvB,AAKOxC;AALP2C,AAMO1C;AANP6C,AAOOkB;AAPPjB,AAWOmB;AAXPb,AAYOc;AAZP,AAAA,AAAAZ;AAAA,AAamB,AAAAA,AAAClC,AAAcvB,AAAQ3kD,AAAe6kD,AAAgBC;;;AAbzEuD,AAAA,AAAAF,AAAAD,AAac1zD;AAbd8zD,AAAA,AAAAD,AAeK1yD,AAAOC;AAfZgxD,AAAAA;AAAA,AAAA,AAAAvzD,AAAAuzD,AAAA0B;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAh1D;;AAAA,AAAAg1D,AAAA,AAAA;;AAAAA;;AAAA3B;;AAAA,AAAA,AAAApzD,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAo1D;AAAA,AAAA,AAAA,AAAAlzD,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA60D;AAAA,AAAA,AAAAC,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAA90D;;AAAA80D;AAAA,AAAA,AAAA30D,AAAA,AAAA8yD,AAAA;AAAA,AAAA8B,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA,AAAA10D,AAAA,AAAA4yD,AAAA;;AAAA8B;AAAA,AAAA/0D;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAozD;;;;AAAApzD;;;;;AAAAozD;;;;;AAAAA;;;;;;;;;AAAA3yD,AAAA,AAAA00D,AAAA,AAAAp3D;AAAA,AAAA,AAAAo3D,AAAAx0D,AAAA,AAAA/C;;AAAAu3D;;AAAA,AAAA,AAAAv0D,AAAAH;;;AAAA7C;;AAiBF,AAAA,AAAM83D,AACHvE,AAAQ3kD;AADX,AAEE,AAAA5O,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA23D;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAA,AAE8B3E;AAF9B4E,AAAA,AAAA,AAGsC5E;AAHtC0E,AAAA,AAAAE,AAGuBv1D;AAHvBw1D,AAAA,AAAA,AAIuC7E;AAJvC8E,AAAA,AAAAD,AAIuB3sC;AAJvB6sC,AAAA,AAAAL,AAK4BxmD;AAL5BsmD,AAAA,AAAAQ,AAAAR;AAAA,AAAA,AAAAQ,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAN;;AAAA,AAAAM,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAv3D,AAAA+2D,AAAA,AAAAO;;AAAA,AAAA,AAAAN,AAAA;AAAA,AAAAK,AAAA,AAAAN,AAAA;AAAAS,AAAA,AAAAT,AAAA;AAAAU,AAAA,AAAAJ,AAM4B5mD;AAN5BsmD,AAAA,AAAAW,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA13D,AAAA+2D,AAAA,AAAAU;;AAAA,AAAA,AAAAT,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAV,AAQ2B8B,AACA58D,AAAsBwR;AATjDmpD,AAAA,AAAAc,AAAAd;AAAA,AAAA,AAAAc,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA73D,AAAA+2D,AAAA,AAAAa;;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAiB,AAAA,AAAAd,AAEO3a;AAFP0a,AAGO7V;AAHPiW,AAIOb;AAJPgB,AAKO/E;AALPkF,AAMOjF;AANPoF,AAQOiB;AARP,AAAA,AAAAd;AAAA,AAY8B,AAAAA;;;AAZ9BC,AAAA,AAAAF,AAAAF,AAYyB11D;AAZzB21D,AAAA,AAAAG,AAYoB9zD;AAZpB+zD,AAAA,AAAAJ,AAasBlB;AAbtBE,AAAA,AAAAqB,AAAArB;AAAA,AAAA,AAAAqB,AAAA,AAAAN;;AAAA,AAAAM,AAAA,AAAAL;;AAAAK;;AAAA,AAAA,AAAAp4D,AAAA+2D,AAAA,AAAAoB;;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAAQ,AAAA,AAAAT,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAe,AAAA,AAAAf,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAgB,AAAA,AAAAhB,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAsB,AAAA,AAAAtB,AAAA;AAAAuB,AAAA,AAAApB,AAEO3a;AAFP0a,AAGO7V;AAHPiW,AAIOb;AAJPgB,AAKO/E;AALPkF,AAMOjF;AANPoF,AAQOiB;AARPhB,AAYOkB;AAZPZ,AAaOa;AAbP,AAAA,AAAAX;AAAA,AAcmB,AAAAA,AAACjG,AAAcC,AAAQ3kD,AAAe6kD,AAAgBC;;;AAdzE8F,AAAA,AAAAF,AAAAD,AAccj2D;AAddq2D,AAAA,AAAAD,AAgBKj1D,AAAOC;AAhBZuzD,AAAAA;AAAA,AAAA,AAAA91D,AAAA81D,AAAA0B;;AAAA;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAv3D;;AAAA,AAAAu3D,AAAA,AAAA;;AAAAA;;AAAA3B;;AAAA,AAAA,AAAA31D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA23D;AAAA,AAAA,AAAA,AAAAz1D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAo3D;AAAA,AAAA,AAAAC,AAAA7B;AAAA,AAAA,AAAA6B,AAAA,AAAAr3D;;AAAAq3D;AAAA,AAAA,AAAAl3D,AAAA,AAAAq1D,AAAA;AAAA,AAAA8B,AAAA9B;AAAA,AAAA,AAAA8B,AAAA,AAAA,AAAAj3D,AAAA,AAAAm1D,AAAA;;AAAA8B;AAAA,AAAAt3D;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA21D;;;;AAAA31D;;;;;AAAA21D;;;;;AAAAA;;;;;;;;;AAAAl1D,AAAA,AAAAi3D,AAAA,AAAA35D;AAAA,AAAA,AAAA25D,AAAA/2D,AAAA,AAAA/C;;AAAA85D;;AAAA,AAAA,AAAA92D,AAAAH;;;AAAA7C;;AAmBF,AAAA,AAAMm6D,AACHvrD,AAAawrD;AADhB,AAEI,AAAM7O,AACA,AAACnzB,AAAK,AAAKhF;AAAL,AAAQ,AAAApzB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAi6D;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAennC;AAAfonC,AAAA,AAAAD;AAAAE,AAAA,AACUlF,AAAcniC,AAAExkB;AAD1ByrD,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA15D,AAAAq5D,AAAA,AAAAI;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAD;AAAAE,AAAA,AAAAtoC,AAAAioC,AAAAI;AAAAP,AAAAA;AAAA,AAAA,AAAAp4D,AAAAo4D,AAAAQ;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA34D;;AAAA,AAAA24D,AAAA,AAAA;;AAAAA;;AAAAT;;AAAA,AAAA,AAAAj4D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAi6D;AAAA,AAAA,AAAA,AAAA/3D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAw4D;AAAA,AAAA,AAAAC,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAAz4D;;AAAAy4D;AAAA,AAAA,AAAAt4D,AAAA,AAAA23D,AAAA;AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAA,AAAAr4D,AAAA,AAAAy3D,AAAA;;AAAAY;AAAA,AAAA14D;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAi4D;;;;AAAAj4D;;;;;AAAAi4D;;;;;AAAAA;;;;;;;;;AAAAx3D,AAAA,AAAAq4D,AAAA,AAAA/6D;AAAA,AAAA,AAAA+6D,AAAAn4D,AAAA,AAAA/C;;AAAAk7D;;AAAA,AAAA,AAAAl4D,AAAAH;;;AAAA7C;AAETo6D;AAHX,AAIO,AAACplC,AAAsBu2B,AACvB,AAAA,AAACt2B,AAAuBC;;AAEnC,AAAA,AAAMimC,AACHvsD,AAAawrD;AADhB,AAEE,AAAM7O,AACA,AAACnzB,AAAK,AAAKhF;AAAL,AAAQ,AAAApzB,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAg7D;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAeloC;AAAfmoC,AAAA,AAAAD;AAAAE,AAAA,AACU1D,AAAc1kC,AAAExkB;AAD1BwsD,AAAA,AAAAK,AAAAL;AAAA,AAAA,AAAAK,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAz6D,AAAAo6D,AAAA,AAAAI;;AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAM,AAAA,AAAAN,AAAA;AAAAO,AAAA,AAAAD;AAAAE,AAAA,AAAArpC,AAAAgpC,AAAAI;AAAAP,AAAAA;AAAA,AAAA,AAAAn5D,AAAAm5D,AAAAQ;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA15D;;AAAA,AAAA05D,AAAA,AAAA;;AAAAA;;AAAAT;;AAAA,AAAA,AAAAh5D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAg7D;AAAA,AAAA,AAAA,AAAA94D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAu5D;AAAA,AAAA,AAAAC,AAAAX;AAAA,AAAA,AAAAW,AAAA,AAAAx5D;;AAAAw5D;AAAA,AAAA,AAAAr5D,AAAA,AAAA04D,AAAA;AAAA,AAAAY,AAAAZ;AAAA,AAAA,AAAAY,AAAA,AAAA,AAAAp5D,AAAA,AAAAw4D,AAAA;;AAAAY;AAAA,AAAAz5D;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAg5D;;;;AAAAh5D;;;;;AAAAg5D;;;;;AAAAA;;;;;;;;;AAAAv4D,AAAA,AAAAo5D,AAAA,AAAA97D;AAAA,AAAA,AAAA87D,AAAAl5D,AAAA,AAAA/C;;AAAAi8D;;AAAA,AAAA,AAAAj5D,AAAAH;;;AAAA7C;AAERo6D;AAHZ,AAIO,AAACplC,AAAsBu2B,AACvB,AAAA,AAACt2B,AAAuBC;;AAMjC,AAAA,AAAMgnC,AACH9S,AAAUx6C;AADb,AAEE,AAAMutD,AAAgB,AAAA,AAAC/4D,AAAW,AAAC+lD,AAAkBC;AAC/CgT,AAAa,AAACh5D,AAAI,AAAK8H;AAAL,AAAQ,AAAAlL,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAi8D;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAASO,AAAkC1/D,AAAS8N,AAAE0D;AAAtDytD,AAAAA;AAAA,AAAA,AAAAr7D,AAAAq7D,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAA,AAAAA;AAAA,AAAA,AAAAp6D,AAAAo6D,AAAAG;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAt6D;;AAAA,AAAAs6D,AAAA,AAAA;;AAAAA;;AAAAJ;;AAAA,AAAA,AAAAj6D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAi8D;AAAA,AAAA,AAAA,AAAA/5D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAm6D;AAAA,AAAA,AAAAC,AAAAN;AAAA,AAAA,AAAAM,AAAA,AAAAp6D;;AAAAo6D;AAAA,AAAA,AAAAj6D,AAAA,AAAA25D,AAAA;AAAA,AAAAO,AAAAP;AAAA,AAAA,AAAAO,AAAA,AAAA,AAAAh6D,AAAA,AAAAy5D,AAAA;;AAAAO;AAAA,AAAAr6D;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAi6D;;;;AAAAj6D;;;;;AAAAi6D;;;;;AAAAA;;;;;;;;;AAAAx5D,AAAA,AAAAg6D,AAAA,AAAA18D;AAAA,AAAA,AAAA08D,AAAA95D,AAAA,AAAA/C;;AAAA68D;;AAAA,AAAA,AAAA75D,AAAAH;;;AAAA7C;AACRm8D;AAFxB,AAKO,AAAA,AAAAY,AAACC;AAAD,AAA0B,AAAA,AAAA,AAAAD,AAACj4D;AAF3B,AAACkwB,AAAsBonC,AACvB,AAAA,AAACnnC,AAAuBn2B;;AAOjC,AAAA,AAAMm+D;AAAN,AAAA;;AAGA,AAAA,AAAMC,AACHd,AAAaxtD;AADhB,AAEE,AAAMuuD,AAAoB,AAAC/5D,AACAR,AACA,AAACY,AAAK,AAAA,AAAA45D,AAAC9T;AAAD,AACE,AAAA8T,AAAA,AAAA,AAAA,AAACjO;AACFiN;AAC5BvQ,AAAU,AAACzoD,AAAI,AAAK8H;AAAL,AAAQ,AAAAlL,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAi9D;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAAC,AAAA,AACUhnB,AACAtrC,AAAE0D;AAFZyuD,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAz8D,AAAAq8D,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAC,AAAA,AAAAF,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAA,AAGgBzyD;AAHhB0yD,AAAA,AAAA,AAAA,AAAAC;AAAA,AAMO,AAAK,AAACz1D,AAAE,AAAA,AAAM8C,AAAG,AAAA,AAAA2yD,AACZ,AAACz1D,AAAE,AAAA,AAAQ8C,AAAG,AAAA,AAAA2yD;;;AAP1BC,AAAA,AAAAF,AAKMr5D,AAGA63D;AARN2B,AAAA,AAAA,AASoB7yD;AATpB8yD,AAAA,AAAAN,AAAAC,AAAAG,AAAAC;AAAAE,AAAA,AAAA1rC,AAAAgrC,AAAAS;AAAAX,AAAAA;AAAA,AAAA,AAAAp7D,AAAAo7D,AAAAY;;AAAA;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA/7D;;AAAA,AAAA+7D,AAAA,AAAA;;AAAAA;;AAAAb;;AAAA,AAAA,AAAAj7D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAi9D;AAAA,AAAA,AAAA,AAAA/6D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAA47D;AAAA,AAAA,AAAAC,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAA77D;;AAAA67D;AAAA,AAAA,AAAA17D,AAAA,AAAA26D,AAAA;AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAAz7D,AAAA,AAAAy6D,AAAA;;AAAAgB;AAAA,AAAA97D;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAi7D;;;;AAAAj7D;;;;;AAAAi7D;;;;;AAAAA;;;;;;;;;AAAAx6D,AAAA,AAAAy7D,AAAA,AAAAn+D;AAAA,AAAA,AAAAm+D,AAAAv7D,AAAA,AAAA/C;;AAAAs+D;;AAAA,AAAA,AAAAt7D,AAAAH;;;AAAA7C;AAURm9D;AAfrB,AAgBO,AAACnoC,AAAsB62B,AAEvB,AAAA,AAAC52B,AAAuBspC;;AAgBjC,AAAA,AAAMC,AACH5vD,AAAa6vD;AADhB,AAEE,AAAAz+D,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAs+D;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AAAuBzV,AAAkBsV;AAAzCI,AAAA,AACiC3C,AAAsBuC,AAAe7vD;AADtE8vD,AAAA,AAAAI,AAAAJ;AAAA,AAAA,AAAAI,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAA99D,AAAA09D,AAAA,AAAAG;;AAAA,AAAA,AAAAF,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAK,AAAA,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAE8B7B,AAAqCtuD;AAFnE8vD,AAAA,AAAAO,AAAAP;AAAA,AAAA,AAAAO,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAj+D,AAAA09D,AAAA,AAAAM;;AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAI,AAAA,AAAAL,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAQ,AAAA,AAAAR,AAAA;AAAAS,AAAA,AAAAP,AAAUgB;AAAVb,AACUc;AADVX,AAEUY;AAFV,AAAA,AAAAV;AAAA,AAGe,AAAA,AAACt6D,AAAO,AAAA,AAAiB,AAAA,AAAAs6D;;;AAHxCC,AAAA,AAAAH,AAAAN,AAIer5D;AAJf+5D,AAAA,AAAAH,AAAAE,AAGO96D;AAHPm6D,AAAAA;AAAA,AAAA,AAAAz8D,AAAAy8D,AAAAY;;AAAA;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAp9D;;AAAA,AAAAo9D,AAAA,AAAA;;AAAAA;;AAAAb;;AAAA,AAAA,AAAAt8D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAAs+D;AAAA,AAAA,AAAA,AAAAp8D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAi9D;AAAA,AAAA,AAAAC,AAAAf;AAAA,AAAA,AAAAe,AAAA,AAAAl9D;;AAAAk9D;AAAA,AAAA,AAAA/8D,AAAA,AAAAg8D,AAAA;AAAA,AAAAgB,AAAAhB;AAAA,AAAA,AAAAgB,AAAA,AAAA,AAAA98D,AAAA,AAAA87D,AAAA;;AAAAgB;AAAA,AAAAn9D;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAAs8D;;;;AAAAt8D;;;;;AAAAs8D;;;;;AAAAA;;;;;;;;;AAAA77D,AAAA,AAAA88D,AAAA,AAAAx/D;AAAA,AAAA,AAAAw/D,AAAA58D,AAAA,AAAA/C;;AAAA2/D;;AAAA,AAAA,AAAA38D,AAAAH;;;AAAA7C;;AAUF,AAAA,AAAM+/D,AACHC;AADH,AAEE,AAAC58D,AAAI,AAAA68D;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAn8D,AAAAo8D,AAAA,AAAA,AAAMC;AAAN,AAAAr8D,AAAAo8D,AAAA,AAAA,AAAQpd;AAAR,AAAY,AAAA,AAAA,AAAA,AAAA,AAACsd,AACA,AAACx9D,AAAMkgD,AAEPud,AACA,AAACpjB,AAAMqjB,AAAE,AAACl9D,AAAI,AAAA,AAAA,AAACyD,AAA2Bi8C,AAE1C,AAAC7F,AAAMqjB,AAAE,AAACl9D,AAAI,AAAA,AAAA,AAACyD,AAA2Bi8C;AACvD,AAAA,AAACwG,AAAgB,AAAA,AAAAiX,AAACn9D;AAAD,AAAM,AAAAm9D,AAAA,AAACC;AAAeR;;AAG9C,AAAA,AAAMS,AACHT,AAAepX,AAAOC;AADzB,AAEE,AAAA,AAAA6X,AAACn8D;AAAD,AAAS,AAAK,AAAC6D,AAAEwgD,AAAO,AAAA,AAAgB,AAAA,AAAA8X,AAC1B,AAACt4D,AAAEygD,AAAO,AAAA,AAAgB,AAAA,AAAA6X;AAChCV;;AAEV,AAAA,AAAKW;AASL,AAAA,AAAKC;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAEL,AAAA,AAAKC;AACL,AAAA,AAAKC;AA2EL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAsBL,AAAA,AAAMC,AACHvW;AADH,AAEE,AAACxlD,AAAI,AAACgzB,AAAK/yB,AACA,AAACd,AAAOC,AACA,AAACpB,AAAI,AAAA,AAAA,AAACyD,AACD+jD;;AAE1B,AAAA,AAAMwW,AACHvV;AADH,AAEE,AAACzmD,AAAI,AAAChC,AAAIiC,AACA,AAACY,AAAO,AAACo7D,AAAK,AAAA,AAAA,AAACx6D,AAAkB,AAAA,AAAA,AAACA,AAC1B,AAAA,AAACzD,AAAUyoD;;AAI/B,AAAA,AAAMyV,AACHC,AAAYrX;AADf,AAEE,AAAMsX,AAAE,AAACx6D,AAAO,AAAA,AAAC5D,AAAam+D,AACd,AAACn+D,AAAI,AAAKq+D;AAAL,AACE,AAAMC,AACA,AAACviE,AAAI+qD,AAAa,AAAA,AAAUuX;AADlC,AAEE,AAAA,AAAA,AAAA,AAACppC,AAAKopC,AAAa,AAACz6D,AAAO,AAAC5D,AAAIu+D,AAAK,AAAC16D,AAAKy6D,AAChB,AAACl+D,AAAKk+D;AACrCH;AANrB,AAOEC;;AAuCJ,AAAA,AAAMI,AACH/7D;AADH,AAEE,AAAA,AAAA,AAAU,AAAA,AAAgB,AAAA,AAAMA,AAE3B,AAAA,AAAgB,AAAA,AAAMA;;AAE7B,AAAA,AAAM3C,AACH2+D;AADH,AAEE,AAAA7hE,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA0hE;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAC,AAAA,AACqBmI,AAA0BtI;AAD/CC,AAAAA;AAAA,AAAA,AAAA9gE,AAAA8gE,AAAA,AAAAE;;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAA/gE;AAAAghE,AAAA,AAAA;AAAAC,AAAA,AAAAjhE,AAAA,AAAA,AAAA,AAAA+gE,AAAAC,AAAA;AAAAE,AAAA,AAAA,AAGmER;AAHnES,AAAA,AAAAF,AAAAC,AAEWzjE,AAAMjB,AAAUkB,AAAmB0/D;AAF9CgE,AAAA,AAAAN,AAI6B1mB;AAJ7BumB,AAAA,AAAAU,AAAAV;AAAA,AAAA,AAAAU,AAAA,AAAAP;;AAAA,AAAAO,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAxhE,AAAA8gE,AAAA,AAAAS;;AAAA,AAAA,AAAAR,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAe,AAAA,AAAA,AAAAF;AAAAD,AAAA,AAAAG,AAKoB1Z;AALpB2Z,AAAA,AAAAJ,AAMgDt/D,AAAIw+D;AANpDgB,AAAA,AAAA,AAAAE,AAMsBx8D;AANtBy8D,AAAA,AAAA5hE;AAAA6hE,AAAA,AAAAN,AAU6B57D;AAV7Bm8D,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAJ,AAQ6Bf;AAR7BqB,AAAA,AAAA,AAAAD;AAAAR,AAAA,AAAAthE,AAAA,AAAA,AAAA,AAAA4hE,AAAAG,AAAA;AAAAC,AAAA,AAAAhiE;AAAAiiE,AAAA,AAAA;AAAAC,AAAA,AAAAliE,AAAA,AAAA,AAAA,AAAAgiE,AAAAC,AAAA;AAAAE,AAAA,AAAAD,AAAAZ,AAcW7jE,AAAMjB,AAAUkB,AAAmB0/D;AAd9CgF,AAAA,AAAApiE;AAAAqiE,AAAA,AAAA;AAAAC,AAAA,AAAAtiE,AAAA,AAAA,AAAA,AAAAoiE,AAAAC,AAAA;AAAAE,AAAA,AAAAD,AAAA,AAeW7kE,AAAMjB,AAAUkB,AAAmB0/D;AAf9CoF,AAAA,AAAA,AAAAhB;AAAAiB,AAAA,AAAA3B,AAAA0B,AAgBoBnF;AAhBpBsD,AAAA,AAAA+B,AAAA/B;AAAA,AAAA,AAAA+B,AAAA,AAAApB;;AAAA,AAAAoB,AAAA,AAAAP;;AAAA,AAAAO,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAnB;;AAAA,AAAAmB,AAAA,AAAAlB;;AAAA,AAAAkB,AAAA,AAAAjB;;AAAAiB;;AAAA,AAAA,AAAA7iE,AAAA8gE,AAAA,AAAA8B;;AAAA,AAAA,AAAA7B,AAAA;AAAA,AAAAU,AAAA,AAAAX,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAA4B,AAAA,AAAA5B,AAAA;AAAAY,AAAA,AAAAZ,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAc,AAAA,AAAAd,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAAiC,AAAA,AAAA,AAAAD,AAkB8D1gE;AAlB9D4gE,AAAA,AAAAD,AAkBgDx/D,AAAOC;AAlBvDy/D,AAAA,AAAAD,AAkBsC59D;AAlBtC89D,AAAA,AAAAD,AAkB+Bn9D;AAlB/Bq9D,AAAA,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAnC,AACQ1jE;AADRmlE,AAEQ/kE;AAFRgkE,AAIQhX;AAJR+W,AAKQ0H;AALRxH,AAMQyH;AANR5H,AAOQ6H;AAPRxG,AAgBQjvB;AAhBRsvB,AAiBQoG;AAjBR,AAAA,AAAAlG;AAAA,AAoB+B,AAAA,AAAG,AAACv9D,AAAM,AAAA,AAAAu9D;;;AApBzCC,AAAA,AAAAF,AAAAN,AAoBuBv/D;AApBvBggE,AAAA,AAAA,AAAAD,AAsB8DlhE;AAtB9DohE,AAAA,AAAAD,AAsBgDhgE,AAAOC;AAtBvDigE,AAAA,AAAAD,AAsBsCp+D;AAtBtCs+D,AAAA,AAAAD,AAsB+B39D;AAtB/B69D,AAAA,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAzjE;AAAA0jE,AAAA,AAAA;AAAAC,AAAA,AAAA3jE,AAAA,AAAA,AAAA,AAAAyjE,AAAAC,AAAA;AAAAE,AAAA,AAAAD,AAAAX,AAwBWvlE,AAAMjB,AAAUkB,AAAmB0/D;AAxB9CyG,AAAA,AAAAtC,AAKQ0H;AALR3H,AAOQ6H;AAPR3H,AAIQhX;AAJRiX,AAMQyH;AANRlG,AAiBQoG;AAjBRzG,AAgBQjvB;AAhBRyvB,AAoBQkG;AApBR7F,AAqBQ8F;AArBR1F,AAEQpmE;AAFRsjE,AACQ1jE;AADR,AAAA,AAAA0mE;AAAA,AA2Bc,AAAAA,AAAA,AAAA,AAAA,AAACyF;;;AA3BfxF,AAAA,AAAA,AAAA,AA4BsB7D;AA5BtB8D,AAAA,AAAA,AAAAxC;AAAAyC,AAAA,AAAA,AAAAD,AA6BsB/hE;AA7BtBiiE,AAAA,AAAAH,AAAAE,AA4Bcn/D;AA5Bdq/D,AAAA,AAAAN,AAAAK,AA2BSjiE;AA3BTmiE,AAAA,AAAA,AAAA5C;AAAA6C,AAAA,AAAAD,AA+BiBnE;AA/BjBqE,AAAA,AAAA3B,AAgCiB3C;AAhCjBuE,AAAA,AAAAvkE;AAAAwkE,AAAA,AAAA;AAAAC,AAAA,AAAAzkE,AAAA,AAAA,AAAA,AAAAukE,AAAAC,AAAA;AAAAE,AAAA,AAAAL,AAAAC,AAAAG,AAmCyBrgE;AAnCzBugE,AAAA,AAAAD,AAmCoBzgE;AAnCpB2gE,AAAA,AAAAN,AAAAG,AAoCiDrgE;AApCjDygE,AAAA,AAAAD,AAoC0B4E;AApC1B7I,AAAA,AAAAmE,AAAAnE;AAAA,AAAA,AAAAmE,AAAA,AAAAnC;;AAAA,AAAAmC,AAAA,AAAAH;;AAAA,AAAAG,AAAA,AAAAX;;AAAAW;;AAAA,AAAA,AAAAjlE,AAAA8gE,AAAA,AAAAkE;;AAAA,AAAA,AAAAjE,AAAA;AAAA,AAAA+D,AAAA,AAAAhE,AAAA;AAAAwD,AAAA,AAAAxD,AAAA;AAAAoE,AAAA,AAAApE,AAAA;AAAAqE,AAAA,AAAAb,AAAAY,AAqC8B3gE;AArC9B6gE,AAAA,AAAAD,AAqCyB/gE;AArCzBihE,AAAA,AAAAllE;AAAAmlE,AAAA,AAAA;AAAAC,AAAA,AAAAplE,AAAA,AAAA,AAAA,AAAAklE,AAAAC,AAAA;AAAAE,AAAA,AAAArlE;AAAAslE,AAAA,AAAA;AAAAC,AAAA,AAAAvlE,AAAA,AAAA,AAAA,AAAAqlE,AAAAC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG,AAsCW9nE,AAAMjB,AAAUkB,AAAmBC;AAtC9C8nE,AAAA,AAAAd,AAuC0B8E;AAvC1B9I,AAAA,AAAA+E,AAAA/E;AAAA,AAAA,AAAA+E,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAAT;;AAAAS;;AAAA,AAAA,AAAA7lE,AAAA8gE,AAAA,AAAA8E;;AAAA,AAAA,AAAA7E,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAgF,AAAA,AAAAhF,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAiF,AAAA,AAAAjF,AAAA;AAAAkF,AAAA,AAAA,AAAArE;AAAAmE,AAAA,AAAAE,AAwCuB5jE,AAAIwmD;AAxC3Bqd,AAAA,AAAA9lE;AAAA+lE,AAAA,AAAA;AAAAC,AAAA,AAAAhmE,AAAA,AAAA,AAAA,AAAA8lE,AAAAC,AAAA;AAAAE,AAAA,AAAAjmE;AAAAkmE,AAAA,AAAA;AAAAC,AAAA,AAAAnmE,AAAA,AAAA,AAAA,AAAAimE,AAAAC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG,AAyCW1oE,AAAMjB,AAAUkB,AAAmBC;AAzC9C0oE,AAAA,AAAAvF,AAAA6E,AA0C4B3M;AA1C5B2H,AAAA,AAAA2F,AAAA3F;AAAA,AAAA,AAAA2F,AAAA,AAAAV;;AAAA,AAAAU,AAAA,AAAAX;;AAAA,AAAAW,AAAA,AAAAF;;AAAAE;;AAAA,AAAA,AAAAzmE,AAAA8gE,AAAA,AAAA0F;;AAAA,AAAA,AAAAzF,AAAA;AAAA,AAAAE,AAAA,AAAAH,AAAA;AAAAgF,AAAA,AAAAhF,AAAA;AAAA4F,AAAA,AAAA5F,AAAA;AAAA4F,AAAA,AAAA5F,AAAA;AAAA6F,AAAA,AAAAxmE;AAAAymE,AAAA,AAAA;AAAAC,AAAA,AAAA1mE,AAAA,AAAA,AAAA,AAAAwmE,AAAAC,AAAA;AAAAE,AAAA,AAAA3mE;AAAA4mE,AAAA,AAAAL,AA4CsDlkE;AA5CtDwkE,AAAA,AAAAD,AA4CwC9qB,AAAMn+C;AA5C9CmpE,AAAA,AAAAD,AA4CiClhE;AA5CjCohE,AAAA,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAD;AAAAE,AAAA,AAAAjnE,AAAA,AAAA,AAAA,AAAA2mE,AAAAK,AAAA;AAAAE,AAAA,AAAAR,AAAAO,AA2CWxpE,AAAMjB,AAAUkB,AAAmBC;AA3C9CwpE,AAAA,AAAAnnE;AAAAonE,AAAA,AAAA;AAAAC,AAAA,AAAArnE,AAAA,AAAA,AAAA,AAAAmnE,AAAAC,AAAA;AAAAE,AAAA,AAAAtnE;AAAAunE,AAAA,AAAA;AAAAC,AAAA,AAAAxnE,AAAA,AAAA,AAAA,AAAAsnE,AAAAC,AAAA;AAAAE,AAAA,AAAAJ,AAAAG,AA6CW/pE,AAAMjB,AAAUkB,AAAmBC;AA7C9C+pE,AAAA,AAAA5G,AAAA6E,AA8C2B3L;AA9C3B2G,AAAA,AAAAgH,AAAAhH;AAAA,AAAA,AAAAgH,AAAA,AAAAF;;AAAA,AAAAE,AAAA,AAAApB;;AAAA,AAAAoB,AAAA,AAAAT;;AAAAS;;AAAA,AAAA,AAAA9nE,AAAA8gE,AAAA,AAAA+G;;AAAA,AAAA,AAAA9G,AAAA;AAAA,AAAAgF,AAAA,AAAAjF,AAAA;AAAAgC,AAAA,AAAAhC,AAAA;AAAA4F,AAAA,AAAA5F,AAAA;AAAAa,AAAA,AAAAb,AAAA;AAAAsE,AAAA,AAAAtE,AAAA;AAAAiH,AAAA,AAAAjH,AAAA;AAAAkH,AAAA,AAAA7nE;AAAA8nE,AAAA,AAAA;AAAAC,AAAA,AAAA/nE,AAAA,AAAA,AAAA,AAAA6nE,AAAAC,AAAA;AAAAE,AAAA,AAAAhoE;AAAAioE,AAAA,AAAAL,AAgDsDvlE;AAhDtD6lE,AAAA,AAAAD,AAgDwCnsB,AAAMn+C;AAhD9CwqE,AAAA,AAAAD,AAgDiCviE;AAhDjCyiE,AAAA,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAD;AAAAE,AAAA,AAAAtoE,AAAA,AAAA,AAAA,AAAAgoE,AAAAK,AAAA;AAAAE,AAAA,AAAAR,AAAAO,AA+CW7qE,AAAMjB,AAAUkB,AAAmBC;AA/C9C6qE,AAAA,AAAAvD,AAAAW,AAiDqBzF;AAjDrBsI,AAAA,AAAAjH,AAAAmB,AAAA6F,AAAAjC,AAAAqB,AAkDerd;AAlDfoW,AAAA,AAAA+H,AAAA/H;AAAA,AAAA,AAAA+H,AAAA,AAAAH;;AAAAG;;AAAA,AAAA,AAAA5nE,AAAA6/D,AAAA8H;;AAAA;;;;;;;;;;AAAA,AAAA;;;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA3nE;;AAAA,AAAA2nE,AAAA,AAAA;;AAAAA;;AAAAhI;;AAAA,AAAA,AAAA1/D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA0hE;AAAA,AAAA,AAAA,AAAAx/D,AAAAD,AAAA;AAAA;;AAAAA;;;;AAAA,AAAAE,AAAAwnE;AAAA,AAAA,AAAAC,AAAAlI;AAAA,AAAA,AAAAkI,AAAA,AAAAznE;;AAAAynE;AAAA,AAAA,AAAAtnE,AAAA,AAAAo/D,AAAA;AAAA,AAAAmI,AAAAnI;AAAA,AAAA,AAAAmI,AAAA,AAAA,AAAArnE,AAAA,AAAAk/D,AAAA;;AAAAmI;AAAA,AAAA1nE;;;AAAA;;AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAAA0/D;;;;AAAA1/D;;;;;AAAA0/D;;;;;AAAAA;;;;;;;;;AAAAj/D,AAAA,AAAAqnE,AAAA,AAAA/pE;AAAA,AAAA,AAAA+pE,AAAAnnE,AAAA,AAAA/C;;AAAAkqE;;AAAA,AAAA,AAAAlnE,AAAAH;;;AAAA7C;;AA2DF,AAAA,AAAK6qE;AACL,AAAA,AAAKC;AAGL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAEL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAGL,AAAA,AAAKC;AAaL,AAAA,AAAKC;AAML,AAAA,AAAMC,AACHte,AAAOvuD;AADV,AAEE,AAAA,AACC,AAACoE,AACA,AAAA,AAAA0oE,AAAC/mE;AAAD,AAAS,AAAC6D,AAAE,AAAA,AAAAkjE,AAAYve;AAChB,AAACvpD,AAAK,AAAA,AAAahF;;AAE/B,AAAA,AAAM+sE,AACH1iB,AAAOyE,AAAO9uD;AADjB,AAEE,AAAA,AAAA;;AAEF,AAAA,AAAMgtE,AACHlnE;AADH,AAEE,AAAA,AAAS,AAAA,AAAOA;;AAElB,AAAA,AAAMmnE,AACHrhB,AAAQshB,AAAQltE;AADnB,AAEE,AAAMqqD,AAAO,AAACwiB,AAAgBjhB,AAAQ5rD;AAChC8uD,AAAO,AAAC+d,AAAgBK,AAAQltE;AADtC,AAEE,AAAA,AACC,AAAA,AACC,AAACoE,AACA,AAAA,AAAA+oE,AAACpnE;AAAD,AAAS,AAAK,AAAC2xC,AAAU,AAAC9wC,AAAI,AAAAumE,AAACH,AAAc3iB,AAChC,AAAC3S,AAAU,AAAC9wC,AAAI,AAAAumE,AAACH,AAAcle;AACpC,AAAC9pD,AAAK,AAAA,AAAMhF;;AAE3B,AAAA,AAAMotE,AACHxhB,AAAQshB,AAAQltE;AADnB,AAEE,AAAM6iB,AAAW,AAACoqD,AAAcrhB,AAAQshB,AAAQltE;AAAhD,AACE,AAACW,AAAI,AAAA,AAAMX,AAAO6iB;;AAGtB,AAAA,AAAMwqD,AACHzhB,AAAQshB,AAAQltE;AADnB,AAEE,AAAM8F,AAAG,AAACsnE,AAAYxhB,AAAQshB,AAAQltE;AAAtC,AACE,AAAC+E,AAAgBe,AAAG,AAAA,AAAa9F;;AAIrC,AAAA,AAAMstE,AACHC,AAAQvtE,AAAMwtE;AADjB,AAEE,AAAMx7C,AAAI,AAAA,AAAAy7C,AAAC7oE;AAAD,AAAM,AAAA6oE,AAAC1oE,AAAkB,AAAA,AAAa/E;AACjC,AAACgF,AAAK,AAAA,AAAMhF;AACrB0tE,AAAK,AAAIF,AACF,AAAA,AAAAG,AAAC5nE;AAAD,AAAS,AAACgH,AAAiB,AAAA5G,AAAA,AACA,AAAC6G,AAAOC,AAAiB,AAACjI,AAAK,AAAA,AAAA2oE;AAClD37C,AACRA;AACP47C,AAAQ,AAAA,AAAChpE,AAAS8oE;AAPxB,AAQE,AAAI,AAACnlE,AAAOqlE;AAAZ,AAAA,AAAA,AACS,AAAAznE,AAAA,AAAuB,AAAAA,AAAA;;AAC9B,AAACs4C,AAAM8O,AAAWtgD,AAAiB,AAACrI,AAAI2oE,AAAQK;;;AAGtD,AAAA,AAAA,AAAAvgE,AAAM7M;AAAN,AAAA,AAAAqtE,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAArtE,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAmF,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMnF,AACFR;AADJ,AAEG,AAAA,AAAC8tE,AAAe9tE;;;AAFnB,AAAA,AAAA,AAAMQ,AAGFR,AAAMwtE;AAHV,AAAA,AAAA,AAAA,AAAA,AAAA,AAIe,AAAA,AAACF,AAAyBttE,AAAMwtE,AAClC,AAAA,AAACF,AAAuBttE,AAAMwtE,AAC7B,AAAA,AAACF,AAAwBttE,AAAMwtE,AAC9B,AAAA,AAACF,AAAyBttE,AAAMwtE;;;AAP/C,AAAA,AAAA,AAAMhtE;;AAAN","names":["lpdashboard.core/debug","cljs.core/*print-length*","cljs.core/*print-level*","js/console.log","js/console.error","js/console.warn","lpdashboard.core/address0","lpdashboard.core/provider","lpdashboard.ethereum/provider","lpdashboard.core/state-example","lpdashboard.core/instruction","js/lpdashboard","js/lpdashboard.core","js/lpdashboard.core.app-state","lpdashboard.core/app-state","reagent.core.atom","lpdashboard.core/zap-out-address","lpdashboard.core/zap-out-address-old","lpdashboard.core/proxys-out","lpdashboard.core/separator-str","lpdashboard.core/signed-qty","n","s","lpdashboard.core/shorten-name","cljs.core.subs","lpdashboard.core/render-totals","account","state","lp-positions","currency","_","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/concat","all-totals","lpdashboard.core/compute-totals","open-totals","total-pnl-all","cljs.core.get","rewards-all","gas-cost-all","pool-pnl-all","total-pnl-open","rewards-open","gas-cost-open","pool-pnl-open","cljs.core/into","lpdashboard.core/render-loading","cljs.core/reset!","lpdashboard.core/render-account","connected","c__38841__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__38842__auto__","switch__38749__auto__","state_78453","state_val_78454","statearr-78459","statearr-78460","inst_78431","statearr-78461","inst_78433","statearr-78463","inst_78435","inst_78436","statearr-78466","cljs.core.async.impl.ioc-helpers/take!","inst_78438","inst_78439","cljs.core/PersistentVector","inst_78440","inst_78441","inst_78442","inst_78443","inst_78444","inst_78445","inst_78446","inst_78447","p1__78429#","inst_78448","inst_78449","inst_78450","inst_78451","cljs.core.async.impl.ioc-helpers/return-chan","statearr-78469","state-machine__38750__auto__","ret-value__38751__auto__","result__38752__auto__","cljs.core/keyword-identical?","ex__38753__auto__","e78472","statearr-78473","cljs.core/seq","statearr-78475","cljs.core/first","state__38843__auto__","statearr-78477","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","account-state","lpdashboard.core/<get-account-state","totals","cljs.core.map","G__78467","G__78468","lpdashboard.core/lp-position-map","cljs.core/vals","lpdashboard.core/render-tx-link","tx","lpdashboard.core/render-address-link","p__78481","vec__78482","cljs.core.nth","lpdashboard.core/token-qty","token","qty","e78485","js/Error","err","lpdashboard.core/open-staking-addresses","lp","cljs.core.filter","cljs.core/some?","p1__78486#","bignumber.core/>","js/module$node_modules$bignumber_DOT_js$bignumber","lpdashboard.core/closed-staking-addresses","p1__78491#","cljs.core.not_EQ_","cljs.core/not","lpdashboard.core/unidentified-destinations","posopen","posclosed","dests","cljs.core/set","clojure.string/lower-case","known","cljs.core.concat","cljs.core/vec","cljs.core.println","clojure.data/diff","lpdashboard.core/render-lp-pos","lp-pos","snapshot","stakes","farms","rewards","cljs.core.mapcat","claimed","claim-txs","cljs.core.distinct","pair-name","clojure.string.join","lp-tokens","open-staking","closed-staking","unknown-dests","unclaimed","bignumber.core/abs","cljs.core.comp","cljs.core/count","cljs.core/empty?","cljs.core/zipmap","cljs.core/keys","m","datafrisk.core/DataFriskView","lpdashboard.core/web3-connect","state_78531","state_val_78532","inst_78513","inst_78520","statearr-78533","statearr-78534","inst_78502","inst_78503","statearr-78535","inst_78514","cljs.core/ExceptionInfo","inst_78515","cljs.core/ex-data","inst_78516","inst_78517","cljs.core._EQ_","inst_78518","statearr-78536","statearr-78537","statearr-78538","inst_78529","statearr-78542","cljs.core/cons","inst_78509","inst_78510","inst_78511","cljs.core.async.interop/p->c","inst_78523","inst_78524","inst_78525","inst_78526","statearr-78544","cljs.core/rest","statearr-78545","statearr-78546","statearr-78547","ex78540","statearr-78548","statearr-78549","statearr-78550","statearr-78554","e78555","statearr-78556","statearr-78557","statearr-78558","js/window","lpdashboard.core/connecting-component","lpdashboard.core/fetch-external-account","lpdashboard.utils/set-query-string!","lpdashboard.core/submit-component","value","cljs.core/deref","lpdashboard.core/atom-input","js/window.location.search","ev","t","lpdashboard.core/shared-state","val","input","lpdashboard.core/app-main","datafrisk.core/DataFriskShell","x","cljs.core/butlast","cljs.core/last","p1__78565#","p1__78566#","bignumber.core/<","cljs.core.reduce","bignumber.core/+","p1__78567#","p1__78568#","bignumber.core/>=","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","lpdashboard.core/play-data","seq78575","self__4724__auto__","names","iter__4529__auto__","s__78577","cljs.core/LazySeq","temp__5735__auto__","xs__6292__auto__","iterys__4525__auto__","s__78579","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__78581","cljs.core/chunk-buffer","i__78580","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__78578","cljs.core/chunk-rest","fs__4526__auto__","iter__78576","i","cljs.core.range","Math/pow","cljs.core/rand-int","lpdashboard.core/line-plot","lpdashboard.core.play_data","lpdashboard.core/start","reagent.core.render","oz.core/vega-lite","cljs.core/clj->js","js/document","lpdashboard.core/init","lpdashboard.core/stop","lpdashboard.core/<staking-rewards-earned","staking-address","rewards-address","user-address","state_78622","state_val_78623","inst_78604","inst_78605","inst_78607","inst_78608","inst_78609","inst_78610","statearr-78625","statearr-78626","statearr-78627","statearr-78628","inst_78589","inst_78590","inst_78591","statearr-78629","statearr-78630","inst_78597","inst_78600","inst_78601","inst_78602","statearr-78631","inst_78619","statearr-78633","inst_78598","statearr-78634","statearr-78637","statearr-78639","ex78632","statearr-78640","statearr-78641","inst_78615","inst_78616","statearr-78643","statearr-78644","inst_78612","statearr-78645","statearr-78646","e78647","statearr-78648","statearr-78649","statearr-78650","lpdashboard.ethereum/make-contract","lpdashboard.ethereum/sr-abi","lpdashboard.ethereum/<token-decimals","lpdashboard.utils/ebn->bn","lpdashboard.core/<staking-rewards-token","staking-contract","state_78797","state_val_78799","inst_78656","statearr-78803","statearr-78804","statearr-78805","ex78800","statearr-78806","statearr-78807","inst_78693","inst_78701","statearr-78808","statearr-78811","inst_78681","statearr-78813","statearr-78815","inst_78748","statearr-78816","statearr-78817","inst_78782","inst_78783","inst_78784","inst_78785","inst_78786","inst_78787","statearr-78818","statearr-78819","statearr-78820","inst_78655","statearr-78822","statearr-78824","inst_78707","statearr-78826","statearr-78827","inst_78669","inst_78671","inst_78672","inst_78673","inst_78674","inst_78675","statearr-78828","statearr-78829","statearr-78832","inst_78716","inst_78717","inst_78718","inst_78719","inst_78720","inst_78721","statearr-78835","statearr-78836","statearr-78837","inst_78723","statearr-78838","statearr-78839","ex78834","statearr-78840","statearr-78841","statearr-78842","inst_78658","statearr-78845","statearr-78847","inst_78678","statearr-78849","inst_78738","inst_78739","inst_78740","inst_78741","inst_78742","inst_78743","statearr-78850","statearr-78851","statearr-78852","inst_78760","inst_78761","inst_78762","inst_78763","inst_78764","inst_78765","statearr-78856","statearr-78857","statearr-78858","statearr-78859","inst_78704","statearr-78861","statearr-78862","inst_78770","statearr-78863","statearr-78864","inst_78773","statearr-78866","statearr-78869","statearr-78871","ex78865","statearr-78872","statearr-78873","inst_78726","statearr-78875","statearr-78876","statearr-78877","inst_78666","inst_78667","inst_78795","inst_78729","statearr-78880","statearr-78882","inst_78779","inst_78780","statearr-78885","inst_78789","statearr-78886","statearr-78887","ex78884","statearr-78888","statearr-78890","inst_78660","statearr-78892","statearr-78894","statearr-78895","inst_78713","inst_78714","inst_78751","statearr-78897","statearr-78899","inst_78757","inst_78758","statearr-78900","inst_78690","inst_78691","statearr-78903","ex78898","statearr-78905","statearr-78906","inst_78695","inst_78696","inst_78697","inst_78698","inst_78699","statearr-78907","statearr-78908","statearr-78909","inst_78659","statearr-78911","statearr-78912","statearr-78913","statearr-78914","ex78910","statearr-78915","statearr-78916","inst_78657","statearr-78917","statearr-78918","inst_78684","statearr-78919","inst_78767","statearr-78920","inst_78745","statearr-78921","statearr-78922","inst_78735","inst_78736","inst_78792","statearr-78923","statearr-78924","statearr-78925","e78926","statearr-78927","statearr-78928","statearr-78931","lpdashboard.core/<staked-prop","state_78971","state_val_78972","inst_78956","inst_78957","inst_78958","inst_78959","inst_78960","inst_78961","statearr-78975","statearr-78976","statearr-78977","inst_78934","inst_78935","statearr-78978","inst_78941","inst_78948","statearr-78979","inst_78937","inst_78951","inst_78952","inst_78953","inst_78954","statearr-78982","inst_78942","inst_78943","inst_78944","inst_78945","inst_78946","statearr-78983","statearr-78984","statearr-78985","inst_78938","inst_78939","statearr-78986","statearr-78987","statearr-78988","inst_78966","inst_78967","inst_78968","inst_78963","statearr-78990","statearr-78991","e78995","statearr-78996","statearr-78997","statearr-78998","lpdashboard.ethereum/make-erc20","bignumber.core//","lpdashboard.core/<sr-staked-lps","state_79020","state_val_79021","inst_78999","inst_79000","statearr-79024","inst_79002","inst_79003","inst_79004","statearr-79025","inst_79006","inst_79007","inst_79008","inst_79009","inst_79010","inst_79011","statearr-79027","statearr-79028","statearr-79029","inst_79013","statearr-79031","statearr-79032","inst_79016","inst_79017","statearr-79033","e79036","statearr-79037","statearr-79039","statearr-79041","lpdashboard.core/<staking-pool-lps","lp-address","state_79076","state_val_79077","inst_79063","inst_79070","statearr-79081","inst_79045","inst_79046","inst_79047","statearr-79082","inst_79049","statearr-79085","inst_79064","inst_79065","inst_79066","inst_79067","inst_79068","statearr-79087","statearr-79088","statearr-79089","inst_79056","statearr-79091","inst_79050","inst_79051","inst_79052","inst_79053","inst_79054","statearr-79093","statearr-79094","statearr-79095","inst_79059","inst_79073","inst_79074","inst_79060","inst_79061","statearr-79097","statearr-79098","statearr-79101","e79102","statearr-79103","statearr-79104","statearr-79106","lpdashboard.core/<total-pool-lps","state_79131","state_val_79133","inst_79110","inst_79111","statearr-79135","inst_79113","inst_79114","inst_79115","statearr-79136","inst_79117","inst_79118","inst_79119","inst_79120","inst_79121","inst_79122","statearr-79137","statearr-79138","statearr-79139","inst_79125","statearr-79140","statearr-79141","inst_79128","inst_79129","statearr-79142","e79143","statearr-79144","statearr-79145","statearr-79146","lpdashboard.core/<lp-pool-tokens","lp-contract","state_79183","state_val_79184","inst_79169","inst_79176","statearr-79188","inst_79151","inst_79152","inst_79153","statearr-79189","inst_79155","statearr-79191","inst_79170","inst_79171","inst_79172","inst_79173","inst_79174","statearr-79192","statearr-79194","statearr-79195","inst_79162","statearr-79196","inst_79156","inst_79157","inst_79158","inst_79159","inst_79160","statearr-79200","statearr-79201","statearr-79202","inst_79165","inst_79179","inst_79180","inst_79181","inst_79166","inst_79167","statearr-79205","statearr-79206","statearr-79207","e79209","statearr-79210","statearr-79211","statearr-79214","lpdashboard.core/<lp-pool-symbols","state_79257","state_val_79258","inst_79242","inst_79244","inst_79245","inst_79246","inst_79247","inst_79248","statearr-79262","statearr-79263","statearr-79264","inst_79216","inst_79228","inst_79235","statearr-79267","inst_79222","inst_79238","inst_79239","inst_79240","statearr-79269","inst_79229","inst_79230","inst_79231","inst_79232","inst_79233","statearr-79272","statearr-79274","statearr-79275","inst_79218","inst_79219","inst_79220","inst_79221","inst_79223","inst_79225","inst_79226","statearr-79276","statearr-79278","statearr-79279","inst_79253","inst_79254","inst_79255","inst_79250","statearr-79281","statearr-79284","e79286","statearr-79287","statearr-79288","statearr-79291","cljs.core/second","lpdashboard.core/<total-pool-reserves","state_79353","state_val_79354","inst_79311","inst_79319","statearr-79355","inst_79293","inst_79294","inst_79295","statearr-79356","inst_79297","statearr-79357","inst_79326","inst_79329","inst_79344","inst_79345","inst_79346","inst_79347","inst_79348","inst_79349","inst_79350","inst_79351","inst_79333","inst_79341","statearr-79358","inst_79313","inst_79314","inst_79315","inst_79316","inst_79317","statearr-79362","statearr-79364","statearr-79365","inst_79304","statearr-79366","inst_79335","inst_79336","inst_79337","inst_79338","inst_79339","statearr-79369","statearr-79370","statearr-79372","inst_79298","inst_79299","inst_79300","inst_79301","inst_79302","statearr-79373","statearr-79374","statearr-79375","inst_79330","inst_79331","statearr-79376","inst_79307","inst_79322","inst_79324","statearr-79377","inst_79308","inst_79309","statearr-79380","statearr-79382","inst_79327","statearr-79384","statearr-79385","statearr-79386","e79389","statearr-79390","statearr-79392","statearr-79394","lpdashboard.core/staked-lps","staked-proportion","staked-balance","bignumber.core/*","lpdashboard.core/proportion-reserves","token-reserve","lp-proportion","lpdashboard.core/proportion-lps","lps","total-lps","lpdashboard.core/staked-positions","lp-reserves","lp-staked","lp-symbols","lpdashboard.core/<make-sashimi-pool-index","state_79427","state_val_79428","inst_79400","inst_79401","inst_79402","statearr-79430","inst_79404","inst_79406","inst_79407","inst_79408","inst_79409","inst_79410","statearr-79433","statearr-79434","statearr-79435","inst_79412","statearr-79437","statearr-79439","inst_79415","inst_79416","inst_79417","inst_79418","inst_79419","inst_79420","cljs.core/PersistentHashMap","inst_79421","inst_79422","inst_79424","statearr-79482","e79483","statearr-79484","statearr-79485","statearr-79489","contract","lpdashboard.ethereum/sashimi-abi","many-pools","cljs.core/identity","p","state_79463","state_val_79464","inst_79441","inst_79442","inst_79444","inst_79446","inst_79447","inst_79448","inst_79449","inst_79450","statearr-79465","statearr-79466","statearr-79467","inst_79452","statearr-79469","statearr-79471","inst_79455","inst_79457","inst_79458","inst_79459","inst_79460","inst_79461","statearr-79474","e79475","statearr-79476","statearr-79478","statearr-79481","cljs.core.async.merge","cljs.core.async/reduce","cljs.core/merge","lpdashboard.core/make-paid-rewards","parsed-transfer","lpdashboard.core/<staked-lp-positions-pjar","e79494","state_79531","state_val_79532","inst_79514","inst_79515","statearr-79536","inst_79495","inst_79500","inst_79497","inst_79503","inst_79504","inst_79505","inst_79506","statearr-79538","inst_79511","inst_79512","statearr-79539","inst_79501","statearr-79542","inst_79498","statearr-79544","inst_79520","inst_79521","inst_79522","statearr-79545","inst_79508","inst_79509","statearr-79546","inst_79517","inst_79524","inst_79525","inst_79526","inst_79527","inst_79528","inst_79529","inst_79518","statearr-79550","statearr-79552","e79553","statearr-79554","statearr-79556","statearr-79559","lpdashboard.ethereum/<user-token-balance","lpdashboard.ethereum/<token-total-supply","lpdashboard.ethereum/<pickle-jar-balance","lpdashboard.ethereum._LT_user_token_transfers","cljs.core.mapv","cljs.core.into","lpdashboard.core/pickle-uni-jars","lpdashboard.core/<staked-lp-positions-pjar-redirect","e79560","state_79582","state_val_79583","inst_79564","inst_79566","inst_79567","inst_79568","statearr-79587","statearr-79588","inst_79570","inst_79571","inst_79575","inst_79579","inst_79573","statearr-79589","inst_79577","statearr-79590","statearr-79591","e79592","statearr-79593","statearr-79596","statearr-79598","bignumber.core/=","lpdashboard.core/<staked-lp-positions-sr","e79599","state_79637","state_val_79638","inst_79601","inst_79602","statearr-79639","inst_79604","inst_79605","inst_79606","statearr-79640","inst_79608","inst_79610","inst_79611","statearr-79641","inst_79613","inst_79614","statearr-79642","inst_79616","inst_79617","inst_79618","statearr-79643","inst_79620","inst_79621","inst_79622","statearr-79646","inst_79624","inst_79625","inst_79626","inst_79627","statearr-79648","inst_79629","inst_79630","inst_79632","inst_79633","inst_79634","inst_79635","statearr-79649","e79651","statearr-79652","statearr-79654","statearr-79656","lpdashboard.core/<staked-lp-positions-lpbar","state_79711","state_val_79712","inst_79677","inst_79678","statearr-79713","inst_79657","inst_79658","inst_79659","statearr-79714","inst_79661","statearr-79715","inst_79709","inst_79674","inst_79680","inst_79671","inst_79699","statearr-79716","inst_79675","statearr-79717","inst_79668","statearr-79718","inst_79694","inst_79695","inst_79696","inst_79697","statearr-79719","statearr-79720","statearr-79721","inst_79662","inst_79663","inst_79664","inst_79665","inst_79666","statearr-79722","statearr-79723","statearr-79724","inst_79684","statearr-79725","inst_79685","inst_79686","inst_79687","inst_79688","inst_79689","statearr-79726","statearr-79727","statearr-79728","inst_79672","statearr-79729","inst_79701","inst_79702","inst_79703","inst_79704","inst_79705","inst_79706","inst_79707","statearr-79730","statearr-79731","inst_79691","statearr-79732","inst_79681","inst_79682","statearr-79733","statearr-79734","e79735","statearr-79736","statearr-79737","statearr-79738","lpdashboard.ethereum/lpbar-abi","lpdashboard.core/<staked-lp-positions-sashimi-plate","state_79823","state_val_79824","inst_79768","inst_79769","inst_79770","inst_79771","inst_79772","inst_79773","statearr-79825","statearr-79826","statearr-79827","inst_79763","inst_79794","inst_79813","inst_79814","inst_79815","inst_79816","inst_79817","inst_79818","inst_79819","statearr-79828","statearr-79829","inst_79739","inst_79740","statearr-79830","inst_79748","inst_79755","statearr-79831","inst_79797","inst_79798","statearr-79832","inst_79821","inst_79783","statearr-79833","inst_79764","inst_79742","inst_79761","inst_79758","inst_79759","inst_79760","inst_79762","inst_79765","inst_79766","statearr-79834","inst_79803","inst_79804","statearr-79835","inst_79749","inst_79750","inst_79751","inst_79752","inst_79753","statearr-79836","statearr-79837","statearr-79838","inst_79790","statearr-79839","inst_79743","inst_79744","inst_79745","inst_79746","statearr-79840","inst_79800","inst_79806","inst_79779","inst_79811","statearr-79841","inst_79784","inst_79785","inst_79786","inst_79787","inst_79788","statearr-79842","statearr-79843","statearr-79844","statearr-79845","statearr-79846","inst_79793","inst_79795","statearr-79847","inst_79801","statearr-79848","inst_79778","inst_79780","inst_79781","statearr-79849","inst_79807","inst_79808","inst_79809","statearr-79850","statearr-79851","statearr-79852","inst_79775","statearr-79853","statearr-79854","e79855","statearr-79856","statearr-79857","statearr-79858","lpdashboard.ethereum/erc20-abi","lpdashboard.ethereum/sashimi-iface","lpdashboard.core/<staked-lp-positions-by-event","lp-destination","tx-hash","sc","lpdashboard.ethereum/event-detector-abi","sc-uni","lpdashboard.ethereum/uni-detector-abi","cheff-contract","deposit-filter","staked-filter","staked-filter2","state_80041","state_val_80042","inst_79886","inst_79893","statearr-80043","inst_80037","statearr-80044","inst_79952","statearr-80045","inst_79865","p1__79859#","inst_79866","inst_79867","statearr-80046","inst_79932","inst_79947","inst_79946","inst_79948","inst_79949","inst_79950","statearr-80047","inst_80001","inst_79963","inst_79991","inst_79984","inst_79962","inst_79980","inst_79989","inst_79898","inst_79993","inst_79966","inst_79881","inst_79987","inst_79977","inst_79972","inst_79975","inst_79929","inst_79924","inst_79969","inst_80004","inst_80005","inst_80006","inst_80007","p1__79863#","inst_80008","inst_80009","inst_80010","inst_80011","inst_80012","p1__79864#","inst_80013","inst_80014","inst_80015","inst_80016","inst_80017","inst_80018","statearr-80048","statearr-80049","statearr-80050","inst_79869","statearr-80051","inst_79912","inst_79919","statearr-80052","inst_79936","inst_79937","inst_79938","inst_79939","inst_79940","inst_79941","statearr-80053","statearr-80054","statearr-80055","inst_79973","statearr-80056","inst_79976","inst_79978","statearr-80057","inst_80020","inst_80021","inst_80022","inst_80023","inst_80024","statearr-80058","inst_79981","inst_79982","statearr-80059","inst_79906","statearr-80060","inst_79943","statearr-80061","inst_79997","statearr-80062","inst_80026","inst_80027","inst_80028","inst_80029","inst_80030","inst_80031","inst_80032","inst_80033","statearr-80063","statearr-80064","inst_79967","statearr-80065","inst_79887","inst_79888","inst_79889","inst_79890","inst_79891","statearr-80066","statearr-80067","statearr-80068","inst_79964","statearr-80069","inst_79953","inst_79954","inst_79955","inst_79956","inst_79957","statearr-80070","statearr-80071","statearr-80072","inst_79985","statearr-80073","inst_79908","inst_79922","inst_79923","inst_79925","statearr-80074","statearr-80075","statearr-80076","inst_79876","statearr-80077","inst_80039","inst_79870","inst_79871","inst_79872","inst_79873","inst_79874","statearr-80078","statearr-80079","statearr-80080","statearr-80081","inst_79988","inst_79990","p1__79862#","inst_79992","inst_79994","inst_79995","statearr-80082","statearr-80083","statearr-80084","inst_79930","inst_79931","inst_79933","inst_79934","statearr-80085","p1__79861#","inst_79909","inst_79910","statearr-80086","inst_79882","inst_79896","inst_79897","inst_79899","inst_79900","inst_79901","inst_79902","statearr-80087","statearr-80088","statearr-80089","inst_79879","inst_79880","p1__79860#","inst_79883","inst_79884","statearr-80090","inst_79913","inst_79914","inst_79915","inst_79916","inst_79917","statearr-80091","statearr-80092","statearr-80093","inst_79959","statearr-80094","statearr-80095","inst_80002","statearr-80096","inst_79970","statearr-80097","inst_79904","inst_79927","statearr-80098","inst_80035","statearr-80099","inst_79999","statearr-80100","statearr-80101","statearr-80102","e80103","statearr-80104","statearr-80105","statearr-80106","staked","staked2","deposit","deposit-data","lpdashboard.ethereum/decode-event-data","pool-pid","lp-decimals","my-lps-staked","my-lps-staked'","pool-info","staking-pool-lp-address","total-unis","total-pool-reserves","rewards-token","rewards-earned","reward-transfers","all-staking-deposits","lpdashboard.ethereum/<user-token-deposits","lp-transfers-in","lp-transfers-hashes","lp-deposits","cljs.core/contains?","pids","pid","all-staking-withdrawals","lpdashboard.ethereum/<user-token-withdrawals","relevant-txids","lpdashboard.core/<staked-lp-positions","state_80154","state_val_80155","inst_80120","inst_80127","statearr-80156","inst_80108","inst_80107","inst_80109","statearr-80157","statearr-80158","inst_80110","inst_80111","statearr-80159","statearr-80160","inst_80143","inst_80139","inst_80121","inst_80122","inst_80123","inst_80124","inst_80125","statearr-80161","statearr-80162","statearr-80163","inst_80147","inst_80133","inst_80134","statearr-80164","G__80165","statearr-80166","statearr-80167","statearr-80168","statearr-80169","inst_80137","statearr-80170","statearr-80171","inst_80117","inst_80118","inst_80135","inst_80130","statearr-80173","statearr-80174","statearr-80175","ex80172","statearr-80176","statearr-80177","inst_80141","statearr-80178","inst_80145","statearr-80179","inst_80152","inst_80149","statearr-80180","statearr-80181","statearr-80182","e80183","statearr-80184","statearr-80185","statearr-80186","lpdashboard.core/make-dst","dst","txhash","lpdashboard.core/staking-txs","staked-token","txs","p1__80187#","lpdashboard.core/<staking-situation","dest","state_80193","state_val_80194","inst_80188","inst_80189","inst_80191","statearr-80195","e80196","statearr-80197","statearr-80198","statearr-80199","lpdashboard.core/<graph-uniswap-positions","state_80213","state_val_80214","inst_80200","inst_80202","inst_80203","inst_80204","inst_80205","inst_80206","statearr-80215","inst_80208","inst_80209","inst_80210","inst_80211","statearr-80216","e80217","statearr-80218","statearr-80219","statearr-80220","lpdashboard.thegraph/<user-lp-snapshots","lpdashboard.core/most-recent-snapshots","lpdashboard.thegraph/<user-lps","lpdashboard.core/<graph-uniswap-pool-dailys","p__80224","map__80225","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","seq80222","G__80223","cljs.core/next","self__4723__auto__","pair-address","limit","state_80289","state_val_80290","inst_80227","p1__80221#","inst_80228","statearr-80291","inst_80237","inst_80234","inst_80230","inst_80231","inst_80232","inst_80233","inst_80235","inst_80236","inst_80238","inst_80239","inst_80240","inst_80241","inst_80242","inst_80243","inst_80244","inst_80245","inst_80246","inst_80247","inst_80248","statearr-80292","inst_80250","inst_80251","inst_80252","inst_80253","inst_80254","inst_80255","statearr-80293","inst_80257","inst_80258","inst_80259","inst_80260","inst_80261","inst_80262","inst_80263","inst_80264","inst_80265","inst_80266","inst_80267","inst_80268","inst_80269","inst_80270","inst_80271","inst_80272","inst_80273","inst_80274","inst_80275","inst_80276","inst_80277","inst_80278","inst_80279","inst_80280","inst_80281","inst_80282","inst_80283","inst_80284","inst_80285","inst_80286","inst_80287","statearr-80294","e80295","statearr-80296","statearr-80297","statearr-80298","pool-dailys","cljs.core.take","cljs.core.take_while","lpdashboard.utils/bn","lpdashboard.thegraph/<pair-days","token0-address","token1-address","token0-symbol","token1-symbol","token0-dailys","lpdashboard.thegraph/<token-days","token1-dailys","cljs.core.drop","timestamps","volumes-usd","reserves-usd","v","r","lpdashboard.core/make-line-points","dailys","init-ts","init-reservesUSD","init-reserve0","init-reserve1","init-token0-price","init-token1-price","init-usd","init-pool-prop","init-lp","init-token0","init-token1","ts","vol","res","ratio","token0-price","token1-price","token0-reserve","token1-reserve","total-supply","voltoken0","voltoken1","token0-price'","token1-price'","voltoken0'","voltoken1'","current-pool-prop","current-token0","current-token1","token0-p-ratio","token0-p-ratio'","price0-change","price1-change","price-divergence","Math/abs","volusd-derived","volderived-res-ratio","token0-diff","bignumber.core/-","token1-diff","usd-diff'","usd-diff","ppnl","lpdashboard.utils/ts->datetime","lpdashboard.core/usd-diff","accum","prev-p","init-reserves-usd","p'","cljs.core.conj","lpdashboard.core/add-daily-pnl","linepoints","lpdashboard.core/hover-layer","y-field","lpdashboard.core/line-layer","p__80302","map__80303","seq80299","G__80300","G__80301","y-title","show-labels","y-min","y-max","and__4115__auto__","lpdashboard.core/make-line-plot-concat","line-points","lpdashboard.core.line_layer","lpdashboard.core/whale-layer","p__80311","map__80312","seq80308","G__80309","G__80310","y-log","lpdashboard.core/make-whale-plot-concat","lpdashboard.core.whale_layer","lpdashboard.core/historic-whale-layer","p__80319","map__80320","seq80316","G__80317","G__80318","lpdashboard.core/make-whale-plot-concat-historic","lpdashboard.core.historic_whale_layer","lpdashboard.core/make-whale-plot-concat-mistake","lpdashboard.core/lp-proportion","lpdashboard.core/abridged-snapshot","datetime","js/Date","token0","token1","prop","token0-balance","token1-balance","cljs.core.keyword","lpdashboard.core/snapshot-balances","lpdashboard.core/last-lp-snapshots","snapshots","pair-snapshots","cljs.core/group-by","last-snapshots","p1__80327#","cljs.core.sort_by","gsnapshots","p1__80328#","lpdashboard.core/gposition->pool","gposition","pair","address0","address1","lpdashboard.core/gposition->token-info","token-prices","symbol0","symbol1","name0","name1","decimals0","decimals1","fexpr__80329","fexpr__80330","lpdashboard.core/gposition->lpsnapshot","staked-positions","reserve0","reserve1","total-shares","user-shares","relevant-stakes","p1__80331#","lp-stakes","p1__80332#","lpdashboard.utils/make-unix-ts","lpdashboard.core/make-lp","mints","burns","p1__80333#","lpdashboard.core/make-state","graph-positions","token-info","positions","snapshot-lps","cljs.core/merge-with","p1__80334#","lpdashboard.core/get-current-earned","lp-snapshot","qty'","lpdashboard.core/token-claimed-from-contract","rewards-map","qtys","claims-summed","lpdashboard.core/all-claims-for-contract","rewards-maps","lpdashboard.core/all-snapshot-claimed","lpdashboard.core/get-current-claimed","lpdashboard.core/lp-position-map-example","lpdashboard.core/token-symbol","token-address","symbol","or__4126__auto__","lpdashboard.core/minted-lp","lp-position","lpdashboard.core/burned-lp","lpdashboard.core/tokens-deposited","tokens","token2","deposits","token1-deposits","p1__80338#","token2-deposits","p1__80339#","token1-total","token2-total","lpdashboard.core/tokens-withdrawn","p1__80340#","p1__80341#","lpdashboard.core/eth-fees","parsed-tx","gas-price","gas-used","eth-paid","lpdashboard.core/fees-paid","minting-fees","burning-fees","p__80342","vec__80343","lpdashboard.core/pretty-price","token-data","lpdashboard.core/lp-prices","latest-snapshot","pool-tokens","earned","rewards-tokens","all-tokens","cljs.core/select-keys","lpdashboard.core/symbol->price","vs-price","p1__80346#","clojure.string/upper-case","lpdashboard.core/rewards-in-currency","rewarded-currencies","p1__80347#","lpdashboard.core/tokens-at-prices","reward-tokens","tokens-usd","tokens-eth","lpdashboard.core/gas-at-prices","fees-paid","lpdashboard.core/lp-pnl","diffs","total-fees","pool-pnl","gas-costs","cljs.core.merge_with","lpdashboard.core/get-minted","lpdashboard.core/get-burned","lpdashboard.core/wallet-lp-tokens","lpdashboard.core/open-lp-tokens","lpdashboard.core/staked-lp-tokens","staked-lps","token-symbols","p1__80348#","pool-lps","wallet-lps","all-staked","current-lps","user-mints","minted-lps","user-burns","burned-lps","user-lps'","account-matches","lp-portion","token-reserves","reserve-shares","p1__80349#","current","earned'","p1__80350#","claimed'","p1__80351#","rtoken-symbol","rewards'","minted-lp","total-invested","total-invested'","p1__80352#","burned-lp","total-withdrawals","total-withdrawals'","p1__80353#","total-initial","a","b","p1__80354#","p1__80355#","token-diffs","p1__80356#","p1__80357#","relevant-prices","pnl","lpdashboard.core/make-burn-map","lp-pool","mint-txr","token1-decimals","token2-decimals","re","block-number","pool-decimals","gas-decimals","eth-decimals","transfer-logs","lpdashboard.ethereum/decode-transfer-data","lp-transfers","p1__80358#","lp-qty","burn-logs","p1__80359#","lpdashboard.ethereum/decode-burn-data","lp-burns","p1__80360#","token0-qty","token1-qty","lpdashboard.core/zapper-in-addresses","lpdashboard.core/mint-addresses","lpdashboard.core/make-mint-map","p1__80361#","p1__80362#","mint-logs","p1__80363#","lpdashboard.ethereum/decode-mint-data","lp-mints","p1__80364#","cljs.core/chunk-first","lpdashboard.core/<get-lp-mints","state_80391","state_val_80392","inst_80369","inst_80367","inst_80368","inst_80370","inst_80371","inst_80372","statearr-80393","inst_80374","inst_80375","statearr-80394","inst_80377","inst_80378","statearr-80395","inst_80380","inst_80383","inst_80381","p1__80365#","inst_80382","inst_80384","statearr-80396","inst_80386","inst_80387","p1__80366#","inst_80388","inst_80389","statearr-80397","e80398","statearr-80399","statearr-80400","statearr-80401","token2-address","mint-transfers","lpdashboard.ethereum/<user-lp-mint-transfers","mint-hashes","mint-txrs","lpdashboard.ethereum/<get-trxs","lpdashboard.core/<get-lp-burns","state_80428","state_val_80429","inst_80406","inst_80404","inst_80405","inst_80407","inst_80408","inst_80409","statearr-80430","inst_80411","inst_80412","statearr-80431","inst_80414","inst_80415","statearr-80432","inst_80417","inst_80420","inst_80418","p1__80402#","inst_80419","inst_80421","statearr-80433","inst_80423","inst_80424","p1__80403#","inst_80425","inst_80426","statearr-80434","e80435","statearr-80436","statearr-80437","statearr-80438","burn-transfers","lpdashboard.ethereum/<user-lp-burn-transfers","burn-hashes","burn-txrs","lpdashboard.core/<get-user-mints","lp-pools","state_80447","state_val_80448","inst_80439","inst_80440","inst_80441","statearr-80449","inst_80443","inst_80444","inst_80445","statearr-80450","e80451","statearr-80452","statearr-80453","statearr-80454","lpdashboard.core/<get-user-burns","state_80463","state_val_80464","inst_80455","inst_80456","inst_80457","statearr-80465","inst_80459","inst_80460","inst_80461","statearr-80466","e80467","statearr-80468","statearr-80469","statearr-80470","lpdashboard.core/<user-lp-destinations","token-addresses","destinations","state_80476","state_val_80477","inst_80472","inst_80474","statearr-80478","e80479","statearr-80480","statearr-80481","statearr-80482","lpdashboard.ethereum/<user-token-destinations","p1__80471#","cljs.core.async.filter_LT_","lpdashboard.core/add-stakings","lpdashboard.core/<user-lp-positions","unique-destinations","p1__80483#","state_80496","state_val_80497","inst_80485","inst_80486","statearr-80498","inst_80488","inst_80489","inst_80490","p1__80484#","inst_80491","inst_80492","inst_80493","inst_80494","statearr-80499","e80500","statearr-80501","statearr-80502","statearr-80503","cljs.core/conj","lpdashboard.core/<user-get-staked","user-snapshots","state_80516","state_val_80517","inst_80505","inst_80506","statearr-80518","inst_80508","inst_80509","statearr-80519","inst_80511","inst_80512","p1__80504#","inst_80513","inst_80514","statearr-80520","e80521","statearr-80522","statearr-80523","statearr-80524","lsnapshots","user-destinations","user-positions","lpdashboard.core/sum-pairs","pair-positions","p__80526","vec__80527","k","cljs.core.update_in","cljs.core/assoc","cljs.core/+","p1__80525#","cljs.core.dissoc","lpdashboard.core/get-pair","p1__80530#","lpdashboard.core/rsfarmer-address","lpdashboard.core/rsfarmer-dst1","lpdashboard.core/rsfarmer-lp2","lpdashboard.core/rsfarmer-lp1","lpdashboard.core/rsfarmer-dst3","lpdashboard.core/rsfarmer-lp3","lpdashboard.core/pool-in-sashimi","lpdashboard.core/sashimi-cheff","lpdashboard.core/reward-tokens","lpdashboard.core/pooled-tokens","cljs.core.juxt","lpdashboard.core/make-token-info","token-infos","z","ti","token-price","cljs.core/name","lpdashboard.core/snapshot->symbols","account-or-name","state_80659","state_val_80660","inst_80534","inst_80536","inst_80537","inst_80538","inst_80539","inst_80540","inst_80541","inst_80542","statearr-80661","inst_80553","inst_80546","inst_80544","inst_80548","inst_80545","inst_80547","inst_80549","inst_80550","inst_80551","inst_80552","inst_80554","inst_80555","inst_80556","inst_80557","inst_80558","inst_80559","inst_80560","inst_80561","inst_80562","inst_80563","statearr-80662","inst_80565","inst_80566","inst_80567","inst_80568","inst_80569","inst_80570","inst_80571","p1__80532#","inst_80572","inst_80573","inst_80574","inst_80575","inst_80576","inst_80577","inst_80578","inst_80579","inst_80580","inst_80581","inst_80582","p1__80533#","inst_80583","inst_80584","inst_80585","inst_80586","inst_80587","inst_80588","inst_80589","inst_80590","inst_80591","inst_80592","inst_80593","inst_80594","inst_80595","inst_80596","inst_80597","statearr-80663","inst_80599","inst_80600","inst_80601","inst_80602","inst_80603","inst_80604","inst_80605","inst_80606","inst_80607","inst_80608","inst_80609","statearr-80664","inst_80613","inst_80611","inst_80612","inst_80614","inst_80615","inst_80616","inst_80617","inst_80618","inst_80619","inst_80620","inst_80621","statearr-80665","inst_80623","inst_80624","inst_80625","inst_80626","inst_80627","inst_80628","inst_80629","inst_80630","inst_80631","inst_80632","inst_80633","inst_80634","inst_80635","inst_80636","inst_80637","inst_80638","inst_80639","inst_80640","inst_80641","inst_80642","statearr-80666","inst_80644","inst_80645","inst_80646","inst_80647","inst_80648","inst_80649","inst_80650","inst_80651","inst_80652","inst_80653","inst_80654","inst_80655","inst_80656","inst_80657","statearr-80667","statearr-80668","e80669","statearr-80670","statearr-80671","statearr-80672","lpdashboard.ethereum/<resolve-address","last-snaps","pair-symbols","many-pools-step","many-transfers-step","with-stakings","many-stakes-step","clojure.set/rename-keys","lpdashboard.ethereum/<erc20-infos","lpdashboard.coingecko/<token-prices","lpdashboard.core/lend-uni-address","lpdashboard.core/lend-address","lpdashboard.core/yfi-address","lpdashboard.core/yfi-uni-address","lpdashboard.core/comp-address","lpdashboard.core/comp-uni-address","lpdashboard.core/snx-address","lpdashboard.core/zapp-in-address","lpdashboard.core/symbol->address","p1__80673#","lpdashboard.core/tokens->lp","lpdashboard.core/lp-tokens","lpdashboard.core/pair->address","symbol2","p1__80674#","lpdashboard.core/symbols->lp","lpdashboard.core/symbols->pos","lpdashboard.core/compute-total","pnl-key","only-open?","p1__80675#","lps'","p1__80676#","lp-pnls","G__80678","lpdashboard.core.compute_totals"],"sourcesContent":["(ns lpdashboard.core\n  (:require [reagent.core :as reagent :refer [atom]]\n            ;;[ethers :as ethers]\n            ;;[promesa.core :as p]\n            [cljs.core.async :refer [go]]\n            [clojure.data]\n            [cljs.core.async.interop :refer-macros [<p!]]\n            ;;[re-graph.core :as re-graph]\n            [cljs-http.client :as http]\n            ;;[cljs-web3.core :as web3]\n            ;;[cljs-web3.eth :as web3-eth]\n            ;;[cljs-web3.utils :as web3-utils]\n            [bignumber.core]\n            [goog.string :as string]\n            [goog.uri.utils :as uri]\n            [bignumber.js :as BigNumber]\n            [lpdashboard.utils :as u]\n            [lpdashboard.thegraph :as thegraph]\n            [lpdashboard.coingecko :as gecko]\n            [lpdashboard.ethereum :as ethereum]\n            [datafrisk.core :as d]\n            ;;[cljsjs.vega]\n            ;;[cljsjs.vega-lite]\n            #_[vega-lite.core :as vega-lite]\n            [oz.core :as oz]\n            #_[data-frisk-reagent :as dfr]\n            #_[cljs-web3-next.core :as web3-core]\n            #_[web3.impl.web3js :as web3js]))\n\n;;(def debug js/goog.DEBUG)\n(def debug true)\n\n(when (false? debug)\n  (set! *print-length* 10)\n  (set! *print-level* 10)\n  (set! js/console.log (fn []))\n  (set! js/console.error (fn []))\n  (set! js/console.warn (fn [])))\n\n#_(defn mount-root []\n  (reagent/render\n   [d/DataFriskShell\n    ;; List of arguments you want to visualize\n     {:state @app-state}]\n\n   (js/document.getElementById \"app\")))\n\n(def address0 \"0x0000000000000000000000000000000000000000\")\n(def provider ethereum/provider)\n\n(def state-example\n  {:user-address \"some-address\"\n   :token-info {\"eth\" {:symbol \"ETH\"\n                       :address nil\n                       :name \"Ether\"\n                       :decimals 18\n                       :prices [{:ts \"122323\" \"usd\" 100.0 \"eth\" 1}\n                                {:ts \"121323\" \"usd\" 101.1 \"eth\" 1}]}\n                \"0x3\" {:symbol \"COMP\"\n                       :address \"0x33\"\n                       :name \"Compound\"\n                       :decimals 18\n                       :prices [{:ts \"122323\" \"usd\" 1.0 \"eth\" 0.1}\n                                {:ts \"121323\" \"usd\" 1.1 \"eth\" 0.2}]}\n                \"0x2\" {:symbol \"MTA\"\n                       :address \"0x21\"\n                       :name \"meta\"\n                       :decimals 18\n                       :prices [{:ts \"122323\" \"usd\" 1.0 \"eth\" 0.1}\n                                 {:ts \"121323\" \"usd\" 1.1 \"eth\" 0.2}]}}\n   :lps {\"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\"\n         {:pool {:address \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\"\n                 :exchange \"uniswap\",\n                 :tokens [\"token0-address\", \"token1-address\"]}\n          :unknown-destinations [{:address \"address1\"\n                                  :reason \"lp matching failed\"\n                                  :tx-hashes []},\n                                 {:address \"address2\"\n                                  :reason \"could not identify contract\"\n                                  :tx-hashes []}],\n          :txs-out [], ;;js tx objects\n          :txs-in [],\n          :mints [{:block-number 1\n                   :tx-hash \"0x123\"\n                   :lp-minted 0.1\n                   :gas-price 100\n                   :gas-used 200\n                   :deposits {\"token0-address\" 2\n                              \"token1-address\" 0.2}}]\n          :burns [{:block-number 2\n                   :tx-hash \"0x123\"\n                   :lp-burned 0.1\n                   :gas-price 100\n                   :gas-used 200\n                   :withdrawals {\"token0-address\" 2\n                                 \"token1-address\" 0.2}}]\n          :snapshots [{:ts 1223324,\n                       :pool {:volumes {}\n                              :lp-shares 100\n                              :reserves {\"token0-address\" 25\n                                         \"token1-address\" 40}}\n                       :lp-shares 10 ;; balances and use pool reserves to calc\n                       :staked [{:staking-address \"0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711\",\n                                 :lp-shares 1.01\n                                 :stakings [{:txhash \"0x343\"\n                                             :block-number 2\n                                             :lp-shares 1}]\n                                 :rewards [{:token-address \"z\",\n                                            :pending {:qty 1},\n                                            :paid-rewards [{:qty 1\n                                                            :tx-hash \"0x2323\"\n                                                            :block-number 12343}\n                                                           {:qty 1\n                                                            :tx-hash \"0x1323\"\n                                                            :block-number 12243}]}]}\n                                {:staking-address \"example\",\n                                 :lp-shares 1\n                                 :rewards [{:reward-token-address \"z\",\n                                            :pending-rewards {:qty 1},\n                                            :paid-rewards [{:qty 1\n                                                            :tx-hash \"0x2323\"\n                                                            :block-number 12343}\n                                                           {:qty 1\n                                                            :tx-hash \"0x1323\"\n                                                            :block-number 12243}]}]}]}]}}})\n\n\n;; PnL\n;; We calculate as\n;; PnL against HODL\n;; PnL =   today's position value\n;;       - deposits value at current price\n;;       + withdrawn value at current price\n;;       + pending rewards at current price\n;;       + rewards claimed at price of claim ? or current price\n;;       - gas costs for all lp token txs\n\n;; PnL against usd\n;; PnL =   today's position value\n;;       - deposits value at price of each date\n;;       + withdrawn value at each price of date\n;;       + pending rewards at current price\n;;       + rewards claimed at price of claim ? or current price\n;;       - gas costs for all lp token txs, with gas cost taken with\n;;         eth price at each tx \n\n;; Pnl when a position is closed\n;; PnL = - deposits value at price of each date\n;;       + withdrawn value at each price of date\n;;       + pending rewards at current price\n;;       + rewards claimed at price of claim ? or current price\n;;       - gas costs for all lp token txs\n\n\n;; example 1\n;; goes in for 10,10 at 100,100=2,000\n;; widhraws 5,5 at 100,100=(1,000)\n;; token-diff = current tokens - tokens deposited + tokens withdrawn\n;; token-diff = current tokens - 10,10 + 5,5\n;;            = current tokens - 5,5\n;; diff-vs-usd = (current tokes @ prices)\n;;               - (deposited tokens @ thenprices)\n;;               + (tokens withdrawn @ then-prices)\n;; diffs-vs-usd = (current tokes @ prices) - 2,000 + 1000\n;; PnL vs HODL = current tokens @ current price\n;;                    - 10,10 @ current price\n;;                    + 5,5 @ current price\n;;                  = token-diff @ current-price\n;; current tokens = 6,4\n;; current prices 200, 100\n;; current tokens @ current price = (+ (* 6, 200) (* 4 100)) = 1600\n;; deposts @ current price = (+ (* 10, 200) (* 10 100)) = 3000\n;; withdrawals @ current price = (+ (* 5, 200) (* 5 100)) = 1500\n;; PnL vs HODL = current - deposits + withdrawals = 1600 - 3000 + 1500 = 100\n;;             = token-diffs @ current prices\n;;             = (current tokens - token deposits + token withdrawals) @ current prices\n;;             = (6-10+5),(4-10+5) @ current prices\n;;             = 1,-1 @ 200, 100\n;;             = 200 - 100 = 100\n\n;; example 2\n;; goes in for 10,10 at 100=2,000\n;; widhraws 5,5 at 200=(2,000)\n;; token-diff = current tokens - 10,10 + 5,5\n;; diff-vs-usd = (current tokes @ prices) - 2,000 + 2,000\n\n;; example 3\n;; goes in for 10,10 at 100=2,000\n;; widhraws 5,5 at 50=(500)\n;; token-diff = current tokens - 10, 10 + 5,5\n;; diff-vs-usd = (current tokes @ prices) - 2,000 + 500\n\n\n\n\n\n;; TODO RewardPaid event and earned method on StakingRewards contract\n;; (see mta and uni staking contracts)\n;; seem like what we need to calculate historic rewards\n{:staking-address \"x\"\n :lp-address \"y\"\n :reward-token-address \"z\"\n :reward-token-symbol \"p\"\n :paid-rewards 1\n :pending-rewards \"z\"}\n\n\n;; TODO heed the warnings!\n(set! *warn-on-infer* false)\n\n(def instruction \"\")\n\n(defonce app-state (atom {:title \"\"\n                          :total-pnl-all nil\n                          :pool-pnl-all nil\n                          :rewards-all nil}))\n\n\n(declare <get-account-state)\n(declare compute-totals)\n(declare lp-position-map)\n(declare proxys-out)\n(def zap-out-address\n  \"0x343e3a490c9251dc0eaa81da146ba6abe6c78b2d\")\n\n(def zap-out-address-old\n  \"0xcfa897e2c4e0a64eaa9ca41f607820a09134353a\")\n\n(def proxys-out\n  #{zap-out-address\n    zap-out-address-old})\n\n(def separator-str [:div\n                    [:br]])\n\n\n(defn signed-qty\n  [n]\n  (let [s (. n toFormat 2)]\n    (if (>= n 0)\n      [:span {:class \"pos\"} s \" USD\"]\n      [:span {:class \"neg\"} s \" USD\"])))\n\n\n(defn shorten-name\n  [s]\n  (if (> (.-length s) 20)\n    (str (subs s 0 6) \"..\" (subs s (- (.-length s) 6)))\n    s))\n\n(defn render-totals\n  [account state lp-positions currency]\n  (let [ _ (swap! app-state update-in [:steps] concat [separator-str])\n        all-totals (compute-totals state)\n        open-totals (compute-totals state true)\n        total-pnl-all (get (:total-pnl all-totals) currency)\n        rewards-all (. (get (:rewards all-totals) currency) toFormat 2)\n        gas-cost-all (. (get (:gas-costs all-totals) currency) toFormat 2)\n        pool-pnl-all (get (:pool-pnl all-totals) currency)\n        total-pnl-open (get (:total-pnl open-totals) currency)\n        rewards-open (. (get (:rewards open-totals) currency) toFormat 2)\n        gas-cost-open (. (get (:gas-costs open-totals) currency) toFormat 2)\n        pool-pnl-open (get (:pool-pnl open-totals) currency)\n        ]\n    (swap! app-state into {;;:title (shorten-name account)\n                           :lp-positions lp-positions\n                           :full-state state\n                           :account account\n                           :total-pnl-all total-pnl-all\n                           :pool-pnl-all pool-pnl-all\n                           :total-pnl-open total-pnl-open\n                           :pool-pnl-open pool-pnl-open\n                           :rewards-all rewards-all\n                           :rewards-open rewards-open\n                           :gas-costs-all gas-cost-all\n                           :gas-costs-open gas-cost-open})))\n\n(defn render-loading\n  [account]\n  (reset! app-state {:title (shorten-name account)\n                     :steps []}))\n\n#_(swap! app-state update-in [:steps] concat [\"another..\"])\n\n\n(defn render-account\n  [account connected]\n  (go\n    (let [_ (if connected\n              (render-loading account)\n              (render-loading \"\"))\n          account-state (<! (<get-account-state account))\n          _ (swap! app-state update-in [:steps] concat [\"Computing account PNL ...\"])\n          totals (compute-totals account-state)\n          lp-positions (map #(lp-position-map % (:token-info account-state))\n                            (vals (:lps account-state)))]\n      (render-totals account account-state lp-positions \"USD\"))))\n\n(defn render-tx-link\n  [tx]\n  [:div {:style {:display \"inline\"}}\n   [:a {:href (str \"https://etherscan.io/tx/\" tx)}\n    (subs tx 0 6)] \" \"])\n\n\n(defn render-address-link\n  [tx]\n  [:div {:style {:display \"inline\"}}\n   [:a {:href (str \"https://etherscan.io/address/\" tx)}\n    (subs tx 0 6)] \" \"])\n\n\n(defn token-qty\n  [[token qty]]\n  (try\n    (str token \" \" (. qty toFormat 2) \" \")\n    (catch js/Error err)))\n\n(defn open-staking-addresses\n  [lp]\n  (filter\n   some?\n   (map :staking-address\n        (filter #(bignumber.core/> (:lp-shares %) (BigNumber. \"0\"))\n                (:staked (first (:snapshots lp)))))))\n\n(defn closed-staking-addresses\n  [lp]\n  (filter\n   some?\n   (map :staking-address\n        (filter #(and\n                  (not= nil (:lp-shares %))\n                  (not (bignumber.core/> (:lp-shares %) (BigNumber. \"0\"))))\n                (:staked (first (:snapshots lp)))))))\n\n\n\n(defn unidentified-destinations\n  [lp]\n  (let [posopen (open-staking-addresses lp)\n        posclosed (closed-staking-addresses lp)\n        dests (set (map clojure.string/lower-case\n                        (map :to (:txs-out lp))))\n        known (set (map clojure.string/lower-case\n                        (concat posopen posclosed\n                           (vec proxys-out))))\n        _ (println known)]\n    (vec (first (clojure.data/diff dests known)))))\n\n\n\n\n(defn render-lp-pos\n  [lp-pos lp]\n  (let [snapshot (first (:snapshots lp))\n        stakes (:staked snapshot)\n        farms (map :staking-address stakes)\n        rewards (mapcat :rewards stakes)\n        claimed (mapcat :paid-rewards rewards)\n        claim-txs (distinct (map :tx-hash claimed))\n        pair-name (clojure.string/join \"/\" (:symbols lp-pos))\n        lp-tokens (:lp-tokens lp-pos)\n        open-staking (open-staking-addresses lp)\n        closed-staking (closed-staking-addresses lp)\n        unknown-dests (unidentified-destinations lp)\n        unclaimed (map token-qty\n                       (:earned (:reward-breakdown lp-pos)))]\n    [:pre {:id (str pair-name \"-title\")}\n     [:div {:id (str pair-name \"-pair\")} [:u pair-name]]\n     (if (not (:account-matches lp-pos))\n       [:pre\n        [:span {:id (str pair-name \"-matches\") :style {:color \"orange\"}}\n         \"LP tokens not fully located \"][:br]\n        (. (bignumber.core/abs (:diff lp-tokens)) toFormat 18)\n        \" minted LP tokens are not being held by the account or an identifiable staking contract\" ])\n     [:div {:id (str pair-name \"-tpnl\")} \"Total PnL: \" [signed-qty (get (:total-pnl (:pnl lp-pos)) \"USD\")]]\n     [:div  {:id (str pair-name \"-ppnl\")}  \"Pool PnL: \" [signed-qty (get (:pool-pnl (:pnl lp-pos)) \"USD\")]]\n     [:div   {:id (str pair-name \"-gc\")}\n      \"Gas costs: \" (. (get (:gas-costs (:pnl lp-pos)) \"USD\") toFormat 2) \" USD\"]\n     (if (< 0 (get (:rewards (:pnl lp-pos)) \"USD\"))\n       [:div  {:id (str pair-name \"-sr\")}\n        \"Staking Rewards: \" (. (get (:rewards (:pnl lp-pos)) \"USD\") toFormat 2) \" USD\"])\n     [:div  {:id (str pair-name \"-current\")}\n      \"Current: \"\n      (clojure.string/join \" \" (map token-qty (:current lp-pos)))\n      ]\n     [:div  {:id (str pair-name \"-invested\")}\n      \"Invested: \"\n      (clojure.string/join \" \" (map token-qty (:invested lp-pos)))\n     ]\n     [:div  {:id (str pair-name \"-w\")}\n      \"Withdrawn: \"\n      (clojure.string/join \" \" (map token-qty (:withdrawn lp-pos)))\n      ]\n\n     [:div  {:id (str pair-name \"-d\")}\n      \"Diffs: \"\n      (clojure.string/join \" \" (map token-qty (:diffs lp-pos)))\n      \" (\" (. (:diff lp-tokens) toFormat 18) \" LP Tokens)\"]\n     [:div  {:id (str pair-name \"-tminted\")}\n      \"LP tokens minted: \"\n      (. (:minted lp-tokens) toFormat 18)]\n     [:div  {:id (str pair-name \"-tburned\")}\n      \"LP tokens burned: \"\n      (. (:burned lp-tokens) toFormat 18)]\n     [:div  {:id (str pair-name \"-tcurrent\")}\n      \"LP tokens (on balance): \"\n      (. (:current lp-tokens) toFormat 18)]\n\n\n     [:div  {:id (str pair-name \"-m\")}\n      \"Mints: \" (map (comp render-tx-link :tx-hash)\n                    (:mints lp))\n    #_[:br]]\n     (if (< 0 (count (:burns lp)))\n       [:div  {:id (str pair-name \"-b\")}\n        \"Burns: \" (map (comp render-tx-link :tx-hash)\n                      (:burns lp))\n        #_[:br]])\n     (if (< 0 (count (:txs-out lp)))\n       [:div  {:id (str pair-name \"-txs-out\")}\n        \"LP transfers out: \" (map (comp render-tx-link :txhash)\n                                 (:txs-out lp))\n        #_[:br]])\n     (if (not (empty? unknown-dests))\n       [:div  {:id (str pair-name \"-unknown-dests\")\n               :style {:color \"orange\"}}\n        \"Unidentified LP token recipients: \"\n        (map render-address-link unknown-dests)])\n\n\n     (if (< 0 (count claim-txs))\n       [:div  {:id (str pair-name \"-cr\")}\n        \"Claimed Rewards: \" (map token-qty\n                                 (:claimed (:reward-breakdown lp-pos)))\n        (map render-tx-link claim-txs)\n        #_[:br]])\n     (if (not= \" 0.00 \" (first unclaimed))\n       [:div  {:id (str pair-name \"-ur\")}\n        \"Unclaimed rewards: \" unclaimed])\n     (if (not (empty? open-staking))\n       [:div  {:id (str pair-name \"-open-stakes\")}\n        \"LPs tokens currently staked at: \"\n        (map render-address-link open-staking)])\n     (if (not (empty? closed-staking))\n       [:div  {:id (str pair-name \"-closed-stakes\")}\n        \"LPs tokens previously staked at: \"\n        (map render-address-link closed-staking)])\n\n\n     [:div  {:id (str pair-name \"-p\")}\n      \"Prices: \" (map token-qty\n                      (zipmap (keys (:prices lp-pos))\n                              (map (fn [m] (get m \"usd\")) (vals (:prices lp-pos)))))]\n     (if debug [d/DataFriskView {:lp lp :lp-pos lp-pos}])\n     [:div separator-str]]))\n\n\n(defn web3-connect\n  []\n  (go\n    (try (let [connected-account (first (<p! (.. js/window -ethereum enable)))\n               _ (js/console.log \"connected-account\" connected-account)]\n           (render-account connected-account true))\n         (catch js/Error err (js/console.log \"Could not enable web3 in browser\" err)))))\n\n(defn connecting-component []\n  [:div\n   [:input {:type \"button\" :value \"Connect account\"\n            :class \"connect\"\n            :on-click web3-connect}]])\n\n\n(defn fetch-external-account\n  [account]\n  (u/set-query-string! account)\n  (render-account account false))\n\n(defn submit-component [value]\n  [:input {:type \"button\" :value \"Go\"\n           :on-click #(fetch-external-account @value)}])\n\n(defn atom-input [value]\n  [:div\n   [:br]\n   [:input {:type \"text\" :size \"44\"\n            :place-holder \"Enter address\"\n            :default-value (if (not= js/window.location.search \"\")\n                     (subs js/window.location.search 1))\n            :on-key-down (fn [ev]\n                           (if (= (.-key ev) \"Enter\")\n                             (fetch-external-account @value)))\n            :on-change (fn [t]\n                         (reset! value (-> t .-target .-value)))}]\n   (submit-component value)])\n\n\n(defn shared-state []\n  (let [val (atom \"foo\")]\n    (fn []\n      [:div\n       [:div \"The value is now: \" @val]\n       [:div \"Change it here: \" [atom-input val]]])))\n\n\n(let [input (atom-input (atom \"\"))]\n  (defn app-main []\n    [:div\n     [:div {:class \"connect\"}\n      (if (= \"\" (:title @app-state))\n        (if provider (connecting-component))\n        (:title @app-state))]\n     [:h6 \"REVERT.FINANCE\"  (if (nil? provider)\n                              \" Requires Web3\")]\n     (if debug\n       [d/DataFriskShell {:account-state @app-state}])\n     [:br]\n     (if (not (nil? provider))\n       input)\n     (if (> (count (:steps @app-state)) 0)\n       [:pre\n        (map  (fn [x] [:div ^{:key x} x])\n              (butlast (:steps @app-state)))\n        [:div {:class \"animate-flicker\"} (last (:steps @app-state))]\n      ])\n     [:div\n      [:div\n   (if (not (nil? (:total-pnl-all @app-state)))\n     [:pre {:style {:width \"45%\" :float \"left\"}}\n      [:div [:u \"ACCOUNT\"]]\n      [:div \"Total PnL: \" [signed-qty (:total-pnl-all @app-state)]]\n      [:div \"PnL from LP positions: \" [signed-qty (:pool-pnl-all @app-state)]]\n      [:div \"Gas costs: \" (:gas-costs-all @app-state) \" USD\"]\n      [:div \"Rewards from staking: \" (:rewards-all @app-state) \" USD\"]\n      ])\n    (if (not (nil? (:total-pnl-open @app-state)))\n      [:pre  {:style {:width \"45%\" :float \"right\"}}\n       [:div [:u \"FROM OPEN LP POSITIONS\"]]\n       [:div \"Total PnL: \" [signed-qty (:total-pnl-open @app-state)]]\n       [:div \"PnL from pools: \" [signed-qty (:pool-pnl-open @app-state)]]\n       [:div \"Gas costs: \" (:gas-costs-open @app-state) \" USD\"]\n       [:div \"Rewards from staking: \" (:rewards-open @app-state) \" USD\"]\n       #_[:p separator-str]])\n       [:div {:style {:clear \"both\"}}]]\n    (if (not (nil? (:total-pnl-all @app-state)))\n      [:pre\n       [:br]\n       [:div [:u \"OPEN LP POSITIONS\"]]\n       [:br]\n       (map #(render-lp-pos % (get (:lps (:full-state @app-state)) (:address %)))\n             (filter #(bignumber.core/< (BigNumber. \"0.000001\") (reduce bignumber.core/+ (vals (:current %))))\n                     (:lp-positions @app-state)))])\n    (if (not (nil? (:total-pnl-all @app-state)))\n      [:pre\n       [:br]\n       [:div [:u \"CLOSED LP POSITIONS\"]]\n       [:br]\n       (map #(render-lp-pos % (get (:lps (:full-state @app-state)) (:address %)))\n            (filter #(bignumber.core/>= (BigNumber. \"0.000001\") (reduce bignumber.core/+ (vals (:current %))))\n                    (:lp-positions @app-state)))])\n\n      ]]))\n\n(defn play-data [& names]\n  (for [n names\n        i (range 20)]\n    {:time i :item n :quantity (+ (Math/pow (* i (count n)) 0.8) (rand-int (count n)))}))\n\n(def line-plot\n  {:data {:values (play-data \"monkey\" \"slipper\" \"broom\")}\n   :encoding {:x {:field \"time\" :type \"quantitative\"}\n              :y {:field \"quantity\" :type \"quantitative\"}\n              :color {:field \"item\" :type \"nominal\"}}\n   :mark \"line\"})\n\n(defn start []\n  (reagent/render\n   [:div [app-main]\n    [oz.core/vega-lite (clj->js line-plot)]\n    ]\n    (. js/document (getElementById \"app\")))\n  (if (and (not debug) (not= js/window.location.search \"\"))\n    (render-account (subs js/window.location.search 1) false)))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start)\n  #_(.. js/window -ethereum enable))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n\n\n\n\n#_(def dai-address \"dai.tokens.ethers.eth\")\n#_(def mta-uni-address \"0x0d0d65e7a7db277d3e0f5e1676325e75f3340455\")\n#_(def mstable-earn-address \"0x9b4aba35b35eee7481775ccb4055ce4e176c9a6f\")\n\n\n\n#_(. ethers/utils keccak256 (. ethers/utils toUtf8Bytes \"Transfer(address,address,uint256)\"))\n\n#_(. ethers/utils keccak256 (. ethers/utils toUtf8Bytes \"Mint(address,uint256,uint256)\"))\n\n;;(. ethers/utils hexDataSlice *1 0 4)\n;; adrian ramirez\n\n;; TODO DOING\n;; curious case, what happens on tx like this one:\n;; https://etherscan.io/tx/0xe8a8c786a7fc99c2104dc13a868ad2f03ef6cc81ee24739e55f58afbeaa92935\n\n#_(go (def a1 (<! (<get-trxs [\"0xe8a8c786a7fc99c2104dc13a868ad2f03ef6cc81ee24739e55f58afbeaa92935\"]))))\n#_(def a2 (make-mint-map (:pool (symbols->lp \"MTA\" \"WETH\" state))\n                         \"0x3a0cca1a832644b60730e5d4c27947c5de609d62\"\n                         (first a1) 18 18))\n\n\n\n\n\n(defn <staking-rewards-earned\n  [staking-address rewards-address user-address]\n  (go\n    (try\n      (let [staking-contract (ethereum/make-contract ethereum/sr-abi staking-address)\n            reward-decimals (<! (ethereum/<token-decimals rewards-address))]\n        (u/ebn->bn (<p! (. staking-contract earned user-address)) reward-decimals))\n      (catch js/Error err\n        (js/console.log \"err <staking-rewards-earned:\" staking-address rewards-address user-address)\n        (BigNumber. 0)))))\n\n(defn <staking-rewards-token\n  [staking-address]\n  (let [staking-contract (ethereum/make-contract ethereum/sr-abi staking-address)]\n    (go (try (<p! (. staking-contract rewardsToken))\n             (catch js/Error err #_(js/console.log \"prob getting rewards token:\" staking-address)\n                    (try (<p! (. staking-contract sushi))\n                         (catch js/Error err #_(js/console.log \"prob getting sushi failback:\" staking-address)\n                                (try (<p! (. staking-contract yam))\n                                     (catch js/Error err #_(js/console.log \"prob getting sushi failback:\" staking-address)\n                                            (try (<p! (. staking-contract sashimi))\n                                                 (catch js/Error err #_(js/console.log \"prob getting sushi failback:\" staking-address)\n                                                        (try (<p! (. staking-contract token))\n                                                             (catch js/Error err #_(js/console.log \"prob getting sushi failback:\" staking-address)\n\n                                                                    (try (<p! (. staking-contract cream))\n                                                                         (catch js/Error err #_(js/console.log \"prob getting cream failback:\" staking-address))))))))))))))))\n\n\n(defn <staked-prop\n  [staking-address user-address]\n  (go\n    (let [staking-contract (ethereum/make-erc20 staking-address)\n          decimals (<! (ethereum/<token-decimals staking-address))\n          user-balance (u/ebn->bn (<p! (. staking-contract balanceOf user-address)) decimals)\n          total-supply (u/ebn->bn (<p! (. staking-contract totalSupply)) decimals)]\n      (bignumber.core// user-balance total-supply))))\n\n\n(defn <sr-staked-lps\n  [staking-address user-address]\n  (go\n    (let [staking-contract (ethereum/make-erc20 staking-address)\n          decimals (<! (ethereum/<token-decimals staking-address))]\n      (u/ebn->bn (<p! (. staking-contract balanceOf user-address)) decimals))))\n\n\n\n(defn <staking-pool-lps\n  [lp-address staking-address]\n  (go\n    (let [lp-contract (ethereum/make-erc20 lp-address)\n          decimals (<p! (. lp-contract decimals))]\n      (u/ebn->bn (<p! (. lp-contract balanceOf staking-address)) decimals))))\n\n\n(defn <total-pool-lps\n  [lp-address]\n  (go\n    (let [lp-contract (ethereum/make-erc20 lp-address)\n          decimals (<! (ethereum/<token-decimals lp-address))]\n      (u/ebn->bn (<p! (. lp-contract totalSupply)) decimals))))\n\n(defn <lp-pool-tokens\n  [lp-address]\n  (let [lp-contract (ethereum/make-erc20 lp-address)]\n    (go [(<p! (. lp-contract token0))\n         (<p! (. lp-contract token1))])))\n\n\n(defn <lp-pool-symbols\n  [lp-address]\n  (go\n    (let [lp-tokens (<! (<lp-pool-tokens lp-address))\n          token0-contract (ethereum/make-erc20 (first lp-tokens))\n          token1-contract (ethereum/make-erc20 (second lp-tokens))]\n      [(<p! (. token0-contract symbol))\n       (<p! (. token1-contract symbol))])))\n\n\n\n\n(defn <total-pool-reserves\n  [lp-address]\n  (go\n    (let [lp-contract (ethereum/make-erc20 lp-address)\n          token0 (<p! (. lp-contract token0))\n          token1 (<p! (. lp-contract token1))\n          decimals0 (<! (ethereum/<token-decimals token0))\n          decimals1 (<! (ethereum/<token-decimals token1))\n          reserves (<p! (. lp-contract getReserves))]\n      [(u/ebn->bn (first reserves) decimals0)\n       (u/ebn->bn (second reserves) decimals1)])))\n\n\n\n\n#_(go (def staked-proportion (<! (<staked-prop mstable-earn-address my-address))))\n#_(go (def staked-pool-balance (<! (<staking-pool-lps mta-uni-address mstable-earn-address))))\n#_(go (def reserves  (<! (<total-pool-reserves mta-uni-address))))\n\n\n\n(defn staked-lps\n  [staked-proportion staked-balance]\n  (bignumber.core/* staked-proportion staked-balance))\n\n;; TODO using formatEther all around is probably wrong.\n;; should I get the total supply of token to calculate\n; amount of unigs for formatUnits?\n(defn proportion-reserves\n  [token-reserve lp-proportion]\n  (bignumber.core/* token-reserve lp-proportion))\n\n(defn proportion-lps\n  [lps total-lps]\n  (bignumber.core// lps total-lps))\n\n\n\n(defn staked-positions\n  [lp-reserves total-lps lp-staked lp-symbols]\n  {:lp-staked lp-staked\n   :token0-balance (proportion-reserves\n                    (first lp-reserves)\n                    (proportion-lps lp-staked total-lps))\n   :token0-symbol (first lp-symbols)\n   :token1-balance (proportion-reserves\n                    (second lp-reserves)\n                    (proportion-lps lp-staked total-lps))\n   :token1-symbol (second lp-symbols)})\n\n\n\n(defn <make-sashimi-pool-index\n  [staking-address]\n  (go\n    (let [contract (ethereum/make-contract ethereum/sashimi-abi staking-address)\n          many-pools (identity (<p! (. contract poolLength)))\n          ;;many-pools 38\n          pool-infos (map (fn [p] (go {(clojure.string/lower-case\n                                        (first (<p! (. contract poolInfo p))))\n                                       p}))\n                        (range many-pools))]\n      (<! (->> (cljs.core.async/merge pool-infos)\n               (cljs.core.async/reduce merge {}))))))\n\n(defn make-paid-rewards\n  [parsed-transfer]\n  {:qty (:amount parsed-transfer)\n   :tx-hash (:hash parsed-transfer)\n   :block-number (:block-number parsed-transfer)})\n\n\n(defn <staked-lp-positions-pjar\n  [lp-address staking-address user-address]\n  (try\n    (go\n      (let [;;staked-proportion (<! (<staked-prop staking-address user-address))\n            ;;staked-pool-balance (<! (<staking-pool-lps lp-address staking-address))\n            ;;my-unis-staked (staked-lps staked-proportion staked-pool-balance)\n            ;; my-unis-staked (<! (<sr-staked-lps staking-address user-address))\n            ;; 1) check balance() of contract, if it is 0\n            ;; use the token->picklemap to get the correct new conract and recu\n            ;; seems that to get pickle jar returns, we need to:\n            ;; 1) get ptoken balance from pickle jar\n\n            ptokens (<! (ethereum/<user-token-balance user-address staking-address))\n            ;; 2) convret to lp tokens using total-supply of ptokens and\n            ;; uni balance for the pickle contract\n            tsupply (<! (ethereum/<token-total-supply staking-address))\n            lptokens (<! (ethereum/<pickle-jar-balance staking-address))\n            my-unis-staked (bignumber.core/*\n                            (bignumber.core// ptokens tsupply)\n                            lptokens)\n            ;; 3) difference between deposit amount and this is accrued rewards\n            ;; 4) get ptokens staked in farm and get rewards for thise\n\n            total-unis (<! (<total-pool-lps lp-address))\n            lp-symbols (<! (<lp-pool-symbols lp-address))\n            rewards-token (<! (<staking-rewards-token staking-address))\n            rewards-earned (<! (<staking-rewards-earned staking-address rewards-token user-address))\n            reward-transfers (<! (ethereum/<user-token-transfers\n                                  provider rewards-token staking-address user-address ))\n            paid-rewards (mapv make-paid-rewards reward-transfers)\n            total-pool-reserves (<! (<total-pool-reserves lp-address))\n            res (staked-positions total-pool-reserves total-unis my-unis-staked lp-symbols)]\n        (into res {:pending-rewards rewards-earned\n                   :rewards-token rewards-token\n                   :paid-rewards paid-rewards})))\n    (catch js/Error err #_(js/console.log \"prob getting rewards token:\" staking-address))))\n\n(def pickle-uni-jars\n  {\"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\" \"0xCffA068F1E44D98D3753966eBd58D4CFe3BB5162\"\n   \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\" \"0x53Bf2E62fA20e2b4522f05de3597890Ec1b352C6\"\n   \"0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852\" \"0x09FC573c502037B149ba87782ACC81cF093EC6ef\"\n   \"0xbb2b8038a1640196fbe3e38816f3e67cba72d940\" \"0xc80090AA05374d336875907372EE4ee636CBC562\"})\n\n(defn <staked-lp-positions-pjar-redirect\n  [lp-address staking-address user-address]\n  (try\n    (go\n      (let [lptokens (<! (ethereum/<pickle-jar-balance staking-address))]\n        (if (bignumber.core/= lptokens (BigNumber. 0))\n          (<! (<staked-lp-positions-pjar\n               lp-address\n               (get pickle-uni-jars lp-address)\n               user-address))\n          (<! (<staked-lp-positions-pjar\n               lp-address\n               staking-address\n               user-address)))))\n    (catch js/Error err #_(js/console.log \"prob getting rewards token:\" staking-address))))\n\n\n\n(defn <staked-lp-positions-sr\n  [lp-address staking-address user-address]\n  (try\n    (go\n      (let [_ (println \"lp-positions-sr\")\n            ;;staked-proportion (<! (<staked-prop staking-address user-address))\n            ;;staked-pool-balance (<! (<staking-pool-lps lp-address staking-address))\n            ;;my-unis-staked (staked-lps staked-proportion staked-pool-balance)\n            my-unis-staked (<! (<sr-staked-lps staking-address user-address))\n            _ (println \"my-unis-s\" my-unis-staked)\n            ;; TODO not sure if above is correct, it could be that\n            ;; like for the picke jars, balance refers to\n            ;; a contract token that does not match exactly\n            ;; 1 to 1 with the lp token. Look at how the staking rewards\n            ;; handle deposits and withdrawals to check\n            total-unis (<! (<total-pool-lps lp-address))\n            _ (println \"tu\" total-unis)\n            lp-symbols (<! (<lp-pool-symbols lp-address))\n            rewards-token (<! (<staking-rewards-token staking-address))\n            _ (println \"rewards-token\" rewards-token)\n            rewards-earned (<! (<staking-rewards-earned staking-address rewards-token user-address))\n            _ (println \"rewards-earned\" rewards-earned)\n            reward-transfers (<! (ethereum/<user-token-transfers\n                                  provider rewards-token staking-address user-address ))\n            _ (println \"reward-transfers\" reward-transfers)\n            paid-rewards (mapv make-paid-rewards reward-transfers)\n            total-pool-reserves (<! (<total-pool-reserves lp-address))\n            res (staked-positions total-pool-reserves total-unis my-unis-staked lp-symbols)]\n        (into res {:pending-rewards rewards-earned\n                   :rewards-token rewards-token\n                   :paid-rewards paid-rewards})))\n    (catch js/Error err #_(js/console.log \"prob getting rewards token:\" staking-address))))\n\n;; TODO try catches with go blocks dont work like this, try catch has to be within\n;; the go block, or the catch has to return a go block\n\n(defn <staked-lp-positions-lpbar\n  [lp-address staking-address user-address]\n  (go\n    (let [staking-contract (ethereum/make-contract ethereum/lpbar-abi staking-address)\n          my-unis-staked  (<p! (. staking-contract lpBalance user-address))\n          total-unis (<! (<total-pool-lps lp-address))\n          lp-symbols (<! (<lp-pool-symbols lp-address))\n          total-pool-reserves (<! (<total-pool-reserves lp-address))\n          staking-pool-lp-address (<p! (. staking-contract lp))]\n      (if (= (clojure.string/lower-case staking-pool-lp-address)\n             (clojure.string/lower-case lp-address))\n        (staked-positions total-pool-reserves total-unis my-unis-staked lp-symbols)\n        (do (js/console.log \"lp addresses do not match:\" staking-address lp-address staking-pool-lp-address)\n            {:token0-balance (BigNumber. \"0\")\n             :token1-balance (BigNumber. \"0\")\n             :lp-staked (BigNumber. \"0\")})))))\n\n\n\n(defn <staked-lp-positions-sashimi-plate\n  [lp-address staking-address user-address]\n  (go\n    (let [staking-contract (ethereum/make-contract ethereum/erc20-abi staking-address)\n          ;; TODO this below only tries the first destination, but\n          ;; should probably try all unique destinations\n          user-token-txs (<! (ethereum/<user-token-transfers provider staking-address user-address))\n          raw-tx (<p! (. provider getTransaction (:hash (first user-token-txs))))\n          pid (.-pid (.-args (. ethereum/sashimi-iface parseTransaction raw-tx)))\n          token-destination (:to (first user-token-txs))\n          cheff-contract (ethereum/make-contract ethereum/sashimi-abi token-destination)\n          my-unis-staked (first (<p! (. cheff-contract userInfo pid user-address)))\n          pool-info (<p! (. cheff-contract poolInfo pid))\n          staking-pool-lp-address (first pool-info)\n          staked-pool-balance (<! (<staking-pool-lps lp-address staking-address))\n          total-unis (<! (<total-pool-lps lp-address))\n          lp-symbols (<! (<lp-pool-symbols lp-address))\n          total-pool-reserves (<! (<total-pool-reserves lp-address))]\n      (if (= (clojure.string/lower-case staking-pool-lp-address)\n             (clojure.string/lower-case lp-address))\n        (staked-positions total-pool-reserves total-unis my-unis-staked lp-symbols)\n        (do (js/console.log \"lp addresses do not match:\" token-destination lp-address staking-pool-lp-address)\n            {:token0-balance (BigNumber. \"0\") ;; TODO try to solve the sashimi\n             :token1-balance (BigNumber. \"0\") ;; migration issue as we do for sushi below\n             :lp-staked (BigNumber. \"0\")}))))) ;; check claimed rewards by mid sized farmer on eth/dai\n\n\n\n\n(defn <staked-lp-positions-by-event\n  [lp-destination user-address]\n  (let [staking-address (:dst lp-destination)\n        lp-address (:token lp-destination)\n        tx-hash (:txhash lp-destination)\n        sc (ethereum/make-contract ethereum/event-detector-abi staking-address)\n        sc-uni (ethereum/make-contract ethereum/uni-detector-abi staking-address)\n        cheff-contract (ethereum/make-contract ethereum/sashimi-abi staking-address)\n        deposit-filter (sc.filters.Deposit user-address)\n        _ (set! (.. deposit-filter -fromBlock) 0)\n        _ (set! (.. deposit-filter -toBlock) \"latest\")\n        staked-filter (sc.filters.Staked user-address)\n        _ (set! (.. staked-filter -fromBlock) 0)\n        _ (set! (.. staked-filter -toBlock) \"latest\")\n        staked-filter2 (sc-uni.filters.Staked user-address)\n        _ (set! (.. staked-filter2 -fromBlock) 0)\n        _ (set! (.. staked-filter2 -toBlock) \"latest\")]\n    (go (let [staked (first (filter #(= tx-hash (.-transactionHash %))\n                                    (<p! (. provider getLogs staked-filter))))\n              staked2 (first (filter #(= tx-hash (.-transactionHash %))\n                                    (<p! (. provider getLogs staked-filter2))))]\n          (if (not (and (nil? staked) (nil? staked2)))\n            (<! (<staked-lp-positions-sr lp-address staking-address user-address))\n            (let [deposit (first (filter #(= tx-hash (.-transactionHash %))\n                                         (<p! (. provider getLogs deposit-filter))))]\n              (if (nil? deposit)\n                (js/console.log \"deposit is nil\")\n                (let\n                    [deposit-data (ethereum/decode-event-data deposit)\n                     pool-pid (. (u/ebn->bn (.-pid deposit-data) 0) toNumber)\n                     lp-decimals 18\n                     my-lps-staked  (first (<p! (. cheff-contract userInfo pool-pid user-address)))\n                     my-lps-staked' (u/ebn->bn my-lps-staked lp-decimals)\n                     pool-info (<p! (. cheff-contract poolInfo pool-pid))\n                     staking-pool-lp-address (first pool-info)\n                     total-unis (<! (<total-pool-lps lp-address))\n                     lp-symbols (<! (<lp-pool-symbols lp-address))\n                     total-pool-reserves (<! (<total-pool-reserves lp-address))\n                     rewards-token (<! (<staking-rewards-token staking-address))\n                     _ (println \"rewards-token:\" rewards-token)\n                     rewards-earned (BigNumber. \"0\")\n                     reward-transfers (<! (ethereum/<user-token-transfers\n                                           provider rewards-token staking-address user-address ))\n\n                     _ (println \"reward transfers:\" reward-transfers)\n                     ;; Logic below is to handle the post-migration\n                     ;; master-cheff contract state.\n                     ;; We have a problem in where we dont know the PID\n                     ;; that corresponds to the lp pool in question, prior\n                     ;; to migration.\n                     ;; What makes this a bit harder is Deposit events\n                     ;; on the master cheff contracts are not indexed\n                     ;; by LP token address deposited, only by user.\n                     ;; So what we do is get all deposit events by\n                     ;; the user, then get all transfer events from the\n                     ;; lp token to the staking contracts.\n                     ;; then we filter all out all the deposits we got for\n                     ;; the user, for the ones that have the same tx-hash\n                     ;; as one of the transfers.\n                     ;; So with this we have all the Deposit events\n                     ;; for the lp token wen want.\n                     ;; TODO IMPORTANT there is an assumption here, that needs\n                     ;; to be proparly handled, this matching will not work\n                     ;; properly if we have more than one Deposit event\n                     ;; in the same TX\n\n                     ;; TODO WTF is the explanation above if we have\n                     ;; pool-pid from the deposit event\n\n\n                     ;;this will return any deposit events that match the user\n                     ;;even for different lp addresses\n                     all-staking-deposits (<! (ethereum/<user-token-deposits\n                                               provider\n                                               staking-address\n                                               user-address))\n                     ;; get all lp-token transfers to staking contract\n                     lp-transfers-in (<! (ethereum/<user-token-transfers\n                                          provider lp-address user-address staking-address))\n                     lp-transfers-hashes (set (map :hash lp-transfers-in))\n                     ;; get all deposits where user transferred relevant\n                     ;; lp-tokens\n                     lp-deposits (filter #(contains? lp-transfers-hashes (:hash %))\n                                         all-staking-deposits)\n                     pids (set (map :pid lp-deposits))\n                     pid (if (not= (count pids) 1)\n                           (first pids) ;; TODO an assumption was broken here, handle\n                           (first pids))\n                     all-staking-withdrawals (<! (ethereum/<user-token-withdrawals\n                                                  provider\n                                                  staking-address\n                                                  user-address))\n\n                     _ (println \"sw:\" (identity all-staking-withdrawals))\n                     ;; TODO change uses of set to distinct\n                     ;; TODO problem, if getting no matches here,\n                     ;; maybe becuae of fucking zapper\n                     ;; TODO need to make unclaimed rewards work for this,\n                     ;; particulatly once sushiswap is running\n                     relevant-txids (set (map :hash\n                                              (filter #(= (:pid %) pid) ;; changed this from pid\n                                                      (concat all-staking-withdrawals\n                                                              all-staking-deposits))))\n                     rel-reward-transfers (filter #(contains? relevant-txids (:hash %))\n                                                  reward-transfers)\n                     _ (println \"rel-reward-transfers\" rel-reward-transfers)\n                     paid-rewards (mapv make-paid-rewards rel-reward-transfers)\n                     ]\n                  (if (= (clojure.string/lower-case staking-pool-lp-address)\n                         (clojure.string/lower-case lp-address))\n                      (into (staked-positions total-pool-reserves total-unis my-lps-staked' lp-symbols)\n                            {:pending-rewards rewards-earned\n                             :rewards-token rewards-token\n                             :paid-rewards paid-rewards})\n                    (do (js/console.log \"lp addresses do not match:\"\n                                        staking-address lp-address staking-pool-lp-address \"pid\" (str pool-pid))\n                        (into (staked-positions\n                               total-pool-reserves\n                               total-unis\n                               (BigNumber. \"0\")\n                               lp-symbols)\n                              {:pending-rewards rewards-earned\n                               :rewards-token rewards-token\n                               :paid-rewards paid-rewards})))))))))))\n\n\n(defn <staked-lp-positions\n  [lp-destination user-address]\n  (go\n    (let [lp-address (:token lp-destination)\n          staking-address (:dst lp-destination)\n          generic-contract (ethereum/make-erc20 staking-address)\n          contract-name (try (<p! (. generic-contract name))\n                             (catch js/Error err\n                               (js/console.log \"no name for lp, stkaing:\" lp-address staking-address )))\n          _ (println \"contract name:\" contract-name)]\n      (case contract-name\n        \"LpBar\" (<! (<staked-lp-positions-lpbar lp-address staking-address user-address))\n        \"sv Uniswap V2\" (<! (<staked-lp-positions-sashimi-plate lp-address staking-address user-address))\n        \"pickling Uniswap V2\" (<! (<staked-lp-positions-pjar-redirect lp-address staking-address user-address))\n        (<! (<staked-lp-positions-by-event lp-destination user-address))))))\n\n\n\n(defn make-dst\n  [dst token txhash]\n  {:dst dst\n   :txhash txhash\n   :token token})\n\n(defn staking-txs\n  [staked-token staking-address account-state]\n  (let [lp (get (:lps account-state) staked-token)\n        txs (filter #(= (:to %) staking-address)\n                    (:txs-out lp))]\n    txs))\n\n(defn <staking-situation\n  \"This is intended for debuggin a possibly\n  broken user stake. It takes the problematic\n  stkaing contract, and a full account state,\n  and returns the staking positions on that\n  contract.\"\n  [staked-token staking-address account-state]\n  (let [tx (first (staking-txs staked-token staking-address account-state))\n        dest (make-dst staking-address staked-token (:txhash tx))]\n    (go (<! (<staked-lp-positions dest (:user-address account-state))))))\n\n\n(declare most-recent-snapshots)\n\n(defn <graph-uniswap-positions\n  [user-address]\n  (go (let [snapshots (<! (thegraph/<user-lp-snapshots user-address))\n            pair-ids (map (comp :id :pair)\n                          (most-recent-snapshots snapshots))\n            positions (<! (thegraph/<user-lps user-address pair-ids))]\n        {:user-address user-address\n         :snapshots snapshots\n         :positions positions})))\n\n\n(defn <graph-uniswap-pool-dailys\n  [pair-address & {:keys [limit] :or {limit 365}}]\n  (go\n    (let [pool-dailys (take\n                       limit\n                       (take-while\n                        #(> (u/bn (:totalSupply %)) 0.0)\n                        (:pairDayDatas (:data (<! (thegraph/<pair-days pair-address))))))\n\n          token0-address (:id (:token0 (first pool-dailys)))\n          token1-address (:id (:token1 (first pool-dailys)))\n          token0-symbol (:symbol (:token0 (first pool-dailys)))\n          token1-symbol (:symbol (:token1 (first pool-dailys)))\n          token0-dailys (take (count pool-dailys )\n                              (:tokenDayDatas (:data (<! (thegraph/<token-days token0-address)))))\n          token1-dailys (take (count pool-dailys)\n                              (:tokenDayDatas (:data (<! (thegraph/<token-days token1-address)))))\n          x 0\n          pool-dailys (drop x pool-dailys)\n          token0-dailys (drop x token0-dailys)\n          token1-dailys (drop x token1-dailys)\n          timestamps (map :date pool-dailys)\n          volumes-usd (map (comp u/bn :dailyVolumeUSD) pool-dailys)\n          reserves-usd (map (comp u/bn :reserveUSD) pool-dailys)\n          vol-res-ratio (map (fn [v r] (bignumber.core// v r))\n                             volumes-usd\n                             reserves-usd)\n          total-supplies (map (comp u/bn :totalSupply) pool-dailys)\n          token0-reserves (map (comp u/bn :reserve0) pool-dailys)\n          token1-reserves (map (comp u/bn :reserve1) pool-dailys)\n          token0-volumes (map (comp u/bn :dailyVolumeToken0) pool-dailys)\n          token1-volumes (map (comp u/bn :dailyVolumeToken1) pool-dailys)\n          token0-prices (map (comp u/bn :priceUSD) token0-dailys)\n          token1-prices (map (comp u/bn :priceUSD) token1-dailys)]\n      {:timestamps timestamps\n       :token0-address token0-address\n       :token1-address token1-address\n       :token0-symbol token0-symbol\n       :token1-symbol token1-symbol\n       :volumes-usd volumes-usd\n       :token0-prices token0-prices\n       :token1-prices token1-prices\n       :total-supplies total-supplies\n       :token0-reserves token0-reserves\n       :token1-reserves token1-reserves\n       :reserves-usd reserves-usd\n       :vol-res-ratio vol-res-ratio\n       :token0-volumes token0-volumes\n       :token1-volumes token1-volumes})))\n\n\n(defn make-line-points\n  [dailys]\n  (let [token0-symbol (:token0-symbol dailys)\n        token1-symbol (:token1-symbol dailys)\n        init-ts (. (last (:total-supplies dailys)) toNumber)\n        init-reservesUSD (. (last (:reserves-usd dailys)) toNumber)\n        init-reserve0 (. (last (:token0-reserves dailys)) toNumber)\n        init-reserve1 (. (last (:token1-reserves dailys)) toNumber)\n        init-token0-price (. (last (:token0-prices dailys)) toNumber)\n        init-token1-price (. (last (:token1-prices dailys)) toNumber)\n        _ (println \"init-token0-price\" init-token0-price)\n        _ (println \"init-token1-price\" init-token1-price)\n        _ (println \"res0:\" init-reserve0)\n        _ (println \"res1:\" init-reserve1)\n        init-usd (u/bn \"1.0\")\n        init-pool-prop (bignumber.core// init-usd init-reservesUSD)\n        init-lp (bignumber.core/*\n                 init-pool-prop\n                 init-ts)\n        ;;init-lp (u/bn \"0.000000996769518728\")\n       ;; init-pool-prop (bignumber.core// init-lp init-ts)\n        _ (println \"init-lp:\" init-lp)\n        init-token0 (bignumber.core/* init-pool-prop init-reserve0)\n        init-token1 (bignumber.core/* init-pool-prop init-reserve1)\n        _ (println \"init-pool-prop:\" init-pool-prop)\n        _ (println \"init-token0:\" init-token0)\n        _ (println \"init-token1:\" init-token1)]\n     (rest (map (fn [ts vol res ratio\n                     token0-price token1-price\n                     token0-reserve token1-reserve\n                     total-supply\n                     voltoken0 voltoken1]\n            (let [token0-price' (. token0-price toNumber)\n                  token1-price' (. token1-price toNumber)\n                  voltoken0' (. voltoken0 toNumber)\n                  voltoken1' (. voltoken1 toNumber)\n                  current-pool-prop (bignumber.core// init-lp total-supply)\n                  current-token0 (bignumber.core/*\n                                 current-pool-prop\n                                 token0-reserve)\n                  current-token1 (bignumber.core/*\n                                  current-pool-prop\n                                  token1-reserve)\n                  ;;_ (println token0-price' init-token0-price)\n                  token0-p-ratio (- (/ token0-price' init-token0-price) 1.0)\n                  token0-p-ratio' (if (= 0 token0-p-ratio) 0 token0-p-ratio)\n                  price0-change (* token0-p-ratio' 100)\n                  price1-change (* (- (/ token1-price' init-token1-price) 1.0) 100)\n                  ;;_ (println \"price0-chabce\" price0-change)\n                  price-divergence (Math/abs (- price0-change price1-change))\n                  ;; there seems to be an issue where volumeUSD\n                  ;; from the subgraph is returning a 0 value\n                  ;; where token volumes are not\n                  volusd-derived (/\n                                  (bignumber.core/+\n                                   (bignumber.core/* token0-price' voltoken0')\n                                   (bignumber.core/* token1-price' voltoken1'))\n                                  2.0)\n                  volderived-res-ratio (/ volusd-derived (. res toNumber))\n                  token0-diff (bignumber.core/- current-token0 init-token0)\n                  token1-diff (bignumber.core/- current-token1 init-token1)\n                  init-usd (+ (* init-token0 token0-price') (* init-token1 token1-price'))\n                  usd-diff' (bignumber.core/*\n                            (bignumber.core/+\n                             (bignumber.core/* token0-price' token0-diff)\n                             (bignumber.core/* token1-price' token1-diff))\n                            (u/bn \"1.0\"))\n                  usd-diff (* (/ usd-diff' init-usd) 100)\n                  ppnl 1]\n              {:timestamp (u/ts->datetime ts)\n               :price-divergence price-divergence\n               :token0-symbol token0-symbol\n               :token1-symbol token1-symbol\n               :current-token0 (* 1.0 current-token0)\n               :current-token1 (* 1.0 current-token1)\n               :current-pool-prop (* 1.0 current-pool-prop)\n               :volume-usd (. vol toNumber)\n               :volume-usd-derived volusd-derived\n               :reserves-usd (. res toNumber)\n               :vol-res-ratio (. ratio toNumber)\n               :volderived-res-ratio volderived-res-ratio\n               :token0-price token0-price'\n               :token1-price token1-price'\n               :token0-reserve (. token0-reserve toNumber)\n               :token1-reserve (. token1-reserve toNumber)\n               :total-supply (. total-supply toNumber)\n               :usd-diff usd-diff\n               :ppnl ppnl}))\n          (:timestamps dailys)\n          (:volumes-usd dailys)\n          (:reserves-usd dailys)\n          (:vol-res-ratio dailys)\n          (:token0-prices dailys)\n          (:token1-prices dailys)\n          (:token0-reserves dailys)\n          (:token1-reserves dailys)\n          (:total-supplies dailys)\n          (:token0-volumes dailys)\n          (:token1-volumes dailys)))))\n\n(defn usd-diff\n  [accum p]\n  (let [prev-p (last accum)\n        init-reserves-usd (:reserves-usd prev-p)\n        init-ts (:total-supply prev-p)\n        init-reserve0 (:token0-reserve prev-p)\n        init-reserve1 (:token1-reserve prev-p)\n        init-usd (u/bn \"1.0\")\n        init-pool-prop (bignumber.core// init-usd init-reserves-usd)\n        init-lp (bignumber.core/*\n                 init-pool-prop\n                 init-ts)\n        init-token0 (bignumber.core/* init-pool-prop init-reserve0)\n        init-token1 (bignumber.core/* init-pool-prop init-reserve1)\n\n\n        token0-reserve (:token0-reserve p)\n        token1-reserve (:token1-reserve p)\n        current-pool-prop (bignumber.core// init-lp (:total-supply p))\n        current-token0 (bignumber.core/*\n                        current-pool-prop\n                        token0-reserve)\n        current-token1 (bignumber.core/*\n                        current-pool-prop\n                        token1-reserve)\n        token0-price (:token0-price p)\n        token1-price (:token1-price p)\n        token0-diff (bignumber.core/- current-token0 init-token0)\n        token1-diff (bignumber.core/- current-token1 init-token1)\n\n        init-usd (+ (* init-token0 token0-price) (* init-token1 token1-price))\n        usd-diff' (bignumber.core/*\n                   (bignumber.core/+\n                    (bignumber.core/* token0-price token0-diff)\n                    (bignumber.core/* token1-price token1-diff))\n                   (u/bn \"1.0\"))\n        usd-diff (* (/ usd-diff' init-usd) 100)\n        p' (into p {:usd-diff-d2d usd-diff'})\n        ]\n    (conj accum p')))\n\n\n(defn add-daily-pnl\n  [linepoints]\n  (reduce\n   usd-diff\n   [(into (first linepoints) {:usd-diff-d2d 0.0})] (rest linepoints)))\n\n(defn hover-layer\n  [y-field]\n  [{\n    :transform [{:filter {:and [\"index.timestamp\",\n                                {:selection \"index\"}]}}]\n    :mark {:type \"text\" :color \"white\"}\n\n    :encoding {:y {:value 15}\n               :x {:field :timestamp\n                   :type \"temporal\"\n                   :title nil\n                   :axis {:labels false\n                          :format \"\"}\n                   }\n               :text {:field y-field\n                      :type \"quantitative\"\n                      :format \",.2f\"}}}\n   {:transform [{:filter\n                 {:and [\"index.timestamp\", {:selection \"index\"}]}}]\n    :mark {:type \"rule\" :color \"green\"}\n    :encoding {:x  {:field :timestamp, :type \"temporal\"}\n               :opacity {:value 0.5}}}\n   {:selection {:index {:type \"single\",\n                        :on \"mousemove\",\n                        :encodings [\"x\"],\n                        :clear \"mouseout\"\n                        :nearest true}}\n    :width 600\n    :height 100\n    :mark {:type \"point\"}\n    :encoding {:x  {:field :timestamp,\n                    :type \"temporal\"}\n               :y {:field y-field,\n                   :type \"quantitative\"},\n               :opacity {:value 0}}\n    }])\n\n(defn line-layer\n  [y-field y-title & {:keys [show-labels y-min y-max]\n                      :or {show-labels false y-min false y-max false}}]\n  {:width 600\n   :height 100\n   :layer (concat\n           [{:encoding {:x {:field :timestamp\n                            :type \"temporal\"\n                            :title nil\n                            :axis {:labels show-labels\n                                   :format \"\"}}\n                        :y {:field y-field\n                            :title y-title\n                            :scale (if (and y-min y-max)\n                                     {:domain [y-min,y-max]}\n                                     {})\n                            ;;:scale {:domain [0, 100]}\n                            :axis {;;:labelAlign \"left\n                                   ;;:labelExpr \"datum.label\"\n                                   :format \",.4f\"}\n\n                            :type \"quantitative\"}}\n             :mark {:type \"line\" :color \"white\"}}]\n           (hover-layer y-field))})\n\n(defn make-line-plot-concat\n  [line-points]\n  {:data {:values line-points}\n   :config {:background \"#111\"\n            :concat {:spacing 2}\n            :axis {:tickColor \"#111\"\n                   ;;:ticks nil\n                   :gridColor \"#657b83\"\n                   :gridOpacity 0.25\n                   :labelColor \"#657b83\"\n                   :titleColor \"#657b83\"}}\n   :resolve {:scale {:y \"independent\"}}\n   :encoding {:x {:field :timestamp, :type \"temporal\"}}\n   :vconcat [(line-layer  :volume-usd-derived \"Volumes (USD)\")\n             (line-layer  :reserves-usd \"Reserves (USD)\")\n             (line-layer  :volderived-res-ratio \"Ratio V / R\")\n             (line-layer :token0-price (str (:token0-symbol (first line-points)) \" Price\"))\n             (line-layer :token1-price (str (:token1-symbol (first line-points)) \" Price\"))\n             (line-layer :price-divergence \"Price Divergence %\")\n             (line-layer :usd-diff-d2d \"PNL vs HODL daily %\")\n             (line-layer :usd-diff \"PnL vs HODL %\" :show-labels true)]})\n\n\n\n\n#_(go (def wbtc-eth (<! (<graph-uniswap-pool-dailys \"0xbb2b8038a1640196fbe3e38816f3e67cba72d940\" :limit 365))))\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-line-plot-concat\n                              (add-daily-pnl (reverse (make-line-points wbtc-eth))))]]]\n   (. js/document (getElementById \"app\")))\n\n\n\n\n\n#_(go (def mta-eth (<! (<graph-uniswap-pool-dailys \"0x0d0d65e7a7db277d3e0f5e1676325e75f3340455\" :limit 365))))\n\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-line-plot-concat\n                              (add-daily-pnl (reverse (make-line-points mta-eth))))]]]\n   (. js/document (getElementById \"app\")))\n\n\n;; TODO price of DAI is 0 on the first days, why? we may have to use gecko prices\n#_(go (def dai-eth (<! (<graph-uniswap-pool-dailys \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\" :limit 190))))\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-line-plot-concat\n                              (make-line-points dai-eth))]]]\n   (. js/document (getElementById \"app\")))\n\n\n#_(go (def yfi-eth (<! (<graph-uniswap-pool-dailys \"0x2fdbadf3c4d5a8666bc06645b8358ab803996e28\"))))\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-line-plot-concat\n                              (make-line-points yfi-eth))]]]\n   (. js/document (getElementById \"app\")))\n\n\n;; compound\n\n#_(def whale-health-plot\n    {:data {:values (map #(into % {:account (subs (:account %) 0 6)}) ethereum/accstates)}\n     :width 600\n     :height 200\n\n     :encoding {:x {:field \"block-number\" :type \"quantitative\"}\n                :y {:field \"health\" :type \"quantitative\"\n                    :scale {:domain [1.0, 1.02]\n                            :clamp true}}\n                :color {:field \"account\" :type \"nominal\"}}\n     :mark \"line\"})\n\n#_(def whale-borrow-plot\n    {:data {:values (map #(into % {:account (subs (:account %) 0 6)}) ethereum/accstates)}\n     :width 600\n     :height 200\n\n     :encoding {:x {:field \"block-number\" :type \"quantitative\"}\n                :y {:field \"total-borrow-eth\" :type \"quantitative\"\n                    :scale {:type \"log\", :base 10}}\n                :color {:field \"account\" :type \"nominal\"}}\n     :mark \"line\"})\n\n#_(def whale-collateral-plot\n    {:data {:values (map #(into % {:account (subs (:account %) 0 6)}) ethereum/accstates)}\n     :width 600\n     :height 200\n\n     :encoding {:x {:field \"block-number\" :type \"quantitative\"}\n                :y {:field \"total-collateral-eth\" :type \"quantitative\"\n                    :scale {:type \"log\", :base 10}}\n                :color {:field \"account\" :type \"nominal\"}}\n     :mark \"line\"})\n\n(defn whale-layer\n  [y-field y-title & {:keys [show-labels y-min y-max y-log]\n                      :or {show-labels false\n                           y-min false\n                           y-max false\n                           y-log false}}]\n  {:width 600\n   :height 100\n   :layer (concat\n           [{:encoding {:x {:field :block-number\n                            :type \"quantitative\"\n                            :title nil\n                            :scale {:domain [11332733, 11333299]\n                                    :nice false\n                                    :clamp true}\n                            :axis {:labels show-labels\n                                   :ticks (if show-labels true false)}}\n                        :y {:field y-field\n                            :title y-title\n                            :axis {:grid true\n                                   :tickCount 13\n                                   :tickband \"extent\"}\n                            :scale (if (and y-min y-max)\n                                     {:domain [y-min,y-max]\n                                      :type (if y-log \"log\" \"linear\")\n                                      :base 10\n                                      :clamp true}\n                                     {})\n                            ;;:scale {:domain [0, 100]}\n\n                            :type \"quantitative\"}\n                        :color {:field \"account\" :type \"nominal\"\n                                :title \"Values\"\n                                :legend {:orient \"right\" :direction \"vertical\"}\n                                :scale {:domain [\"0x554b\"  \"0x909b\" \"DAI/USD\"], :range [\"#120078\" \"#f05454\"  \"#ffa62b\"]}}}\n             :mark {:type \"line\" :interpolate \"step\"}}]\n           )})\n\n\n(defn make-whale-plot-concat\n  [line-points]\n  {:data {:values line-points}\n   :config {;;:background \"#111\"\n            :concat {:spacing 2}\n            :axis {;;:tickColor \"#111\"\n                   ;;:ticks nil\n                   :gridColor \"#657b83\"\n                   :gridOpacity 0.25\n                   :labelColor \"#657b83\"\n                   :titleColor \"#657b83\"}}\n   :resolve {:scale {:y \"independent\"}}\n\n   :vconcat [(whale-layer :health \"Account Health\" :y-min 0.99 :y-max 1.02 :y-log false)\n             #_(whale-layer :health-computed \"Health C\" :y-min 0.99 :y-max 1.02 :y-log false)\n             (whale-layer \"total-borrow-prop\" \"Borrow % change\" :y-min 1.0 :y-max 1.3 :y-log false)\n             (whale-layer \"total-collateral-prop\" \"Collateral % change\" :y-min 1.0 :y-max 1.3 :y-log false)\n             #_(whale-layer \"underlying_price\" \"DAI/ETH\" :y-min 0.0019 :y-max 0.0027 :y-log false :show-labels false)\n             (whale-layer \"usd-price\" \"DAI/USD\" :y-min 0.97 :y-max 1.25 :y-log false :show-labels true)\n             #_(whale-layer \"total-borrow-eth\" \"Borrow (ETH Value)\" :y-log true)\n             #_(whale-layer \"total-collateral-eth\" \"Collateral (ETH Value)\" :show-labels true :y-log true)]})\n\n\n\n#_(def pair-whale-data-points\n    (sort-by :block-number\n             (filter #(or (= (:account %) \"0x554b\") (= (:account %) \"0x909b\"))\n                     (map #(into % {:account (subs (:account %) 0 6)})\n                          ethereum/accstates))))\n\n\n\n;; pair o' whale\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat\n                              (concat pair-whale-data-points  ethereum/token-prices'))]]]\n   (. js/document (getElementById \"app\")))\n\n(defn historic-whale-layer\n  [y-field y-title & {:keys [show-labels y-min y-max y-log]\n                      :or {show-labels false\n                           y-min false\n                           y-max false\n                           y-log false}}]\n  {:width 600\n   :height 75\n   :layer (concat\n           [{:encoding {:x {:field :block-number\n                            :type \"quantitative\"\n                            :title nil\n                            :scale {;;:domain [10250758,  #_ethereum/current-block 11330758]\n                                    :nice false\n                                    :clamp true}\n                            :axis {:labels show-labels\n                                   :ticks (if show-labels true false)}}\n                        :y {:field y-field\n                            :title y-title\n                            :axis {:grid true\n                                   :tickCount 10\n                                   :tickband \"extent\"}\n                            :scale {:domain (if (and y-min y-max) [y-min y-max] [])\n                                    :type (if y-log \"symlog\" \"linear\")\n                                    :base 10\n                                    :clamp true}\n                            ;;:scale {:domain [0, 100]}\n\n                            :type \"quantitative\"}\n                        :color {:field \"side\" :type \"nominal\"\n                                :title \"Values\"\n                                :legend {:orient \"right\" :direction \"vertical\"}\n                                :scale {:domain [\"Account Health\", \"Supplied\", \"Borrowed\" \"Claimed Rewards\"], :range [ \"orange\"  \"#706897\" \"#fd3a69\" \"#5aa469\"]}}}\n             :mark {:type \"line\" :interpolate \"step\"}}]\n           )})\n\n\n(defn make-whale-plot-concat-historic\n  [line-points]\n  {:data {:values line-points}\n   :config {;;:background \"#111\"\n            :concat {:spacing 2}\n            ;;:legend {:orient \"top-left\" :symbolDirection \"horizontal\"}\n            :axis {;;:tickColor \"#111\"\n                   ;;:ticks nil\n                   :gridColor \"#657b83\"\n                   :gridOpacity 0.25\n                   :labelColor \"#657b83\"\n                   :titleColor \"#657b83\"}}\n   ;;:resolve {:scale {:y \"independent\" }}\n\n   :vconcat [(historic-whale-layer :health \"Health\"  :y-min 1.0 :y-max 1.5 :y-log false :show-labels false)\n             #_(historic-whale-layer :eth-value \"ETH Value\" :y-min 120000 :y-max 250000 :y-log false :show-labels false)\n             (historic-whale-layer :value \"USD Value\" :y-min 0 :y-max 140000000 :y-log false :show-labels false)\n             (historic-whale-layer :dai \"DAI\" :y-min 0 :y-max 140000000 :y-log false :show-labels false)\n             (historic-whale-layer :usdc \"USDC\" :y-min 0 :y-max 30000000 :y-log false :show-labels false)\n             (historic-whale-layer :usdt \"USDT\" :y-min 0 :y-max 20000000 :y-log false :show-labels true)\n             (historic-whale-layer :comp-claimed \"Claimed COMP\" :y-min 0 :y-max 18000 :y-log false :show-labels true)\n\n             #_(whale-layer \"total-collateral-eth\" \"Collateral (ETH Value)\" :show-labels true :y-log true)]})\n\n(defn make-whale-plot-concat-mistake\n  [line-points]\n  {:data {:values line-points}\n   :config {;;:background \"#111\"\n            :concat {:spacing 2}\n            ;;:legend {:orient \"top-left\" :symbolDirection \"horizontal\"}\n            :axis {;;:tickColor \"#111\"\n                   ;;:ticks nil\n                   :gridColor \"#657b83\"\n                   :gridOpacity 0.25\n                   :labelColor \"#657b83\"\n                   :titleColor \"#657b83\"}}\n   ;;:resolve {:scale {:y \"independent\" }}\n\n   :vconcat [(historic-whale-layer :health \"Health\"  :y-min 1.0 :y-max 1.5 :y-log false :show-labels false)\n             #_(historic-whale-layer :eth-value \"ETH Value\" :y-min 120000 :y-max 250000 :y-log false :show-labels false)\n             (historic-whale-layer :value \"USD Value\" :y-min 0 :y-max 140000000 :y-log false :show-labels false)\n             (historic-whale-layer :dai \"DAI\" :y-min 0 :y-max 140000000 :y-log false :show-labels false)\n             (historic-whale-layer :usdc \"USDC\" :y-min 0 :y-max 140000000 :y-log false :show-labels true)\n             #_(historic-whale-layer :usdt \"USDT\" :y-min 0 :y-max 20000000 :y-log false :show-labels true)\n             #_(whale-layer \"total-collateral-eth\" \"Collateral (ETH Value)\" :show-labels true :y-log true)]})\n\n\n;; historic whale long\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat-historic ethereum/lw-state-history-long')]]]\n   (. js/document (getElementById \"app\")))\n\n\n;; historic whale mistake\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat-mistake ethereum/lw-state-history-mistake)]]]\n   (. js/document (getElementById \"app\")))\n\n\n\n\n\n#_(def safe-whale-data-points\n    (sort-by :block-number\n             (filter #(= (:account %) \"0x554b\")\n                     (map #(into % {:account (subs (:account %) 0 6)})\n                          ethereum/accstates))))\n\n\n\n#_(def pair-whale-data-points\n    (sort-by :block-number\n             (filter #(or (= (:account %) \"0x554b\") (= (:account %) \"0x909b\"))\n                     (map #(into % {:account (subs (:account %) 0 6)})\n                          ethereum/accstates))))\n\n\n\n#_(last (sort-by :total-borrow-prop whale-data-points))\n#_{:account \"0x909b\",\n   :health 1.001179275450991,\n   :health-computed 1.0011792754509912,\n   :total-borrow-eth 208199.8810453435,\n   :total-collateral-eth 208445.40605395954,\n   :block-number 11333036,\n   :total-borrow-prop 1.1250960576989382,\n   :total-collateral-prop 1.1148923324122868}\n\n;; when looper whale had liquidated, its borrow total value had increased by 12.5%\n;; while it's total collateral borrow increased only by 11.48%\n;; though, worth noting that this already had it at an above 1 collateral value,\n;; it was the next block that increased the differnce and brought its health value below 1\n;; for liquidation\n\n\n;; TOP 4\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat\n                              (map #(into % {:account (subs (:account %) 0 6)}) ethereum/accstates))]]]\n   (. js/document (getElementById \"app\")))\n\n\n;; LOOPER WHALE\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat\n                              (concat whale-data-points  ethereum/token-states'))]]]\n   (. js/document (getElementById \"app\")))\n\n\n;; Biggest whale\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat\n                              (concat safe-whale-data-points  ethereum/token-states'))]]]\n   (. js/document (getElementById \"app\")))\n\n\n\n\n\n\n\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite whale-health-plot]]\n    [:div [oz.core/vega-lite whale-borrow-plot]]\n    [:div [oz.core/vega-lite whale-collateral-plot]]]\n   (. js/document (getElementById \"app\")))\n\n\n\n#_(go (def my-snapshots (<! (thegraph/<user-lp-snapshots my-address))))\n#_(go (def noobie-address (<! (<resolve-address \"noobie.eth\"))))\n#_(go (def noobie-snapshots (<! (thegraph/<user-lp-snapshots noobie-address))))\n\n\n\n\n;;; HOW OFTEN WAS COMP CLAIMED?\n\n;; scatter plot\n\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 600\n            :height 150\n            :data {:values ethereum/claim-block-diffs}\n            :encoding {:x {:field :claim-n :type \"quantitative\"}\n                       :y {:field :diff :title \"n blocks from previous claim\" :type \"quantitative\"\n                           :scale {:domain [0,  5000]\n                                   :clamp true}}}\n            :mark \"point\"}]]]\n    (. js/document (getElementById \"app\")))\n\n;; histogram\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 600\n            :height 150\n            :data {:values ethereum/claim-block-diffs}\n            :encoding {:x {:title \"n blocks from previous claim (binned)\"\n                           :bin {:step 100} :field :diff\n                           :scale {:domain [0 10000]\n                                   :clamp true}}\n                       :y {:aggregate \"count\" :title \"count\"}}\n            :mark \"bar\"}]]]\n   (. js/document (getElementById \"app\")))\n\n\n;;; ALL LIQUIDATIONS PLOT\n\n\n#_(reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 800\n            :height 200\n            :data {:values ethereum/all-liquidations}\n            :config {;;:background \"#111\"\n                     :concat {:spacing 2}\n                     :axis {;;:tickColor \"#111\"\n                            ;;:ticks nil\n                            :gridColor \"#657b83\"\n                            :gridOpacity 0.15}}\n            :resolve {:scale {:y \"independent\"}}\n\n            :encoding {\n                       :x {:field :block-number :type \"quantitative\"\n                           :scale {:domain [7800000 11400000]\n                                   :nice false\n                                   }\n                           :title \"Block Number\"\n                           }\n                       :y {:field :repay-amount :title \"Repaid Value (USD)\" :type \"quantitative\"\n                           ;;:scale {:domain [0,  50000000] :clamp true}\n                           }\n\n                       :color {:field :highlight, :type \"nominal\"\n                               :legend false\n                               :scale {:domain [false, true], :range [ \"lightgray\"  \"crimson\"]}}\n                       }\n            :mark {:type \"point\" :filled true}}]]]\n   (. js/document (getElementById \"app\")))\n\n\n\n\n\n;; DONE there is a problem here when there are snapshots that contain value,\n;; in which case we need to add them up to the staked values at the end.\n\n(defn lp-proportion [s]\n  (bignumber.core// (:liquidityTokenBalance s)\n                    (:liquidityTokenTotalSupply s)))\n\n(defn abridged-snapshot [s]\n  (let [datetime (js/Date. (* 1000 (:timestamp s)))\n        token0 (:symbol (:token0 (:pair s)))\n        token1 (:symbol (:token1 (:pair s)))\n        prop (lp-proportion s)\n        token0-balance (bignumber.core/* prop (:reserve0 s))\n        token1-balance (bignumber.core/* prop (:reserve1 s))]\n    {:datetime datetime\n     :balances {(keyword token0) token0-balance\n                (keyword token1) token1-balance}}))\n\n\n(defn snapshot-balances [s]\n  (let [datetime (js/Date. (* 1000 (:timestamp s)))\n        token0 (:symbol (:token0 (:pair s)))\n        token1 (:symbol (:token1 (:pair s)))\n        prop (lp-proportion s)\n        token0-balance (bignumber.core/* prop (:reserve0 s))\n        token1-balance (bignumber.core/* prop (:reserve1 s))]\n    {:token0-symbol token0\n     :token1-symbol token1\n     :token0-balance token0-balance\n     :token1-balance token1-balance}))\n\n\n\n(defn last-lp-snapshots\n  [snapshots]\n  (let [pair-snapshots (group-by (comp :id :pair) snapshots)\n        last-snapshots (map (comp last #(sort-by :timestamp %)) (vals pair-snapshots))]\n    (map (fn [s] {:token ((comp :id :pair) s)\n                  :pos (snapshot-balances s)})\n         last-snapshots)))\n\n(defn most-recent-snapshots\n  \"Returns most recent snapshot for each LP pair where\n   `gsnapshots` is a coll of LPSnapshots as returned\n    by `thegraph/<user-lp-snapshots`\"\n  [gsnapshots]\n  (let [pair-snapshots (group-by (comp :id :pair) gsnapshots)\n        last-snapshots (map (comp last #(sort-by :timestamp %)) (vals pair-snapshots))]\n    last-snapshots))\n\n#_(last-lp-snapshots @lp-snapshots)\n\n;; TODO implement these\n\n\n(defn gposition->pool\n  [gposition]\n  (let [pair (:pair gposition)\n        pair-address (:id pair)\n        token0 (:token0 pair)\n        token1 (:token1 pair)\n        address0 (:id token0)\n        address1 (:id token1)]\n    {:address pair-address\n     :exchange \"uniswap\"\n     :tokens [address0 address1]}))\n\n\n(defn gposition->token-info\n  [gposition token-prices]\n  (let [pair (:pair gposition)\n        token0 (:token0 pair)\n        token1 (:token1 pair)\n        address0 (:id token0)\n        address1 (:id token1)\n        symbol0 (:symbol token0)\n        symbol1 (:symbol token1)\n        name0 (:name token0)\n        name1 (:name token1)\n        decimals0 (:decimals token0)\n        decimals1 (:decimals token1)\n        token0-price ((keyword address0) token-prices)\n        token1-price ((keyword address1) token-prices)]\n    {address0 {:symbol symbol0\n               :address address0\n               :name name0\n               :decimals decimals0\n               :prices [{:ts (:last_updated_at token0-price)\n                         \"usd\" (:usd token0-price)\n                         \"eth\" (:eth token0-price)}]}\n     address1 {:symbol symbol1\n               :address address1\n               :name name1\n               :decimals decimals1\n               :prices [{:ts (:last_updated_at token1-price)\n                         \"usd\" (:usd token1-price)\n                         \"eth\" (:eth token1-price)}]}}))\n\n\n\n\n(defn gposition->lpsnapshot\n  [gposition staked-positions]\n  (let [pair (:pair gposition)\n        lp-address (:id pair)\n        token0 (:token0 pair)\n        token1 (:token1 pair)\n        address0 (:id token0)\n        address1 (:id token1)\n        reserve0 (:reserve0 pair)\n        reserve1 (:reserve1 pair)\n        total-shares (:totalSupply pair)\n        user-shares (:liquidityTokenBalance gposition)\n        relevant-stakes (filter #(= lp-address (:token %)) staked-positions)\n        lp-stakes (mapv (fn [s] {:staking-address (:dst s)\n                                 :lp-shares (:lp-staked (:pos s))\n                                 :stakings (mapcat\n                                            :stakings\n                                            (filter #(= (:dst %) (:dst s))\n                                                    relevant-stakes))\n                                 :rewards\n                                 (if (:rewards-token (:pos s))\n                                   [{:reward-token-address\n                                     (:rewards-token (:pos s))\n                                     :pending-rewards\n                                     (:pending-rewards (:pos s))\n                                     :paid-rewards\n                                     (:paid-rewards (:pos s))}]\n                                   [])})\n                        relevant-stakes)]\n    {:ts (u/make-unix-ts)\n     :pool {:volumes {}\n            :lp-shares total-shares\n            :reserves {address0 reserve0\n                       address1 reserve1}}\n     :lp-shares user-shares\n     :staked lp-stakes}))\n\n(defn make-lp\n  [gposition staked-positions mints burns]\n  (let [pair (:pair gposition)\n        lp-address (:id pair)\n        token0 (:token0 pair)\n        token1 (:token1 pair)\n        address0 (:id token0)\n        address1 (:id token1)]\n    {lp-address {:pool {:address lp-address\n                        :excahnge \"uniswap\"\n                        :tokens [address0 address1]}\n                 :unkown-destinations []\n                 :txs-out (mapcat\n                           :stakings\n                           (filter #(= (:token %) lp-address)\n                                   staked-positions))\n                 :mints mints\n                 :burns burns\n                 :snapshots [(gposition->lpsnapshot gposition staked-positions)]}}))\n\n\n(defn make-state\n  \"Makes an initial user state from a map of\n  the most recent avail `graph-snapshots`\n  as returned by `<graph-uniswap-positions``\"\n  [graph-positions staked-positions token-info\n   mints burns]\n  (let [user-address (:user-address graph-positions) ;; TODO add user-address\n        positions (:positions graph-positions)       ;; to staked-positions and verify that \n        snapshot-lps (apply merge-with merge         ;; they match\n                            (map #(make-lp\n                                   %\n                                   staked-positions\n                                   (get mints (:id (:pair %)))\n                                   (get burns (:id (:pair %))))\n                                 positions))\n\n        ;; TODO fix aboove, make staked-positions be filterd\n        ;; by relevant staked positoins only\n        ]\n    {:user-address user-address\n     :token-info token-info\n     :lps snapshot-lps}))\n\n\n;; TODO get-current-earned,claimed\n;; need to be rewrtten to account for the\n;; fact ot multiple possible rewwards per staking address\n(defn get-current-earned\n  [lp-snapshot]\n  (let [token (:reward-token-address\n               (first (:rewards (first (:staked lp-snapshot)))))\n        qty (:pending-rewards\n              (first (:rewards (first (:staked lp-snapshot)))))\n        qty' (if qty\n               qty\n               (BigNumber. \"0\"))]\n\n    [{:qty qty'\n      :token token}]))\n\n(defn token-claimed-from-contract\n  [rewards-map]\n  (let [token (:reward-token-address rewards-map)\n        qtys (map :qty (:paid-rewards rewards-map))\n        claims-summed (if (= qtys '())\n                        (BigNumber. \"0\")\n                        (reduce bignumber.core/+ qtys))]\n    {:qty claims-summed\n     :token token}))\n\n\n(defn all-claims-for-contract\n  [rewards-maps]\n  (map token-claimed-from-contract rewards-maps))\n\n(defn all-snapshot-claimed\n  [snapshot]\n  (apply concat\n          (map\n           (comp all-claims-for-contract :rewards)\n           (:staked snapshot))))\n\n\n(defn get-current-claimed\n  [lp-snapshot]\n  (let [token (:reward-token-address (first (:rewards (first (:staked lp-snapshot)))))\n        qtys (map :qty (:paid-rewards (first (:rewards (first (:staked lp-snapshot))))))\n        claims-summed (if (= qtys '())\n                        (BigNumber. \"0\")\n                        (reduce bignumber.core/+ qtys))]\n    {:qty claims-summed\n     :token token}))\n\n\n#_(defn pretty-position\n  \"Takes an `lp-position` value from the `:lps`\n  coll in a user-state map and the `:token-info`,\n  map from the same user-state\"\n  [lp-position token-info]\n  (let [pool-tokens (:tokens (:pool lp-position))\n        token-symbols (map #(:symbol (get token-info %))\n                           pool-tokens)\n        latest-snapshot (first (:snapshots lp-position))\n        pool-lps (:lp-shares (:pool latest-snapshot))\n        wallet-lps (:lp-shares latest-snapshot)\n        staked-lps (reduce + (map (comp :lp-shares)\n                                     (:staked latest-snapshot)))\n        user-lps (+ wallet-lps staked-lps)\n        lp-portion (bignumber.core// user-lps pool-lps)\n        token-reserves (:reserves (:pool latest-snapshot))\n        reserve-shares (map (comp  #_(fn [x] (if (. x isNaN) (. ethNers/BigNumber from \"0.00\") x))\n                                   #(bignumber.core/* lp-portion %))\n                            (vals token-reserves))\n        current (zipmap token-symbols (map str reserve-shares))\n        earned (:qty (get-current-earned latest-snapshot))\n        claimed (:qty (get-current-claimed latest-snapshot))\n        rewards (. ethers/utils formatUnits (bignumber.core/+ earned claimed) 18)\n        current' (into current {\"REWARDS\" rewards})]\n    current'))\n\n\n#_(defn pretty-positions\n  [state]\n  (filter (fn [m] (not= \"0\" (first (vals m))))\n          (map #(pretty-position % (:token-info state))\n               (vals (:lps state)))))\n\n\n(def lp-position-map-example\n  {:current {\"MTA\" 3998.584402,\n             \"WETH\" 12.744}\n   :reward {\"MTA\" 824.8436457935455}\n   :initial {\"MTA\" 2500.5402,\n             \"WETH\" 20.744}\n   :fees {\"ETH\" 0.0021}})\n\n(defn token-symbol\n  [token-address token-info]\n  (if (nil? token-address)\n    token-address\n    (let [symbol (:symbol\n                  (get token-info\n                       (clojure.string/lower-case token-address)))]\n      (or symbol token-address))))\n\n(defn minted-lp\n  [lp-position])\n\n(defn burned-lp\n  [lp-position])\n\n(defn tokens-deposited\n  [lp-position]\n  (let [tokens (:tokens (:pool lp-position))\n        token1 (first tokens)\n        token2 (second tokens)\n        mints (:mints lp-position)\n        deposits (map :deposits mints)\n        token1-deposits (map #(get % token1) deposits)\n        token2-deposits (map #(get % token2) deposits)\n        token1-total (if (empty? deposits)\n                       (BigNumber. \"0\")\n                       (reduce bignumber.core/+ token1-deposits))\n        token2-total (if (empty? deposits)\n                       (BigNumber. \"0\")\n                       (reduce bignumber.core/+ token2-deposits))]\n    {token1 token1-total\n     token2 token2-total}))\n\n(defn tokens-withdrawn\n  [lp-position]\n  (let [tokens (:tokens (:pool lp-position))\n        token1 (first tokens)\n        token2 (second tokens)\n        mints (:burns lp-position)\n        deposits (map :withdrawals mints)\n        token1-deposits (map #(get % token1) deposits)\n        token2-deposits (map #(get % token2) deposits)\n        token1-total (if (empty? deposits)\n                       (BigNumber. \"0\")\n                       (reduce bignumber.core/+ token1-deposits))\n        token2-total (if (empty? deposits)\n                       (BigNumber. \"0\")\n                       (reduce bignumber.core/+ token2-deposits))]\n    {token1 token1-total\n     token2 token2-total}))\n\n(defn eth-fees\n  [parsed-tx]\n  (let [gas-price (:gas-price parsed-tx)\n        gas-used (:gas-used parsed-tx)\n        eth-paid (bignumber.core/* gas-used gas-price)]\n    eth-paid))\n\n(defn fees-paid\n  [lp-position]\n  (let [mints (:mints lp-position)\n        minting-fees (if (empty? mints)\n                       (BigNumber. \"0\")\n                       (reduce bignumber.core/+ (map eth-fees mints)))\n        burns (:burns lp-position)\n        burning-fees (if (empty? burns)\n                       (BigNumber. \"0\")\n                       (reduce bignumber.core/+ (map eth-fees burns)))]\n    (bignumber.core/+ burning-fees minting-fees)))\n\n\n\n(defn pretty-price\n  [[token-address token-data]]\n  {(:symbol token-data) (first (:prices token-data))})\n\n(defn lp-prices\n  [lp-position token-info]\n  (let [latest-snapshot (first (:snapshots lp-position))\n        pool-tokens (:tokens (:pool lp-position))\n        earned (all-snapshot-claimed latest-snapshot)\n        rewards-tokens (map :token earned)\n        all-tokens (map clojure.string/lower-case\n                        (concat pool-tokens rewards-tokens))]\n    (select-keys token-info all-tokens)))\n\n\n\n(defn symbol->price\n  [symbol token-prices vs-price]\n  (get\n   (first (:prices (first (filter #(= (clojure.string/upper-case symbol)\n                                      (clojure.string/upper-case (:symbol %)))\n                                  (vals token-prices)))))\n   (clojure.string/lower-case vs-price)))\n\n(defn rewards-in-currency\n  [rewards currency token-prices]\n  (let [rewarded-currencies (filter some? (keys rewards))\n        res (if (empty? rewarded-currencies)\n              (BigNumber. \"0\")\n              (reduce bignumber.core/+\n                      (map #(bignumber.core/*\n                             (get rewards %)\n                             (symbol->price % token-prices currency))\n                           rewarded-currencies)))]\n    (if (. res isNaN)\n      (BigNumber. \"0\")\n      res)))\n\n\n(defn tokens-at-prices\n  [tokens token-prices]\n  (let [reward-tokens (keys tokens)\n        tokens-usd (rewards-in-currency tokens \"usd\" token-prices)\n        tokens-eth (rewards-in-currency tokens \"eth\" token-prices)]\n    {\"USD\" tokens-usd\n     \"ETH\" tokens-eth}))\n\n\n(defn gas-at-prices\n  [fees-paid token-prices]\n  {\"ETH\" fees-paid\n   \"USD\" (bignumber.core/*\n          fees-paid\n          (symbol->price \"WETH\" token-prices \"usd\"))})\n\n\n(defn lp-pnl\n  [diffs total-fees rewards token-prices]\n  (let [pool-pnl (tokens-at-prices diffs token-prices)\n        rewards (tokens-at-prices rewards token-prices)\n        _ (println \"tf:\" total-fees)\n        gas-costs (gas-at-prices total-fees token-prices)]\n    {:pool-pnl pool-pnl\n     :rewards rewards\n     :gas-costs gas-costs\n     :total-pnl (merge-with bignumber.core/-\n                            (merge-with bignumber.core/+ pool-pnl rewards)\n                            gas-costs)}))\n\n\n(defn get-minted\n  [lp-position]\n  (let [mints (map :lp-minted (:mints lp-position))]\n    (if (empty? mints)\n      (BigNumber. 0)\n      (reduce bignumber.core/+ mints))))\n\n(defn get-burned\n  [lp-position]\n  (let [mints (map :lp-burned (:burns lp-position))]\n    (if (empty? mints)\n      (BigNumber. 0)\n      (reduce bignumber.core/+ mints))))\n\n\n(defn wallet-lp-tokens\n  [lp-position]\n  (:lp-shares (first (:snapshots lp-position))))\n\n\n\n(defn open-lp-tokens\n  [lp-position]\n  (bignumber.core/- (get-minted lp-position)\n                    (get-burned lp-position)))\n\n(defn staked-lp-tokens\n  [lp-position]\n  (let [staked (:staked (first (:snapshots lp-position)))\n        staked-lps (filter some? (map :lp-shares staked))]\n    (if (empty? staked-lps)\n      (BigNumber. 0)\n      (reduce bignumber.core/+ staked-lps))))\n\n\n\n(defn lp-position-map\n  [lp-position token-info]\n  (let [;; current position\n        pool-tokens (:tokens (:pool lp-position))\n        token-symbols (map #(:symbol (get token-info %))\n                           pool-tokens)\n        latest-snapshot (first (:snapshots lp-position))\n        pool-lps (identity (:lp-shares (:pool latest-snapshot)))\n        wallet-lps (identity (:lp-shares latest-snapshot))\n        all-staked (filter some?\n                           (map (comp :lp-shares)\n                                (:staked latest-snapshot)))\n        staked-lps (if (empty? all-staked)\n                     (BigNumber. 0)\n                     (reduce bignumber.core/+ all-staked))\n\n        current-lps (bignumber.core/+ wallet-lps staked-lps)\n        user-mints (map :lp-minted (:mints lp-position))\n        minted-lps (if (empty? user-mints)\n                     (BigNumber. 0)\n                     (reduce bignumber.core/+ user-mints))\n        user-burns (map :lp-burned (:burns lp-position))\n        burned-lps (if (empty? user-burns)\n                     (BigNumber. 0)\n                     (reduce bignumber.core/+ user-burns))\n        user-lps' (bignumber.core/- minted-lps burned-lps)\n        account-matches (bignumber.core/>= current-lps user-lps')\n        lp-portion (if (bignumber.core/= (BigNumber. \"0\") pool-lps)\n                     (BigNumber. \"0\")\n                     (bignumber.core// user-lps' pool-lps))\n        token-reserves (:reserves (:pool latest-snapshot))\n        reserve-shares (map (comp\n                             (fn [x] (if (. x isNaN) (BigNumber. \"0.00\") x))\n                             #(bignumber.core/* lp-portion %))\n                            (vals token-reserves))\n        current (zipmap token-symbols reserve-shares)\n        ;;; rewards\n        earned (get-current-earned latest-snapshot)\n        _ (println \"earned\" earned)\n        earned' (zipmap (map (comp #(token-symbol % token-info) :token) earned)\n                        (map :qty earned))\n        _ (println \"earned'\" earned')\n        ;;claimed (get-current-claimed latest-snapshot)\n        claimed (identity (all-snapshot-claimed latest-snapshot))\n        claimed' (zipmap (map #(token-symbol % token-info) (map :token claimed))\n                         (map :qty claimed))\n        _ (println \"rewards claimed:\" claimed')\n        rewards (bignumber.core/+ (:qty earned) (:qty (first claimed)))\n        rewards-token (:token earned)\n        rtoken-symbol (token-symbol rewards-token token-info)\n        rewards' (if (empty? rtoken-symbol)\n                   {}\n                   {rtoken-symbol rewards})\n        rewards' (merge-with bignumber.core/+ claimed' earned')\n        _ (println \"rewards':\" rewards')\n        ;; initial position\n        minted-lp (minted-lp lp-position)\n        total-invested (tokens-deposited lp-position)\n        total-invested' (zipmap (map #(token-symbol % token-info) (keys total-invested))\n                                (vals total-invested))\n        burned-lp (burned-lp lp-position)\n        total-withdrawals (tokens-withdrawn lp-position)\n        total-withdrawals' (zipmap (map #(token-symbol % token-info) (keys total-withdrawals))\n                                   (vals total-withdrawals))\n        token-symbols (keys total-invested')\n        total-initial (zipmap token-symbols\n                              (map (fn [a b]\n                                      (bignumber.core/- a b))\n                                   (map #(get total-invested' %) token-symbols)\n                                   (map #(get total-withdrawals' %) token-symbols)))\n        token-diffs (zipmap token-symbols\n                            (map (fn [a b] (bignumber.core/- a b))\n                                 (map #(get current %) token-symbols)\n                                 (map #(get total-initial %) token-symbols)))\n        ;; fees\n        total-fees (fees-paid lp-position)\n        relevant-prices (lp-prices lp-position token-info)\n        pnl (lp-pnl token-diffs total-fees rewards' token-info)\n        ]\n    {:current current\n     ;;:ls latest-snapshot\n     :account-matches account-matches\n     :prices  (into {} (map pretty-price relevant-prices))\n     :diffs token-diffs\n     :pnl pnl\n     :address (:address (:pool lp-position))\n     :invested total-invested'\n     :lp-tokens {:minted minted-lps\n                 :burned burned-lps\n                 :current current-lps\n                 :diff (bignumber.core/-\n                        current-lps\n                        (bignumber.core/-\n                         minted-lps\n                         burned-lps) )}\n     :withdrawn total-withdrawals'\n     :symbols token-symbols\n     :rewards rewards'\n     :reward-breakdown {:claimed claimed'\n                        :earned earned'}\n     :initial total-initial\n     :fees {\"ETH\" total-fees}}))\n\n\n\n(defn make-burn-map\n  [lp-pool user-address mint-txr token1-decimals token2-decimals]\n  (let [tx (:tx mint-txr)\n        re (:receipt mint-txr)\n        lp-address (:address lp-pool)\n        token0 (first (:tokens lp-pool))\n        token1 (second (:tokens lp-pool))\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        pool-decimals 18\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n\n\n\n        transfer-logs (filter some? (map ethereum/decode-transfer-data (.-logs re)))\n        lp-transfers (filter #(and (= (clojure.string/lower-case lp-address)\n                                      (clojure.string/lower-case (:token-address %)))\n                                   (= (clojure.string/lower-case user-address)\n                                      (clojure.string/lower-case (:from %)))\n                                   (or\n                                    (= (clojure.string/lower-case (:token-address %))\n                                       (clojure.string/lower-case (:to %)))\n                                    (contains?\n                                     proxys-out\n                                     (clojure.string/lower-case (:to %)))))\n                             transfer-logs)\n\n        lp-qty (if (empty? lp-transfers)\n                 (BigNumber. \"0\")\n                 (reduce bignumber.core/+ (map :amount lp-transfers)))\n\n        burn-logs (filter some? (map #(ethereum/decode-burn-data % token1-decimals token2-decimals)\n                                     (.-logs re)))\n        lp-burns (filter #(= (clojure.string/lower-case lp-address)\n                             (clojure.string/lower-case (:pair-address %)))\n                         burn-logs)\n        token0-qty (reduce bignumber.core/+ (map :amount0 lp-burns))\n        token1-qty (reduce bignumber.core/+ (map :amount1 lp-burns))]\n    (if (and (> token0-qty 0)\n             (> token1-qty 0)\n             (> lp-qty 0))\n      {:block-number block-number\n       :tx-hash txhash\n       :lp-burned lp-qty\n       :gas-price gas-price\n       :gas-used gas-used\n       :withdrawals {token0 token0-qty\n                   token1 token1-qty}})))\n\n\n;; there could be serveral mints\n;; and several transfers here\n;; can we just add them up?\n;; we can get the total tokens used\n;; to mint by adding up the amounts\n;; in the Mint events where address mathces\n;; lp-pool address\n;; we also have which is the address\n;; for token0 from the lp-pool :tokens\n;; TODO potential problem here is there could be\n;; more than one Mint event, from different accounts,\n;; withint he same tx? maybe thre can't be\n\n\n(def zapper-in-addresses\n  [\"0xeee503b78e96f24c47c9ad8c287990e51697a99c\"\n   \"0x026BdaC2F308C0109A864138CCa1a623F7828F4a\"\n   \"0x775EE938186FddC13bD7C89D24820E1b0758F91D\"\n   \"0x80c5e6908368cb9db503ba968d7ec5a565bfb389\"])\n\n(def mint-addresses (set (conj zapper-in-addresses address0)))\n\n(defn make-mint-map\n  [lp-pool user-address mint-txr token1-decimals token2-decimals]\n  (let [tx (:tx mint-txr)\n        re (:receipt mint-txr)\n        lp-address (:address lp-pool)\n        token0 (first (:tokens lp-pool))\n        token1 (second (:tokens lp-pool))\n        txhash (.-hash tx)\n        block-number (.-blockNumber tx)\n        pool-decimals 18\n        gas-decimals 0\n        eth-decimals 18\n        gas-price (u/ebn->bn (.-gasPrice tx) eth-decimals)\n        gas-used (u/ebn->bn (.-gasUsed re) gas-decimals)\n\n\n        transfer-logs (filter some? (map #(ethereum/decode-transfer-data % pool-decimals) (.-logs re)))\n        lp-transfers (filter #(and (= (clojure.string/lower-case lp-address)\n                                      (clojure.string/lower-case (:token-address %)))\n                                   (contains? mint-addresses\n                                              (clojure.string/lower-case (:from %)))\n                                   (= (clojure.string/lower-case user-address)\n                                      (clojure.string/lower-case (:to %))))\n                             transfer-logs)\n        lp-qty (if (empty? lp-transfers)\n                 (BigNumber. \"0\")\n                 (reduce bignumber.core/+ (map :amount lp-transfers)))\n        ;;_ (println (map :amount lp-transfers))\n        mint-logs (filter some? (map #(ethereum/decode-mint-data % token1-decimals token2-decimals) (.-logs re)))\n        ;; in case other tokens are minted in the same tx\n        lp-mints (filter #(= (clojure.string/lower-case lp-address)\n                             (clojure.string/lower-case (:pair-address %)))\n                         mint-logs)\n        token0-qty (reduce bignumber.core/+ (map :amount0 lp-mints))\n        token1-qty (reduce bignumber.core/+ (map :amount1 lp-mints))]\n    (if (and (> token0-qty 0)\n             (> token1-qty 0)\n             (> lp-qty 0))\n      ;; we have the above check\n      ;; because make-mint-map could have been passed\n      ;; a tx where any address transfers lp-tokens to user-address\n      {:block-number block-number\n       :tx-hash txhash\n       :lp-minted lp-qty\n       :gas-price gas-price\n       :gas-used gas-used\n       :deposits {token0 token0-qty\n                  token1 token1-qty}})))\n\n;; test, desired mint-map for tx:\n;; https://etherscan.io/tx/0xe8a8c786a7fc99c2104dc13a868ad2f03ef6cc81ee24739e55f58afbeaa92935\n#_(def test-address \"0x3a0cca1a832644b60730e5d4c27947c5de609d62\")\n#_(def test-pool {:address mta-uni-address\n                  :exchange \"uniswap\",\n                  :tokens [mta-address, weth-address]})\n#_(go (def ctx (<! (<get-tx-receipt\n                    \"0xe8a8c786a7fc99c2104dc13a868ad2f03ef6cc81ee24739e55f58afbeaa92935\"))))\n\n\n#_(go (def tx (<! (<get-tx\n                   \"0xe8a8c786a7fc99c2104dc13a868ad2f03ef6cc81ee24739e55f58afbeaa92935\"))))\n\n#_(def ttxr {:receipt ctx :tx tx})\n#_(def result-mint-map (make-mint-map test-pool test-address ttxr))\n#_(def desired-mint-map\n  {:block-number 10484349\n   :tx-hash \"0xe8a8c786a7fc99c2104dc13a868ad2f03ef6cc81ee24739e55f58afbeaa92935\"\n   :lp-minted 143.829\n   :gas-price 0.000000063\n   :gas-used 2692206\n   :deposits {mta-address 1034.34\n              weth-address 20}})\n\n\n(defn <get-lp-mints\n  [lp-pool user-address]\n  (go\n    (let\n        [pair-address (:address lp-pool)\n         token1-address (first (:tokens lp-pool))\n         token2-address (second (:tokens lp-pool))\n         token1-decimals (<! (ethereum/<token-decimals token1-address))\n         token2-decimals (<! (ethereum/<token-decimals token2-address))\n         mint-transfers (<! (ethereum/<user-lp-mint-transfers\n                             provider pair-address user-address))\n         ;; assure unique hashes here since perhaps we can have\n         ;; more than one mint-transfer in the same tx\n         mint-hashes (set (map #(.-transactionHash %) mint-transfers))\n         mint-txrs (<! (ethereum/<get-trxs mint-hashes))\n         mints (map #(make-mint-map lp-pool user-address % token1-decimals token2-decimals)\n                    mint-txrs)]\n      (filter some? mints))))\n\n(defn <get-lp-burns\n  [lp-pool user-address]\n  (go\n    (let\n        [pair-address (:address lp-pool)\n         token1-address (first (:tokens lp-pool))\n         token2-address (second (:tokens lp-pool))\n         token1-decimals (<! (ethereum/<token-decimals token1-address))\n         token2-decimals (<! (ethereum/<token-decimals token2-address))\n\n         burn-transfers (<! (ethereum/<user-lp-burn-transfers\n                             provider pair-address user-address))\n         ;; assure unique hashes here since perhaps we can have\n         ;; more than one mint-transfer in the same tx\n         burn-hashes (set (map #(.-transactionHash %) burn-transfers))\n         burn-txrs (<! (ethereum/<get-trxs burn-hashes))\n         burns (map #(make-burn-map lp-pool user-address % token1-decimals token2-decimals)\n                    burn-txrs)]\n      (filter some? burns))))\n\n\n(defn <get-user-mints\n  [user-address lp-pools]\n    (let [mints\n          (mapv (fn [p] (go {(:address p)\n                             (<! (<get-lp-mints p user-address))}))\n               lp-pools)]\n      (->> (cljs.core.async/merge mints)\n           (cljs.core.async/reduce merge {}))))\n\n(defn <get-user-burns\n  [user-address lp-pools]\n  (let [mints\n        (mapv (fn [p] (go {(:address p)\n                           (<! (<get-lp-burns p user-address))}))\n              lp-pools)]\n    (->> (cljs.core.async/merge mints)\n         (cljs.core.async/reduce merge {}))))\n\n\n\n\n\n(defn <user-lp-destinations\n  [snapshots user-address]\n  (let [token-addresses (map :token (last-lp-snapshots snapshots))\n        destinations (map (fn [x] (go (<! (ethereum/<user-token-destinations provider x user-address))))\n                          token-addresses)]\n    (->> (cljs.core.async/merge destinations)\n         (cljs.core.async/reduce concat [])\n         (cljs.core.async/filter< #(not= '() %))\n         #_(cljs.core.async/<!))))\n\n\n#_(go (def my-destinations (<! (<user-lp-destinations (:snapshots my-graph-positions) my-address))))\n\n(defn add-stakings\n  [])\n\n(defn <user-lp-positions\n  [destinations user-address]\n  (let [unique-destinations (map\n                             first\n                             (vals (group-by\n                                    #(select-keys % [:token :to])\n                                    destinations)))\n        positions (map (fn [x] (go {:pos\n                                    (<! (<staked-lp-positions\n                                         x user-address))\n                                    :dst (:dst x)\n                                    :stakings\n                                    (filter\n                                     #(and (= (:dst x) (:dst %))\n                                           (= (:token x) (:token %)))\n                                     destinations)\n                                    :token (:token x)}))\n                       unique-destinations)]\n    (->> (cljs.core.async/merge positions)\n         ;;(cljs.core.async/filter< #(not= 0 (:token0-balance (:pos %))))\n         (cljs.core.async/reduce conj [])\n         #_(cljs.core.async/<!))))\n\n#_(go (def my-positions (<! (<user-lp-positions my-destinations my-address))))\n\n\n\n\n\n\n;; TODO current situation works, and we'll be able to calculate\n;; amm-pool pnl across diferent staking pools and without staking\n;; but not sure what the best way to segregate out dst will be for rewards\n;; probably easiest is to add up all rewards acrsoss staking pools\n;; and present one pnl with rewards per amm-pool\n;; but we'll eventually want to present pnl segregated by staking pools\n(defn <user-get-staked\n  [user-address user-snapshots]\n  (go (let [lsnapshots  (last-lp-snapshots user-snapshots)\n            user-destinations (<! (<user-lp-destinations user-snapshots user-address))\n            user-positions (<! (<user-lp-positions user-destinations user-address))]\n        (filter #(not= 0 (:token0-balance (:pos %)))\n                (concat user-positions lsnapshots)\n                #_(map (fn [[k v]] (apply deep-merge-with + v))\n                     (group-by (juxt :token :dst) (concat user-positions lsnapshots)))))))\n\n\n\n(defn sum-pairs\n  [pair-positions]\n  (map (fn [[k v]] (update-in\n                    (first v)\n                    [:pos]\n                    assoc :token0-balance\n                    (apply + (map (comp :token0-balance :pos) v))\n                    :token1-balance\n                    (apply + (map (comp :token1-balance :pos) v))))\n       (group-by :token (map #(dissoc % :dst) pair-positions))))\n\n\n(defn get-pair\n  [pair-positions token0 token1]\n  (filter #(and (= token0 (:token0-symbol (:pos %)))\n                (= token1 (:token1-symbol (:pos %))))\n          pair-positions))\n\n(def rsfarmer-address \"0x1231c75850bf52851736891a39790a82bcc2e2c4\")\n#_(go (def rsfarmer-snapshots (<! (<user-lp-snapshots rsfarmer-address))))\n#_(go (def rsfarmer-lp-transfers (<! (<user-token-transfers provider rsfarmer-lp-example rsfarmer-address))))\n#_(go (def rsfarmer-destinations (<! (<user-lp-destinations rsfarmer-snapshots rsfarmer-address))))\n#_(go (def rsfarmer-positions (<! (<user-lp-positions rsfarmer-destinations rsfarmer-address))))\n#_(go (def rsfarmer-state (<! (<user-get-state rsfarmer-address))))\n\n\n;; try to get staked positoin for one rsfarmer contrat\n(def rsfarmer-dst1 \"0x9EC7De79572312d00f536b856B9E6fE7d0a37AF1\")\n(def rsfarmer-lp2 \"0x2155128c06c4ee4b751c23d9403c07648afa5f5a\")\n(def rsfarmer-lp1 \"0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852\")\n\n(def rsfarmer-dst3 \"0xc5D00a4E730fC2e1C77764A74E5F1308A460de7F\")\n(def rsfarmer-lp3 \"0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc\")\n\n\n#_(go (def rsfarmer-pos (<! (<staked-lp-positions rsfarmer-lp1\n                                                  rsfarmer-dst1\n                                                  rsfarmer-address))))\n\n#_(go (def rsfarmer-pos1 (<! (<staked-lp-positions rsfarmer-lp1\n                                                         rsfarmer-dst1\n                                                         rsfarmer-address))))\n\n\n#_(go (def rsfarmer-pos3 (<! (<staked-lp-positions rsfarmer-lp3\n                                                   rsfarmer-dst3\n                                                   rsfarmer-address))))\n\n#_(go (def rsfarmer-lptx (<! (<user-token-transfers provider rsfarmer-lp3 rsfarmer-address))))\n#_(go (def rsfarmer-dsttx (<! (<user-token-transfers provider rsfarmer-dst3 rsfarmer-address))))\n\n\n\n;; TODO rewrite user-lp-destinations so that it does the recursive\n;; method described in step 3 below\n;; 1) Get the unique lp token destinations of all the last snapshots\n;; 2) for every destination:\n;;   a)  try to get Stake events for the user on destination contract, if we\n;;       get one, we pass this to the StakingRewards contract\n;;       handler and are done checking this destionation\n;;   b)  try to get deposit(uint256 _pid, uint256 _amount) events\n;;       for the user on the destination contract. if we get one, we pass\n;;       along to the master-cheff contract handler along with the pid or\n;;       maybe the handlers should get the event in question, and done with\n;;       this destination\n;;   c)  try to compare a name against the known contract names, and if\n;;       we have a match, we are done with this transaction\n;;   d)  if none of the above, log pool as suspect and give up on this destination\n;; 3) Get unique destinations for all the lp destinations for the user and go\n;;    to step 2... Maybe the thing to do here is for <user-lp-destinations\n;;    to recursively check for destinations of destinations, and then we can\n;;    get rid of this step here.\n\n;; TODO check what happens to the heuristic with this sake staking contract\n;; https://etherscan.io/address/0x30a5c50f65c71f4700f4cb2c7972285f7e415f84#code\n\n;; old idea: instead of getting a staking-address (from user-token-destinations)\n;; it can get user-transfer map, which includes the hash of the tx\n;; then the check can start by seeing if the contract has a known name\n;; if it does we're done and hand-off to the appropiate fn\n;; if it doesnt then we have two known cases:\n;; 1) Get the tx so that we can inspect the data,\n;; 2) if it is a stakeWithPermit tx then we can assume\n;; it is a uni style StakingRewards contract\n;; see example https://etherscan.io/tx/0x66ca2d9acdba227ecd828940556ec4c4de92c211566942c20a74e01c62a1ceff\n;;    if it just a stake tx then we can assume it is\n;;    a mta style StakingRewards contract\n;; see example https://etherscan.io/tx/0x2ea8314b8c3a14430fdbf964a05227e4fae32f05574f8e3eeef2c58437720f6c\n;;    both would be send ot the same handler function\n;;    to calculate the LPs\n;; 3)if it any of the below fuctions\n;; which we can check using the first four bytes of the data, as shown by x and y below\n;; we can assume it's a master-cheff contract, we get the pid as with decode-tx-data-args\n;; and proceed to the master cheff staking handler function.\n;; - deposit(uint256 _pid, uint256 _amount)\n;; - withdraw(uint256 _pid, uint256 _amount)\n;; - emergencyWithdraw(uint256 _pid)\n\n\n#_(def x (. ethers/utils hexDataSlice\n            (. ethers/utils keccak256 (. ethers/utils toUtf8Bytes \"deposit(uint256,uint256)\"))\n            0 4))\n\n#_(go (def atx (<p! (. provider getTransaction (.-transactionHash (first rsfarmer-lp-transfers))))))\n#_(def y\n    (. ethers/utils hexDataSlice (.-data atx) 0 4))\n\n(def pool-in-sashimi \"0x1629b0259e6e5c315b8eea09fd1a4d0a26291f98\")\n(def sashimi-cheff \"0x1DaeD74ed1dD7C9Dabbe51361ac90A69d851234D\")\n#_(go (def farmer-token-transfers (<! (<user-token-transfers provider pool-in-sashimi rsfarmer-address))))\n\n\n\n\n#_(def decoded-args (decode-tx-data-args sr-deposit-abi (.-data atx)))\n;; the pid is the first value here, amount is the second\n\n;; 4)  If it is none of this, we make a log for possible unknown staking contract\n;; and perhaps do a last try just using the StakingRewards contract\n;; Assumptions we are making:\n;; 1) That matching-names will be indicative of (mostly) same contracts\n\n;; Another posibility here is to try to get the contract abi from etherscan\n;; and try to match via tht to known ABIs. Downside is more specific\n;; integration with etherscan as opossed to generic node providers\n\n\n\n\n\n(defn reward-tokens\n  [staked-positions]\n  (set (mapv clojure.string/lower-case\n             (filter some?\n                     (map (comp :rewards-token :pos)\n                          staked-positions)))))\n\n(defn pooled-tokens\n  [positions]\n  (set (map clojure.string/lower-case\n            (mapcat (juxt (comp :id :token0) (comp :id :token1))\n                    (map :pair positions)))))\n\n\n\n(defn make-token-info\n  [token-infos token-prices]\n  (let [z (zipmap (map :address token-infos)\n                  (map (fn [ti]\n                         (let [token-price\n                               (get token-prices (:address ti))]\n                           (into ti {:prices [(zipmap (map name (keys token-price))\n                                                      (vals token-price))]})))\n                       token-infos))]\n    z))\n\n\n\n\n\n\n#_(def pooled-infos\n    (map #(clojure.set/rename-keys % {:id :address})\n         (mapcat (juxt :token0 :token1)\n                 (map :pair (:positions my-graph-positions)))))\n\n\n#_(def token-ids\n    (set (concat (pooled-tokens (:positions my-graph-positions))\n                 (reward-tokens my-staked))))\n\n#_(def non-pooled-tokens\n    (second (clojure.data/diff\n             (pooled-tokens (:positions my-graph-positions))\n             (reward-tokens my-staked))))\n\n\n#_(go (def non-pooled-infos\n        (<! (<erc20-infos non-pooled-tokens))))\n\n\n#_(def all-token-infos (set (concat pooled-infos non-pooled-infos)))\n#_(go (def token-prices (<! (<coingecko-token-prices token-ids))))\n\n\n\n#_(def my-pools (map gposition->pool (:positions my-graph-positions)))\n#_(go (def user-mints (<! (<get-user-mints my-address my-pools))))\n#_(go (def user-burns (<! (<get-user-burns my-address my-pools))))\n#_(def token-info (make-token-info all-token-infos token-prices))\n#_(def state (make-state my-graph-positions my-staked token-info user-mints\n                         user-burns))\n\n(defn snapshot->symbols\n  [snapshot]\n  (str \"- \" (:token0-symbol (:pos snapshot))\n       \"/\"\n       (:token1-symbol (:pos snapshot))))\n\n(defn <get-account-state\n  [account-or-name]\n  (go\n    (let [account (<! (ethereum/<resolve-address account-or-name))\n          _ (swap! app-state update-in [:steps] conj\n                   (str \"Seeking LP positions on Uniswap pools for \" account-or-name))\n          graph-positions (<! (<graph-uniswap-positions account))\n          last-snaps (last-lp-snapshots (:snapshots graph-positions))\n          pair-symbols (clojure.string/join \"\\n\" (map snapshot->symbols last-snaps))\n          many-pools-step [:pre (str \"Account \"\n                               account-or-name\n                               \"\\nhas provided liquidity to \"\n                              (count last-snaps)\n                              \" pools:\\n\\n\"\n                              pair-symbols)]\n\n          _ (swap! app-state update-in [:steps] conj many-pools-step)\n          _ (swap! app-state update-in [:steps] conj \"Seeking staked LP tokens ...\")\n          staked (<! (<user-get-staked account (:snapshots graph-positions)))\n          many-transfers-step (str \"Account has transferred LP tokens to \"\n                                (count (distinct (filter some? (map :dst staked))))\n                                \" distinct addresses ...\")\n          with-stakings (filter #(> (count (:stakings %)) 0) staked)\n          many-stakes-step (str \"Account staked LP tokens in \"\n                                (count (distinct (filter some? (map :dst with-stakings))))\n                                \" distinct (identified) contracts ...\")\n          _ (swap! app-state update-in [:steps] conj many-transfers-step)\n          ;;_ (swap! app-state update-in [:steps] conj many-stakes-step)\n          ptoken-infos\n          (map #(clojure.set/rename-keys % {:id :address})\n               (mapcat (juxt :token0 :token1)\n                       (map :pair (:positions graph-positions))))\n\n          ptokens (pooled-tokens (:positions graph-positions))\n          rtokens (reward-tokens staked)\n          ;;weth required for gas costs\n          weth-address [\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"]\n          all-tokens (set (concat ptokens rtokens weth-address))\n          rtoken-infos (<! (ethereum/<erc20-infos (concat rtokens weth-address)))\n          all-token-infos (set (concat ptoken-infos rtoken-infos))\n          _ (swap! app-state update-in [:steps] concat [\"Getting token prices...\"])\n          token-prices (<! (gecko/<token-prices all-tokens))\n          account-pools (map gposition->pool (:positions graph-positions))\n          _ (swap! app-state update-in [:steps] concat [\"Getting LP Mint events from account...\"])\n          account-mints  (<! (<get-user-mints account account-pools))\n          _ (swap! app-state update-in [:steps] concat\n                   [(str \"Found \" (count (apply concat (vals account-mints))) \" LP Mint events by account\")])\n          _ (swap! app-state update-in [:steps] concat [\"Getting LP Burn events from account...\"])\n          account-burns (<! (<get-user-burns account account-pools))\n          _ (swap! app-state update-in [:steps] concat\n                   [(str \"Found \" (count (apply concat (vals account-burns))) \" LP Burn events from account\")])\n          tokens-info (make-token-info all-token-infos token-prices)\n          state (make-state graph-positions\n                            staked\n                            tokens-info\n                            account-mints\n                            account-burns)]\n      state)))\n\n\n;;DOING\n(def lend-uni-address \"0xab3f9bf1d81ddb224a2014e98b238638824bcf20\")\n(def lend-address \"0x80fb784b7ed66730e8b1dbd9820afd29931aab03\")\n\n\n(def yfi-address \"0x0bc529c00c6401aef6d220be8c6ea1667f6ad93e\")\n(def yfi-uni-address \"0x2fdbadf3c4d5a8666bc06645b8358ab803996e28\")\n\n(def comp-address \"0xc00e94cb662c3520282e6f5717214004a7f26888\")\n(def comp-uni-address \"0xcffdded873554f362ac02f8fb1f02e5ada10516f\")\n\n\n(def snx-address \"0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f\")\n\n\n#_(def lend-pool (:pool (get (:lps state) lend-uni-address)))\n#_(def mta-pool (:pool (get (:lps state) mta-uni-address)))\n#_(def yfi-pool (:pool (get (:lps state) yfi-uni-address)))\n#_(go (def a1 (<! (<user-token-transfers provider lend-uni-address my-address))))\n\n#_(go (def m0 (<! (<get-lp-mints lend-pool my-address))))\n#_(go (def b0 (<! (<get-lp-burns lend-pool my-address))))\n\n\n\n(def zapp-in-address \"0x80c5e6908368cb9db503ba968d7ec5a565bfb389\")\n#_(go (def mt (<! (<get-trxs mint-hashes))))\n#_(def mm (make-mint-map lend-pool my-address (first mt) 18 18))\n\n\n\n(defn symbol->address\n  [symbol state]\n  (:address\n   (first\n    (filter #(= (:symbol %) symbol)\n            (vals (:token-info state))))))\n\n(defn tokens->lp\n  [token1 token2 state]\n  (let []))\n\n(defn lp-tokens\n  [lp]\n  (:tokens (:pool lp)))\n\n(defn pair->address\n  [symbol1 symbol2 state]\n  (let [token1 (symbol->address symbol1 state)\n        token2 (symbol->address symbol2 state)]\n    (:address\n     (:pool\n      (first\n       (filter #(and (contains? (set (lp-tokens %)) token1)\n                    (contains? (set (lp-tokens %)) token2))\n               (vals (:lps state))))))))\n\n(defn symbols->lp\n  [symbol1 symbol2 state]\n  (let [lp-address (pair->address symbol1 symbol2 state)]\n    (get (:lps state) lp-address)))\n\n\n(defn symbols->pos\n  [symbol1 symbol2 state]\n  (let [lp (symbols->lp symbol1 symbol2 state)]\n    (lp-position-map lp (:token-info state))))\n\n\n\n(defn compute-total\n  [pnl-key state only-open?]\n  (let [lps (map #(lp-position-map % (:token-info state))\n                 (vals (:lps state)))\n        lps' (if only-open?\n               (filter #(bignumber.core/< (BigNumber. \"0.000001\")\n                                          (reduce bignumber.core/+ (vals (:current %))))\n                       lps)\n               lps)\n        lp-pnls (map :pnl lps')]\n    (if (empty? lp-pnls)\n      {\"USD\" (BigNumber. \"0\") \"ETH\" (BigNumber. \"0\")}\n      (apply merge-with bignumber.core/+ (map pnl-key lp-pnls)))))\n\n\n(defn compute-totals\n  ([state]\n   (compute-totals state false))\n  ([state only-open?]\n   {:gas-costs (compute-total :gas-costs state only-open?)\n    :rewards (compute-total :rewards state only-open?)\n    :pool-pnl (compute-total :pool-pnl state only-open?)\n    :total-pnl (compute-total :total-pnl state only-open?)}))\n\n\n\n;; TODO some nice tools to make\n;; give it a user address, token, staking contract -> get all staked amounts\n#_(go (def a4 (<! (ethereum/<user-token-transfers\n                   provider\n                   \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\"\n                   (:user-address (:full-state @app-state))\n                   \"0xf79Ae82DCcb71ca3042485c85588a3E0C395D55b\"))))\n;; get all lp transfers out\n#_(go (def to (<! (ethereum/<user-token-transfers\n                   provider\n                   \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\"\n                   (:user-address (:full-state @app-state))\n                   nil))))\n\n#_(go (def ti (<! (ethereum/<user-token-transfers\n                   provider\n                   \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\"\n                   nil\n                   (:user-address (:full-state @app-state))))))\n\n#_(go (def e0 (<! (ethereum/<user-token-transfers\n                   provider\n                   \"0xCffA068F1E44D98D3753966eBd58D4CFe3BB5162\"\n                   nil\n                   (:user-address (:full-state @app-state))\n                   ))))\n\n\n#_(go (def e1 (<! (ethereum/<user-token-transfers\n                   provider\n                   \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\"\n                   \"0xf79Ae82DCcb71ca3042485c85588a3E0C395D55b\"\n                   \"0xCffA068F1E44D98D3753966eBd58D4CFe3BB5162\"))))\n\n\n\n\n#_(go (def e2 (<! (ethereum/<user-token-transfers\n                   provider\n                   \"0xa478c2975ab1ea89e8196811f51a7b7ade33eb11\"\n                   nil\n                   \"0xCffA068F1E44D98D3753966eBd58D4CFe3BB5162\"))))\n\n\n\n;; TODO wtf with this account\n;; 0x01112a60f427205dca6e229425306923c3cc2073\n;; another wtf account\n;; 0xb0fa2beee3cf36a7ac7e99b885b48538ab364853\n\n"]}