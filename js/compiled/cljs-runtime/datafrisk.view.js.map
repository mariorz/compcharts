{"version":3,"sources":["datafrisk/view.cljs"],"mappings":"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","names":["datafrisk.view/styles","datafrisk.view/ErrorIcon","datafrisk.view/ErrorText","text","p__39092","map__39093","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","datafrisk.view/ExpandButton","expanded?","path","emit-fn","G__39095","G__39096","datafrisk.view/button-style","datafrisk.view/ExpandAllButton","data","cljs.core.merge","datafrisk.view/CollapseAllButton","datafrisk.view/CopyButton","datafrisk.view/NilText","cljs.core.pr_str","datafrisk.view/StringText","datafrisk.view/KeywordText","datafrisk.view/NumberText","datafrisk.view/KeySet","keyset","cljs.core.sort_by","cljs.core/str","cljs.core.map_indexed","i","cljs.core/Keyword","cljs.core.interpose","p__39097","map__39098","datafrisk.view/Node","swappable","metadata-paths","e","G__39100","G__39101","G__39102","cljs.core/name","G__39103","G__39104","G__39105","cljs.core.keyword","cljs.core/object?","js/JSON","G__39106","G__39107","G__39108","js/Number","temp__5735__auto__","errors","datafrisk.view/expandable?","v","cljs.core/map?","cljs.core/seq?","cljs.core/coll?","p__39109","map__39110","datafrisk.view/CollectionSummary","cljs.core/keys","cljs.core/set?","cljs.core/count","cljs.core/vector?","p__39112","map__39113","vec__39114","cljs.core.nth","datafrisk.view/KeyValNode","k","path-to-here","cljs.core.conj","expandable-node?","cljs.core/empty?","metadata","datafrisk.view/DataFrisk","p__39118","map__39119","datafrisk.view/ListVecNode","hide-header?","x","p__39121","map__39122","datafrisk.view/SetNode","p__39124","map__39125","datafrisk.view/MapNode","all","p__39127","vec__39128","_","cljs.core.assoc","p__39131","map__39132","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core/deref","datafrisk.view/conj-to-set","coll","or__4126__auto__","datafrisk.view/expand-all-paths","root-value","current-expanded-paths","remaining","expanded-paths","cljs.core/seq","vec__39143","seq__39144","first__39145","cljs.core/first","cljs.core/next","current","rest","current-node","G__39146","cljs.core.concat","cljs.core.map","p__39147","vec__39148","cljs.core/assoc-in","node","datafrisk.view/copy-to-clipboard","pretty","sb__4667__auto__","goog.string/StringBuffer","*print-newline*-orig-val__39151","cljs.core/*print-newline*","*print-fn*-orig-val__39152","cljs.core/*print-fn*","*print-newline*-temp-val__39153","*print-fn*-temp-val__39154","x__4668__auto__","cljs.pprint.pprint","textArea","js/document","G__39155","datafrisk.view/collapse-all","p1__39156#","datafrisk.util/map-vals","datafrisk.view/emit-fn-factory","state-atom","id","event","args","G__39157","js/Error","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.partial","vec__39158","value","cljs.core/reset!","datafrisk.view/Root","data-frisk","cljs.core/IAtom","cljs.core.get_in","datafrisk.view/VisibilityButton","visible?","update-fn","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","datafrisk.view/DataFriskView","seq39164","self__4724__auto__","expand-by-default","p1__39162#","p2__39163#","cljs.core.reduce","cljs.core.range","reagent.core.atom","cljs.core/not"],"sourcesContent":["(ns datafrisk.view\n  (:require [cljs.pprint :refer [pprint]]\n            [reagent.core :as r]\n            [datafrisk.util :as u]))\n\n(declare DataFrisk)\n\n(def styles\n  {:shell {:backgroundColor \"#FAFAFA\"\n           :fontFamily \"Consolas,Monaco,Courier New,monospace\"\n           :fontSize \"12px\"\n           :z-index 9999}\n   :strings {:color \"#4Ebb4E\"}\n   :keywords {:color \"purple\"}\n   :numbers {:color \"blue\"}\n   :nil {:color \"red\"}\n   :shell-visible-button {:backgroundColor \"#4EE24E\"}})\n\n(defn ErrorIcon []\n  [:svg {:viewBox \"0 0 30 42\" :width \"100%\" :height \"100%\"}\n   [:path {:fill \"darkorange\"\n           :stroke \"red\"\n           :stroke-width \"2\"\n           :d \"M15 3\n           Q16.5 6.8 25 18\n           A12.8 12.8 0 1 1 5 18\n           Q13.5 6.8 15 3z\"}]\n   [:circle {:cx 15 :cy 32 :r 7 :fill \"yellow\"}]])\n\n(defn ErrorText [text]\n  [:div {:style {:fontSize \"0.7em\"\n                 :display \"flex\"\n                 :align-items \"center\"\n                 :color \"red\"}} text])\n\n(defn ExpandButton [{:keys [expanded? path emit-fn]}]\n  [:button {:style {:border 0\n                    :padding \"5px 4px 5px 2px\"\n                    :textAlign \"center\"\n                    :backgroundColor \"transparent\"\n                    :width \"20px\"\n                    :height \"20px\"\n                    :cursor \"pointer\"}\n            :onClick #(emit-fn (if expanded? :contract :expand) path)}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width \"100%\" :height \"100%\"\n          :style {:transition \"all 0.2s ease\"\n                  :transform (when expanded? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"black\"}]]])\n\n(def button-style {:padding \"1px 3px\"\n                   :cursor \"pointer\"\n                   :background-color \"white\"})\n\n(defn ExpandAllButton [emit-fn data]\n  [:button {:onClick #(emit-fn :expand-all data)\n            :style (merge button-style\n                          {:borderTopLeftRadius \"2px\"\n                           :borderBottomLeftRadius \"2px\"\n                           :border \"1px solid darkgray\"})}\n   \"Expand\"])\n\n(defn CollapseAllButton [emit-fn data]\n  [:button {:onClick #(emit-fn :collapse-all)\n            :style\n            (merge button-style\n                   {:borderTop \"1px solid darkgray\"\n                    :borderBottom \"1px solid darkgray\"\n                    :borderRight \"1px solid darkgray\"\n                    :borderLeft \"0\"})}\n   \"Collapse\"])\n\n(defn CopyButton [emit-fn data]\n  [:button {:onClick #(emit-fn :copy data)\n            :style (merge button-style\n                          {:borderTopRightRadius \"2px\"\n                           :borderBottomRightRadius \"2px\"\n                           :borderTop \"1px solid darkgray\"\n                           :borderBottom \"1px solid darkgray\"\n                           :borderRight \"1px solid darkgray\"\n                           :borderLeft \"0\"})}\n   \"Copy\"])\n\n(defn NilText []\n  [:span {:style (:nil styles)} (pr-str nil)])\n\n(defn StringText [data]\n  [:span {:style (:strings styles)} (pr-str data)])\n\n(defn KeywordText [data]\n  [:span {:style (:keywords styles)} (str data)])\n\n(defn NumberText [data]\n  [:span {:style (:numbers styles)} data])\n\n(defn KeySet [keyset]\n  [:span\n   (->> keyset\n        (sort-by str)\n        (map-indexed\n          (fn [i data] ^{:key i} [:span\n                                  (cond (nil? data) [NilText]\n                                        (string? data) [StringText data]\n                                        (keyword? data) [KeywordText data]\n                                        (number? data) [NumberText data]\n                                        :else (str data))]))\n        (interpose \" \"))])\n\n(defn Node [{:keys [data path emit-fn swappable metadata-paths]}]\n  [:div {:style {:display \"flex\"}} (cond\n          (nil? data)\n          [NilText]\n\n          (string? data)\n          (if swappable\n            [:input {:type \"text\"\n                     :default-value (str data)\n                     :on-change\n                     (fn string-changed [e]\n                       (emit-fn :changed path (.. e -target -value)))}]\n            [StringText data])\n\n          (keyword? data)\n          (if swappable\n            [:input {:type \"text\"\n                     :default-value (name data)\n                     :on-change\n                     (fn keyword-changed [e]\n                       (emit-fn :changed path (keyword (.. e -target -value))))}]\n            [KeywordText data])\n\n          (object? data)\n          (str data \" \" (.stringify js/JSON data))\n\n          (number? data)\n          (if swappable\n            [:input {:type \"number\"\n                     :default-value data\n                     :on-change\n                     (fn number-changed [e]\n                       (emit-fn :changed path (js/Number (.. e -target -value))))}]\n            [NumberText data])\n          :else\n          (str data))\n   (when-let [errors (:error (get metadata-paths path))]\n     [ErrorText (str \"\\u00A0 \" errors)])])\n\n(defn expandable? [v]\n  (or (map? v) (seq? v) (coll? v)))\n\n(defn CollectionSummary [{:keys [data]}]\n  (cond (map? data) [:div {:style {:flex \"0 1 auto\"}}\n                     [:span \"{\"]\n                     [KeySet (keys data)]\n                     [:span \"}\"]]\n        (set? data) [:div {:style {:flex \"0 1 auto\"}} [:span \"#{\"]\n                     (str (count data) \" items\")\n                     [:span \"}\"]]\n        (or (seq? data)\n            (vector? data)) [:div {:style {:flex 1}}\n                             [:span (if (vector? data) \"[\" \"(\")]\n                             (str (count data) \" items\")\n                             [:span (if (vector? data) \"]\" \")\")]]))\n\n(defn KeyValNode [{[k v] :data :keys [path metadata-paths emit-fn swappable]}]\n  (let [path-to-here (conj path k)\n        expandable-node? (and (expandable? v)\n                              (not (empty? v)))\n        metadata (get metadata-paths path-to-here)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     [:div {:style {:display \"flex\"}}\n      [:div {:style {:flex \"0 0 20px\"}}\n       (when expandable-node?\n         [ExpandButton {:expanded? expanded?\n                        :path path-to-here\n                        :emit-fn emit-fn}])]\n      [:div {:style {:flex \"0 1 auto\"}}\n       [:div {:style {:display \"flex\"\n                      :flex-flow \"row\"}}\n        [:div {:style {:flex \"0 1 auto\"}}\n         [Node {:data k}]]\n        [:div {:style {:flex \"0 1 auto\" :paddingLeft \"4px\"}}\n         (if (expandable? v)\n           [CollectionSummary {:data v}]\n           [Node {:data v\n                  :swappable swappable\n                  :path path-to-here\n                  :metadata-paths metadata-paths\n                  :emit-fn emit-fn}])]]]]\n     (when expanded?\n       [:div {:style {:flex \"1\"}}\n        [DataFrisk {:hide-header? true\n                    :data v\n                    :swappable swappable\n                    :path path-to-here\n                    :metadata-paths metadata-paths\n                    :emit-fn emit-fn}]])]))\n\n(defn ListVecNode [{:keys [data path metadata-paths emit-fn swappable hide-header?]}]\n  (let [metadata (get metadata-paths path)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     (when-not hide-header?\n       [:div {:style {:display \"flex\"}}\n        (when (:error metadata)\n          [:div {:style {:margin-left \"-1em\"\n                         :width \"1em\"\n                         :height \"1.2em\"}}\n           [ErrorIcon]])\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}]\n        [:div {:style {:flex \"0 1 auto\"}}\n         [:span (if (vector? data) \"[\" \"(\")]\n         (str (count data) \" items\")\n         [:span (if (vector? data) \"]\" \")\")]]])\n     (when expanded?\n       [:div {:style {:flex \"0 1 auto\" :padding \"0 0 0 20px\"}}\n        (when (:error metadata)\n          [:div {:style {:paddingBottom \"4px\"}}\n           [ErrorText (:error metadata)]])\n        (map-indexed (fn [i x] ^{:key i} [DataFrisk {:data x\n                                                     :swappable swappable\n                                                     :path (conj path i)\n                                                     :metadata-paths metadata-paths\n                                                     :emit-fn emit-fn}]) data)])]))\n\n(defn SetNode [{:keys [data path metadata-paths emit-fn swappable hide-header?]}]\n  (let [metadata (get metadata-paths path)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     (when-not hide-header?\n       [:div {:style {:display \"flex\"}}\n        (when (:error metadata)\n          [:div {:style {:margin-left \"-1em\"\n                         :width \"1em\"\n                         :height \"1.2em\"}}\n           [ErrorIcon]])\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}]\n        [:div {:style {:flex \"0 1 auto\"}}\n         [:span \"#{\"]\n         (str (count data) \" items\")\n         [:span \"}\"]]])\n     (when expanded?\n       [:div {:style {:flex \"0 1 auto\" :paddingLeft \"20px\"}}\n        (when (:error metadata)\n          [:div {:style {:paddingBottom \"4px\"}}\n           [ErrorText (:error metadata)]])\n        (map-indexed (fn [i x] ^{:key i} [DataFrisk {:data x\n                                                     :swappable swappable\n                                                     :path (conj path i)\n                                                     :metadata-paths metadata-paths\n                                                     :emit-fn emit-fn}]) data)])]))\n\n(defn MapNode [{:keys [data path metadata-paths emit-fn hide-header?] :as all}]\n  (let [metadata (get metadata-paths path)\n        expanded? (:expanded? metadata)]\n    [:div {:style {:display \"flex\"\n                   :flex-flow \"column\"}}\n     (when-not hide-header?\n       [:div {:style {:display \"flex\"}}\n        (when (:error metadata)\n          [:div {:style {:margin-left \"-1em\"\n                         :width \"1em\"\n                         :height \"1.2em\"}}\n           [ErrorIcon]])\n        [ExpandButton {:expanded? expanded?\n                       :path path\n                       :emit-fn emit-fn}]\n        [:div {:style {:flex \"0 1 auto\"}}\n         [:span (str \"{\")]\n         [KeySet (keys data)]\n         [:span \"}\"]]])\n     (when expanded?\n       [:div {:style {:flex \"0 1 auto\" :paddingLeft \"20px\"}}\n        (when (:error metadata)\n          [:div {:style {:paddingBottom \"4px\"}}\n           [ErrorText (:error metadata)]])\n        (->> data\n             (sort-by (fn [[k _]] (str k)))\n             (map-indexed (fn [i x] ^{:key i} [KeyValNode (assoc all :data x)])))])]))\n\n(defn DataFrisk [{:keys [data] :as all}]\n  (cond (map? data) [MapNode all]\n        (set? data) [SetNode all]\n        (or (seq? data) (vector? data)) [ListVecNode all]\n        (satisfies? IDeref data) [DataFrisk (assoc all :data @data)]\n        :else [:div {:style {:paddingLeft \"20px\"}} [Node all]]))\n\n(defn conj-to-set [coll x]\n  (conj (or coll #{}) x))\n\n(defn expand-all-paths [root-value current-expanded-paths]\n  (loop [remaining [{:path [] :node root-value}]\n         expanded-paths current-expanded-paths]\n    (if (seq remaining)\n      (let [[current & rest] remaining\n            current-node (if (satisfies? IDeref (:node current)) @(:node current) (:node current))]\n        (cond (map? current-node)\n              (recur\n                (concat rest (map (fn [[k v]] {:path (conj (:path current) k)\n                                               :node v})\n                                  current-node))\n                (assoc-in expanded-paths [(:path current) :expanded?] true))\n\n              (or (seq? current-node)\n                  (vector? current-node)\n                  (set? current-node))\n              (recur\n                (concat rest (map-indexed (fn [i node] {:path (conj (:path current) i)\n                                                        :node node})\n                               current-node))\n                (assoc-in expanded-paths [(:path current) :expanded?] true))\n\n              :else\n              (recur\n                rest\n                (if (coll? current-node)\n                  (assoc-in expanded-paths [(:path current) :expanded?] true)\n                  expanded-paths))))\n      expanded-paths)))\n\n(defn copy-to-clipboard [data]\n  (let [pretty (with-out-str (pprint data))\n        textArea (.createElement js/document \"textarea\")]\n    (doto textArea\n      ;; Put in top left corner of screen\n      (aset \"style\" \"position\" \"fixed\")\n      (aset \"style\" \"top\" 0)\n      (aset \"style\" \"left\" 0)\n      ;; Make it small\n      (aset \"style\" \"width\" \"2em\")\n      (aset \"style\" \"height\" \"2em\")\n      (aset \"style\" \"padding\" 0)\n      (aset \"style\" \"border\" \"none\")\n      (aset \"style\" \"outline\" \"none\")\n      (aset \"style\" \"boxShadow\" \"none\")\n      ;; Avoid flash of white box\n      (aset \"style\" \"background\" \"transparent\")\n      (aset \"value\" pretty))\n\n    (.appendChild (.-body js/document) textArea)\n    (.select textArea)\n\n    (.execCommand js/document \"copy\")\n    (.removeChild (.-body js/document) textArea)))\n\n(defn collapse-all [metadata-paths]\n  (u/map-vals #(assoc % :expanded? false) metadata-paths))\n\n(defn emit-fn-factory [state-atom id swappable]\n  (fn [event & args]\n    (case event\n      :expand (swap! state-atom assoc-in [:data-frisk id :metadata-paths (first args) :expanded?] true)\n      :expand-all (swap! state-atom update-in [:data-frisk id :metadata-paths] (partial expand-all-paths (first args)))\n      :contract (swap! state-atom assoc-in [:data-frisk id :metadata-paths (first args) :expanded?] false)\n      :collapse-all (swap! state-atom update-in [:data-frisk id :metadata-paths] collapse-all)\n      :copy (copy-to-clipboard (first args))\n      :changed (let [[path value] args]\n                 (if (seq path)\n                   (swap! swappable assoc-in path value)\n                   (reset! swappable value))))))\n\n(defn Root [data id state-atom]\n  (let [data-frisk (:data-frisk @state-atom)\n        swappable (when (satisfies? IAtom data)\n                    data)\n        emit-fn (emit-fn-factory state-atom id swappable)\n        metadata-paths (get-in data-frisk [id :metadata-paths])]\n    [:div\n     [:div {:style {:padding \"4px 2px\"}}\n      [ExpandAllButton emit-fn data]\n      [CollapseAllButton emit-fn]\n      [CopyButton emit-fn data]]\n     [:div {:style {:flex \"0 1 auto\"}}\n      [DataFrisk {:data data\n                  :swappable swappable\n                  :path []\n                  :metadata-paths metadata-paths\n                  :emit-fn emit-fn}]]]))\n\n(defn VisibilityButton\n  [visible? update-fn]\n  [:button {:style {:border 0\n                    :backgroundColor \"transparent\" :width \"20px\" :height \"20px\"}\n            :onClick update-fn}\n   [:svg {:viewBox \"0 0 100 100\"\n          :width \"100%\" :height \"100%\"\n          :style {:transition \"all 0.2s ease\"\n                  :transform (when visible? \"rotate(90deg)\")}}\n    [:polygon {:points \"0,0 0,100 100,50\" :stroke \"black\"}]]])\n\n(defn DataFriskView [& data]\n  (let [expand-by-default (reduce #(assoc-in %1 [:data-frisk %2 :metadata-paths [] :expanded?] true) {} (range (count data)))\n        state-atom (r/atom expand-by-default)]\n    (fn [& data]\n      (let [data-frisk (:data-frisk @state-atom)\n            visible? (:visible? data-frisk)]\n        [:div {:style (merge {:flex-flow \"row nowrap\"\n                              :transition \"all 0.3s ease-out\"\n                              :z-index \"5\"}\n                             (when-not visible?\n                               {:overflow-x \"hide\"\n                                :overflow-y \"hide\"\n                                :max-height \"30px\"\n                                :max-width \"100px\"})\n                             (:shell styles))}\n         [VisibilityButton visible? (fn [_] (swap! state-atom assoc-in [:data-frisk :visible?] (not visible?)))]\n         [:span \"Data frisk\"]\n         (when visible?\n           [:div {:style {:padding \"10px\"\n                          ;; TODO Make the max height and width adjustable\n                          ;:max-height \"400px\"\n                          ;:max-width \"800px\"\n                          :resize \"both\"\n                          :box-sizing \"border-box\"\n                          :overflow-x \"auto\"\n                          :overflow-y \"auto\"}}\n            (map-indexed (fn [id x]\n                           ^{:key id} [Root x id state-atom]) data)])]))))\n"]}