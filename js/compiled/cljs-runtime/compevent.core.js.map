{"version":3,"sources":["compevent/core.cljs"],"mappings":"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","names":["compevent.core/debug","compevent.core/erc20-abi","compevent.core/comp-abi","compevent.core/lw-address","compevent.core/lw-address2","compevent.core/lw-address3","compevent.core/cdai-init-block","compevent.core/cusdc-init-block","compevent.core/ceth-init-block","compevent.core/cusdt-init-block","compevent.core/wbtc-init-block","compevent.core/last-block","compevent.core/liquidation-hash","compevent.core/ctokens","compevent.core/caddress->token","caddress","cljs.core.get","compevent.core/token->address","token","compevent.core/comp-unitroller","compevent.core/comp-address","compevent.core/current-block","compevent.core/pre-event-block","compevent.core/block-step","compevent.core/llw-start-block","compevent.core/llw-end-block","compevent.core/latest-block","compevent.core/bn","n","js/module$node_modules$bignumber_DOT_js$bignumber","compevent.core/ethfu","u","js/module$node_modules$ethers$dist$ethers_umd.utils","compevent.core/ebn->bn","compevent.core/bn-min","nums","cljs.core/first","cljs.core.sort","bignumber.core/<","compevent.core/bn-max","bignumber.core/>","compevent.core/bn?","compevent.core/float-num-values","m","cljs.core.into","iter__4529__auto__","s__54032","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__54034","cljs.core/chunk-buffer","i__54033","vec__54035","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__54031","cljs.core/chunk-rest","vec__54038","cljs.core/cons","cljs.core/rest","k","v","js/parseFloat","compevent.core/web3provider","js/module$node_modules$ethers$dist$ethers_umd.providers","compevent.core/provider","js/window","compevent.core/comp-iface","js/module$node_modules$ethers$dist$ethers_umd.utils.Interface","cljs.core/clj->js","compevent.core/erc20-iface","compevent.core/make-contract","abi","address","js/module$node_modules$ethers$dist$ethers_umd.Contract","compevent.core/make-erc20","compevent.core/<token-decimals","c__38847__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__38848__auto__","switch__38755__auto__","state_54067","state_val_54068","inst_54052","inst_54059","statearr-54069","inst_54041","statearr-54070","statearr-54071","inst_54042","inst_54043","statearr-54072","statearr-54073","inst_54053","cljs.core/ExceptionInfo","inst_54054","cljs.core/ex-data","inst_54055","inst_54056","cljs.core._EQ_","inst_54057","statearr-54074","statearr-54075","statearr-54076","inst_54065","cljs.core.async.impl.ioc-helpers/return-chan","_","statearr-54078","inst_54049","inst_54050","cljs.core.async.interop/p->c","cljs.core.async.impl.ioc-helpers/take!","inst_54062","statearr-54079","statearr-54080","statearr-54081","ex54077","statearr-54082","statearr-54083","statearr-54084","statearr-54085","state-machine__38756__auto__","ret-value__38757__auto__","result__38758__auto__","cljs.core/keyword-identical?","ex__38759__auto__","e54086","statearr-54087","statearr-54088","state__38849__auto__","statearr-54089","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/Error","js/console.log","compevent.core/make-token-tx","tx","decimals","parsed-event","tx-args","tx-hash","block-number","compevent.core/<latest-block","state_54106","state_val_54107","inst_54090","inst_54091","inst_54093","inst_54094","inst_54095","inst_54096","inst_54097","inst_54098","statearr-54108","statearr-54109","statearr-54110","inst_54100","statearr-54111","statearr-54112","inst_54103","inst_54104","statearr-54113","e54114","statearr-54115","statearr-54116","statearr-54117","cljs.core.js__GT_clj","compevent.core/<get-block","block-num","state_54134","state_val_54135","inst_54118","inst_54119","inst_54121","inst_54122","inst_54123","inst_54124","inst_54125","inst_54126","statearr-54136","statearr-54137","statearr-54138","inst_54128","statearr-54139","statearr-54140","inst_54131","inst_54132","statearr-54141","e54142","statearr-54143","statearr-54144","statearr-54145","compevent.core/<fetch-blocks","block-numbers","p1__54146#","cljs.core.map","cljs.core.async.merge","cljs.core.async/reduce","cljs.core/conj","var_args","G__54149","compevent.core/<user-token-transfers","provider","token-address","out-address","compevent.core._LT_user_token_transfers","in-address","state_54152","state_val_54153","inst_54150","cljs.core/PersistentVector","statearr-54154","e54155","statearr-54156","statearr-54157","statearr-54158","contract","user-filter","state_54190","state_val_54191","inst_54170","inst_54177","statearr-54192","statearr-54193","inst_54159","inst_54160","inst_54161","statearr-54194","statearr-54195","inst_54171","inst_54172","inst_54173","inst_54174","inst_54175","statearr-54196","statearr-54197","statearr-54198","inst_54188","statearr-54200","inst_54167","inst_54168","inst_54180","inst_54181","statearr-54201","statearr-54202","ex54199","statearr-54203","statearr-54204","inst_54183","inst_54184","p1__54147#","inst_54185","statearr-54205","statearr-54206","statearr-54207","statearr-54208","e54209","statearr-54210","statearr-54211","statearr-54212","filtered-txs","compevent.core/<get-tx-receipt","txhash","state_54228","state_val_54229","inst_54213","inst_54214","inst_54216","inst_54217","inst_54218","inst_54219","inst_54220","inst_54221","statearr-54230","statearr-54231","statearr-54232","inst_54223","statearr-54233","statearr-54234","inst_54226","statearr-54235","e54236","statearr-54237","statearr-54238","statearr-54239","compevent.core/<get-tx","state_54255","state_val_54256","inst_54240","inst_54241","inst_54243","inst_54244","inst_54245","inst_54246","inst_54247","inst_54248","statearr-54257","statearr-54258","statearr-54259","inst_54250","statearr-54260","statearr-54261","inst_54253","statearr-54262","e54263","statearr-54264","statearr-54265","statearr-54266","compevent.core/<get-tx-with-receipt","state_54277","state_val_54278","inst_54267","inst_54268","statearr-54279","inst_54270","inst_54271","statearr-54280","inst_54273","inst_54274","inst_54275","cljs.core/PersistentHashMap","statearr-54281","e54282","statearr-54283","statearr-54284","statearr-54285","compevent.core/<get-trxs","tx-hashes","trxs","x","state_54290","state_val_54291","inst_54286","inst_54288","statearr-54292","e54293","statearr-54294","statearr-54295","statearr-54296","compevent.core/total-gas-paid","tx-with-receipt","gas-price","r","gas-used","eth-spent","bignumber.core/*","js/compevent","js/compevent.core","js/compevent.core.app-state","compevent.core/app-state","reagent.core.atom","compevent.core/start","reagent.core.render","compevent.core/app-main","js/document","cljs.core.not_EQ_","js/window.location.search","G__54297","G__54298","compevent.core/render-compound-history","cljs.core.subs","compevent.core/init","compevent.core/stop","compevent.core/web3-connect","state_54328","state_val_54329","inst_54310","inst_54317","statearr-54330","statearr-54331","inst_54299","inst_54300","statearr-54332","inst_54311","inst_54312","inst_54313","inst_54314","inst_54315","statearr-54333","statearr-54334","statearr-54335","inst_54326","statearr-54337","inst_54306","inst_54307","inst_54308","inst_54320","inst_54321","inst_54322","inst_54323","statearr-54338","statearr-54339","statearr-54340","statearr-54341","ex54336","statearr-54342","statearr-54343","statearr-54344","statearr-54345","e54346","statearr-54347","statearr-54348","statearr-54349","compevent.core/connecting-component","compevent.core/set-query-string!","url","js/window.location.protocol","js/window.location.host","js/window.location.pathname","url'","js/window.history","compevent.core/fetch-external-account","account","compevent.core/submit-component","value","cljs.core/deref","compevent.core/atom-input","ev","t","cljs.core/reset!","input","cljs.core/butlast","cljs.core/last","compevent.core/block-num->ts","blocks","p1__54350#","cljs.core.filter","compevent.core/ts->geckoprice","day-prices","ts","day-prices'","cljs.core.sort_by","prev-day","p1__54351#","next-day","p1__54352#","and__4115__auto__","cljs.core/second","compevent.core/blocknum->geckoprice","price","compevent.core/<historic-gecko-prices","state_54365","state_val_54366","inst_54353","inst_54354","inst_54355","inst_54356","inst_54357","statearr-54367","inst_54359","inst_54360","inst_54361","inst_54362","inst_54363","statearr-54368","e54369","statearr-54370","statearr-54371","statearr-54372","base-url","full-url","data","cljs_http.client.get","compevent.core/<dollarize-liquidations","liquidations","state_54385","state_val_54386","inst_54373","inst_54374","inst_54375","inst_54377","inst_54378","inst_54379","statearr-54387","inst_54381","inst_54382","inst_54383","statearr-54388","e54389","statearr-54390","statearr-54391","statearr-54392","liq-blocks","cljs.core/set","lq","compevent.core/<comp-repayments","start-block","end-block","comp-contract","repay-filter","state_54408","state_val_54409","inst_54393","inst_54394","inst_54396","inst_54397","inst_54398","inst_54399","inst_54400","inst_54401","statearr-54410","statearr-54411","statearr-54412","inst_54403","statearr-54413","statearr-54414","inst_54406","statearr-54415","e54416","statearr-54417","statearr-54418","statearr-54419","compevent.core/<comp-liquidations","liquidation-filter","state_54435","state_val_54436","inst_54420","inst_54421","inst_54423","inst_54424","inst_54425","inst_54426","inst_54427","inst_54428","statearr-54437","statearr-54438","statearr-54439","inst_54430","statearr-54440","statearr-54441","inst_54433","statearr-54442","e54443","statearr-54444","statearr-54445","statearr-54446","compevent.core/<comp-mints","mint-filter","state_54462","state_val_54463","inst_54447","inst_54448","inst_54450","inst_54451","inst_54452","inst_54453","inst_54454","inst_54455","statearr-54464","statearr-54465","statearr-54466","inst_54457","statearr-54467","statearr-54468","inst_54460","statearr-54469","e54470","statearr-54471","statearr-54472","statearr-54473","compevent.core/<comp-borrows","borrow-filter","state_54489","state_val_54490","inst_54474","inst_54475","inst_54477","inst_54478","inst_54479","inst_54480","inst_54481","inst_54482","statearr-54491","statearr-54492","statearr-54493","inst_54484","statearr-54494","statearr-54495","inst_54487","statearr-54496","e54497","statearr-54498","statearr-54499","statearr-54500","compevent.core/<comp-redeems","redeem-filter","state_54516","state_val_54517","inst_54501","inst_54502","inst_54504","inst_54505","inst_54506","inst_54507","inst_54508","inst_54509","statearr-54518","statearr-54519","statearr-54520","inst_54511","statearr-54521","statearr-54522","inst_54514","statearr-54523","e54524","statearr-54525","statearr-54526","statearr-54527","compevent.core/make-comp-repayment","compevent.core/make-comp-liquidation","compevent.core/make-comp-mint","compevent.core/make-comp-borrow","compevent.core/make-comp-redeem","compevent.core/<fetch-comp-logs","logsfn","cljs.core.range","p1__54528#","G__54529","G__54530","G__54531","cljs.core/concat","compevent.core/<pfetch-comp-logs","parsefn","state_54539","state_val_54540","inst_54533","inst_54535","inst_54536","p1__54532#","inst_54537","statearr-54541","e54542","statearr-54543","statearr-54544","statearr-54545","fetched-logs","compevent.core/<pfetch-comp-repayments","state_54550","state_val_54551","inst_54546","inst_54548","statearr-54552","e54553","statearr-54554","statearr-54555","statearr-54556","compevent.core/<pfetch-comp-mints","state_54561","state_val_54562","inst_54557","inst_54559","statearr-54563","e54564","statearr-54565","statearr-54566","statearr-54567","compevent.core/<pfetch-comp-liquidations","state_54572","state_val_54573","inst_54568","inst_54570","statearr-54574","e54575","statearr-54576","statearr-54577","statearr-54578","compevent.core/<pfetch-comp-borrows","state_54583","state_val_54584","inst_54579","inst_54581","statearr-54585","e54586","statearr-54587","statearr-54588","statearr-54589","compevent.core/<pfetch-comp-redeems","state_54594","state_val_54595","inst_54590","inst_54592","statearr-54596","e54597","statearr-54598","statearr-54599","statearr-54600","compevent.core/<pfetch-ctoken-events","state_54619","state_val_54620","inst_54601","inst_54603","inst_54604","statearr-54621","inst_54606","inst_54607","statearr-54622","inst_54609","inst_54610","statearr-54623","inst_54612","inst_54613","statearr-54624","inst_54615","inst_54616","inst_54617","statearr-54625","e54626","statearr-54627","statearr-54628","statearr-54629","cljs.core.concat","compevent.core/account-ctoken-events","ctoken-events","account'","clojure.string/lower-case","event","compevent.core/acc-health","a","compevent.core/acc-address","compevent.core/total-borrow-eth","compevent.core/total-collateral-eth","compevent.core/block-number","compevent.core/token-borrow-underlying","token-state","p1__54630#","compevent.core/token-supply-underlying","p1__54631#","compevent.core/acc-state","a'","clojure.walk/keywordize-keys","dai-borrowed","dai-supplied","usdc-borrowed","usdc-supplied","usdt-borrowed","usdt-supplied","eth-borrowed","eth-supplied","sai-borrowed","sai-supplied","bat-borrowed","bat-supplied","comp-borrowed","comp-supplied","uni-borrowed","uni-supplied","wbtc-borrowed","wbtc-supplied","zrx-borrowed","zrx-supplied","rep-borrowed","rep-supplied","usd-value-borrowed","cljs.core.reduce","bignumber.core/+","usd-value-supplied","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","compevent.core/<account-state","p__54634","map__54635","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","seq54632","G__54633","cljs.core/next","self__4723__auto__","state_54657","state_val_54658","inst_54637","inst_54638","inst_54639","inst_54640","inst_54641","inst_54642","inst_54644","inst_54645","inst_54646","inst_54647","inst_54648","inst_54649","statearr-54659","statearr-54660","statearr-54661","inst_54651","statearr-54662","statearr-54663","inst_54654","inst_54655","statearr-54664","e54665","statearr-54666","statearr-54667","statearr-54668","js/module$node_modules$$compound_finance$compound_js$dist$nodejs$index.api","compevent.core/<account-states","p__54673","map__54674","seq54670","G__54671","G__54672","accounts","raw","state_54704","state_val_54705","inst_54676","inst_54677","inst_54678","inst_54679","inst_54680","inst_54681","inst_54683","inst_54684","inst_54685","inst_54686","inst_54687","inst_54688","statearr-54706","statearr-54707","statearr-54708","inst_54690","statearr-54709","statearr-54710","inst_54693","inst_54694","inst_54695","inst_54696","p1__54669#","inst_54697","statearr-54711","statearr-54712","statearr-54713","statearr-54714","statearr-54715","inst_54701","inst_54702","statearr-54716","e54717","statearr-54718","statearr-54719","statearr-54720","resp","account-resps","cljs.core/identity","compevent.core/<account-state-range","block-step","p1__54721#","compevent.core/accum-comp-rewards","rewards-txs","data-points","current-tx","prev-dp","prev-claimed","current-claim","current-dp","compevent.core/<gov-account","state_54732","state_val_54733","inst_54722","inst_54723","inst_54724","inst_54725","inst_54726","inst_54727","inst_54729","inst_54730","statearr-54734","e54735","statearr-54736","statearr-54737","statearr-54738","compevent.core/<fetch-compound-history","state_54762","state_val_54763","inst_54740","inst_54742","inst_54743","inst_54744","statearr-54764","inst_54746","inst_54748","inst_54747","inst_54749","inst_54750","inst_54751","inst_54752","inst_54753","statearr-54765","inst_54755","inst_54756","inst_54757","inst_54758","p1__54739#","inst_54759","inst_54760","statearr-54766","e54767","statearr-54768","statearr-54769","statearr-54770","latest-block","init-block","comp-rewards","comp-rewards'","acc-history","cljs.core.mapcat","dp","compevent.core/historic-whale-layer","p__54775","map__54776","seq54772","G__54773","G__54774","y-field","y-title","show-labels","y-min","y-max","y-log","show-rewards","compevent.core/make-whale-history-plot","line-points","cljs.core.comp","cljs.core/not","cljs.core/nil?","compevent.core.historic_whale_layer","cljs.core/max","compevent.core/separator-str","state_54812","state_val_54813","inst_54778","inst_54779","inst_54780","inst_54781","inst_54782","inst_54783","inst_54784","inst_54785","inst_54786","inst_54787","inst_54788","inst_54789","statearr-54814","inst_54791","inst_54792","inst_54793","inst_54794","inst_54795","inst_54796","inst_54797","inst_54798","inst_54799","inst_54800","inst_54801","inst_54802","inst_54803","inst_54804","inst_54805","inst_54806","inst_54807","inst_54808","inst_54809","inst_54810","statearr-54815","statearr-54816","e54817","statearr-54818","statearr-54819","statearr-54820","cljs.core.swap_BANG_","cljs.core/into","cljs.core/update-in","cljs.core/assoc","oz.core/vega-lite","compevent.core/dai-loop-factor-old","account-state","supplied-dai","borrowed-dai","supplied-usdc","borrowed-usdc","borrowed-usdt","supplied-usd","borrowed-usd","factor","compevent.core/make-edn-blob","coll","js/Blob","compevent.core/download-blob","blob","filename","blob-url","js/URL.createObjectURL","link","js/document.createElement","js/document.body.appendChild","ev-params","js/MouseEvent","js/document.body.removeChild","compevent.core/download-as-edn","cljs.core/chunk-first"],"sourcesContent":["(ns compevent.core\n  (:require [cljs.core.async :refer [go]]\n            [cljs.core.async.interop :refer-macros [<p!]]\n            [cljs-http.client :as http]\n            [\"ethers\" :as ethers]\n            [\"@compound-finance/compound-js\" :as compound]\n            [bignumber.core]\n            [bignumber.js :as BigNumber]\n            [clojure.string :as s]\n            [oz.core :as oz]\n            [reagent.core :as reagent :refer [atom]]))\n\n\n(set! *warn-on-infer* false)\n;;(def debug js/goog.DEBUG)\n(def debug true)\n\n(def erc20-abi [\"function decimals() view returns (uint8)\",\n                \"event Transfer(address indexed from, address indexed to, uint amount)\",\n                \"event Deposit(address indexed user, uint256 indexed pid, uint256 amount)\"])\n\n\n(def comp-abi\n  [\"event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows)\"\n   \"event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens)\"\n   \"event Mint(address minter, uint mintAmount, uint mintTokens)\"\n   \"event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows)\"\n   \"event Redeem(address redeemer, uint redeemAmount, uint redeemTokens)\"])\n\n(def lw-address \"0x909b443761bbd7fbb876ecde71a37e1433f6af6f\")\n(def lw-address2 \"0x189c2c1834b1414a6aee9eba5dc4b4d547c9a44c\")\n(def lw-address3 \"0xb1adceddb2941033a090dd166a462fe1c2029484\")\n\n\n;; https://etherscan.io/address/0x5d3a536e4d6dbd6114cc1ead35777bab948e3643\n(def cdai-init-block 8983575)\n;; https://etherscan.io/address/0x39aa39c021dfbae8fac545936693ac917d5e7563\n(def cusdc-init-block 7710760)\n;; https://etherscan.io/address/0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5\n(def ceth-init-block 7710758)\n;; https://etherscan.io/tx/0x7e77fae02434ab498e6dd80cdb1bb3fbe53ee76a46749c0faa11bb850d431519\n(def cusdt-init-block 9879363)\n;; https://etherscan.io/tx/0xdaaa0b08e0fa932ebf1ebc9ed2de9a6eb4db3f03c77e9ed937d9c9a3a49e2b81\n(def wbtc-init-block 6766284)\n\n;; post liquidation event\n(def last-block 11333300)\n\n\n(def liquidation-hash\n  \"0x53e09adb77d1e3ea593c933a85bd4472371e03da12e3fec853b5bc7fac50f3e4\")\n\n\n(def ctokens\n  {\"0x39aa39c021dfbae8fac545936693ac917d5e7563\" \"USDC\"\n   \"0x5d3a536e4d6dbd6114cc1ead35777bab948e3643\" \"DAI\"\n   \"0xf650c3d88d12db855b8bf7d11be6c55a4e07dcc9\" \"USDT\"\n   \"0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5\" \"ETH\"\n   \"0xc11b1268c1a384e55c48c2391d8d480264a3a7f4\" \"WBTC\"\n   \"0x6c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e\" \"BAT\"\n   \"0x70e36f6bf80a52b3b46b3af8e106cc0ed743e8e4\" \"COMP\"\n   \"0x35a18000230da775cac24873d00ff85bccded550\" \"UNI\"\n   \"0xb3319f5d18bc0d84dd1b4825dcde5d5f7266d407\" \"ZRX\"\n   \"0x158079ee67fce2f58472a96584a73c7ab9ac95c1\" \"REP\"\n   \"0xf5dce57282a584d2746faf1593d3121fcac444dc\" \"SAI\"})\n\n(defn caddress->token\n  \"Takes a cToken address and returns\n  underlying token symbol\"\n  [caddress]\n  (get ctokens caddress))\n\n(defn token->address\n  \"Takes a token symbol and returns its corresponding\n  address\"\n  [token]\n  (get {\"WETH\" \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n        \"ETH\"  \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n        \"WBTC\" \"0x2260fac5e5542a773aa44fbcfedf7c193bc2c599\"\n        \"BAT\" \"0x0d8775f648430679a709e98d2b0cb6250d2887ef\"\n        \"COMP\" \"0xc00e94cb662c3520282e6f5717214004a7f26888\"\n        \"UNI\" \"0x1f9840a85d5af5bf1d1762f925bdaddc4201f984\"\n        \"ZRX\" \"0xe41d2489571d322189246dafa5ebde1f4699f498\"\n        \"REP\" \"0x221657776846890989a759ba2973e427dff5c9bb\"}\n       token))\n\n(def comp-unitroller \"0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B\")\n(def comp-address \"0xc00e94cb662c3520282e6f5717214004a7f26888\")\n\n(def current-block 11415254)\n(def pre-event-block 11333036)\n(def block-step 10000)\n(def llw-start-block (- 10250758 block-step))\n(def llw-end-block (+ pre-event-block block-step))\n(def latest-block 11460849)\n\n\n;;;; bignumber ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn bn [n] (BigNumber. (str n)))\n\n(defn ethfu\n  [n u]\n  (. ethers/utils formatUnits n u))\n\n(defn ebn->bn\n  [n u]\n  (bn (ethfu n u)))\n\n(defn bn-min\n  [nums]\n  (first (sort bignumber.core/< nums)))\n\n(defn bn-max\n  [nums]\n  (first (sort bignumber.core/> nums)))\n\n(defn bn?\n  [n]\n  (. BigNumber isBigNumber n))\n\n\n;; converts values in a flat map\n;; to floats if they are BigNumbers,\n;; for use in vega-lite charts\n(defn float-num-values\n  [m]\n  (into {} (for [[k v] m]\n             [k (if (bn? v) (js/parseFloat v) v)])))\n\n\n\n\n;;;; ethers tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def web3provider (. ethers/providers -Web3Provider))\n(def provider (web3provider. (. js/window -ethereum)))\n(def comp-iface (ethers/utils.Interface. (clj->js comp-abi)))\n(def erc20-iface (ethers/utils.Interface. (clj->js erc20-abi)))\n\n\n(defn make-contract [abi address]\n  (ethers/Contract. address (clj->js abi) provider))\n\n(defn make-erc20 [address]\n  (ethers/Contract. address (clj->js erc20-abi) provider))\n\n(defn <token-decimals\n  [address]\n  (go\n    (let [contract (make-erc20 address)]\n      (try (<p! (. contract decimals))\n           (catch js/Error err\n             (js/console.log \"No decimals method for:\" address)\n             18)))))\n\n(defn make-token-tx\n  [tx decimals]\n  (let [parsed-event (. erc20-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        token (. tx -address)]\n    {:from (. tx-args -from)\n     :to  (. tx-args -to)\n     :hash tx-hash\n     :token token\n     :block-number block-number\n     :amount (ebn->bn (. tx-args -amount) decimals)}))\n\n\n(defn <latest-block\n  []\n  (go (js->clj (<p! (. provider getBlockNumber)))))\n\n(defn <get-block\n  [block-num]\n  (go (let [block (js->clj ;; TODO why does this fail if we remove js->clj\n                   (<p! (. provider getBlock block-num)))]\n        block)))\n\n(defn <fetch-blocks\n  [block-numbers]\n  (->> block-numbers\n       (map #(<get-block %))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce conj [])))\n\n(defn <user-token-transfers\n  ([provider token-address out-address]\n   (<user-token-transfers provider token-address out-address nil))\n  ([provider token-address out-address in-address]\n   (if (nil? token-address)\n     (go [])\n     (let [contract (make-erc20 token-address)\n           user-filter (contract.filters.Transfer out-address in-address)\n           _ (set! (.. user-filter -fromBlock) 0)\n           _ (set! (.. user-filter -toBlock) \"latest\")]\n       (go (try\n             (let [filtered-txs (<p! (. provider getLogs user-filter))\n                   decimals (<! (<token-decimals token-address))\n                   parsed-txs (map #_identity #(make-token-tx % decimals) filtered-txs)]\n               parsed-txs)\n             (catch js/Error err\n               (js/console.log \"err <user-token-transfers:\" token-address out-address in-address)\n               [])))))))\n\n(defn <get-tx-receipt\n  [txhash]\n  (go\n    (<p! (. provider getTransactionReceipt txhash))))\n\n(defn <get-tx\n  [txhash]\n  (go\n    (<p! (. provider getTransaction txhash))))\n\n\n(defn <get-tx-with-receipt\n  [txhash]\n  (go\n    {:tx (<! (<get-tx txhash))\n     :receipt (<! (<get-tx-receipt txhash))}))\n\n(defn <get-trxs\n  [tx-hashes]\n  (let [trxs (map (fn [x] (go (<! (<get-tx-with-receipt x))))\n                  tx-hashes)]\n    (->> (cljs.core.async/merge trxs)\n         (cljs.core.async/reduce conj []))))\n\n(defn total-gas-paid\n  [tx-with-receipt]\n  (let [tx (js->clj (:tx tx-with-receipt))\n        gas-price (ebn->bn (get tx \"gasPrice\") 18)\n        r (js->clj (:receipt tx-with-receipt))\n        gas-used (ebn->bn (get r \"gasUsed\") 0)\n        eth-spent (bignumber.core/* gas-price gas-used)]\n    eth-spent))\n\n\n\n(declare app-main)\n(declare render-compound-history)\n\n(defonce app-state (atom {:title \"\"\n                          :total-pnl-all nil\n                          :pool-pnl-all nil\n                          :rewards-all nil}))\n\n\n#_(defn start []\n  (reagent/render\n   [:div ]\n   (. js/document (getElementById \"app\"))))\n\n(defn start []\n  (reagent/render\n   [:div [app-main]]\n   (. js/document (getElementById \"app\")))\n  (if (and #_(not debug) (not= js/window.location.search \"\"))\n    (render-compound-history (subs js/window.location.search 1) false)))\n\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n\n(defn web3-connect\n  []\n  (go\n    (try (let [connected-account (first (<p! (.. js/window -ethereum enable)))\n               _ (js/console.log \"connected-account\" connected-account)]\n           (render-compound-history connected-account true))\n         (catch js/Error err (js/console.log \"Could not enable web3 in browser\" err)))))\n\n(defn connecting-component []\n  [:div\n   [:input {:type \"button\" :value \"Connect account\"\n            :class \"connect\"\n            :on-click web3-connect}]])\n\n(defn set-query-string!\n  [v]\n  (let [url (str js/window.location.protocol\n                 \"//\"\n                 js/window.location.host\n                 js/window.location.pathname\n                 )\n        url' (str url \"?\" v)]\n    (. js/window.history pushState (clj->js {:path url'}) nil url')))\n\n\n(defn fetch-external-account\n  [account]\n  (set-query-string! account)\n  (render-compound-history account))\n\n(defn submit-component [value]\n  [:input {:type \"button\" :value \"Go\"\n           :on-click #(fetch-external-account @value)}])\n\n(defn atom-input [value]\n  [:div\n   [:br]\n   [:input {:type \"text\" :size \"44\"\n            :placeholder \"Enter address\"\n            :default-value (if (not= js/window.location.search \"\")\n                             (subs js/window.location.search 1))\n            :on-key-down (fn [ev]\n                           (if (= (.-key ev) \"Enter\")\n                             (fetch-external-account @value)))\n            :on-change (fn [t]\n                         (reset! value (-> t .-target .-value)))}]\n   (submit-component value)])\n\n\n(let [input (atom-input (atom \"\"))]\n (defn app-main []\n    [:div\n     #_[:div {:class \"connect\"}\n      (if (= \"\" (:title @app-state))\n        (if provider (connecting-component))\n        (:title @app-state))]\n     [:h6 \"Compound account history charts\"  (if (nil? provider)\n                              \" Requires Web3\")]\n     #_(if debug\n       [d/DataFriskShell {:account-state @app-state}])\n     [:br]\n     (if (not (nil? provider))\n       input)\n     (if (> (count (:steps @app-state)) 0)\n       [:div\n        [:br] [:br]\n        (map  (fn [x] [:div ^{:key x} x])\n              (butlast (:steps @app-state)))\n        [:div {:class \"animate-flicker\"} (last (:steps @app-state))]\n        [:br] \n        ])\n     (:chart @app-state)]))\n\n\n;;;; token prices ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n(defn block-num->ts\n  [blocks block-num]\n  (get (first (filter #(= (get % \"number\") block-num) blocks)) \"timestamp\"))\n\n\n(defn ts->geckoprice\n  [day-prices ts]\n  (let [day-prices' (sort-by first day-prices)\n        prev-day (last (filter #(<= (first %) ts) day-prices'))\n        next-day (first (filter #(> (first %) ts) day-prices'))\n        ]\n    (if (and prev-day next-day)\n      (second prev-day))))\n\n(defn blocknum->geckoprice\n  [day-prices blocks block-num]\n  (let [ts (* 1000 (block-num->ts blocks block-num))\n        price (ts->geckoprice day-prices ts)]\n    (bn price)))\n\n(defn <historic-gecko-prices\n  [address]\n  (go (let [base-url (str \"https://api.coingecko.com/\"\n                          \"api/v3/coins/ethereum/contract/\"\n                          address\n                          \"/market_chart/?vs_currency=usd&days=700\")\n            full-url base-url\n            data (:prices (:body\n                           (<! (http/get\n                                full-url\n                                {:with-credentials? false}))))]\n        (map (fn [x] [(first x) (bn (second x))]) data))))\n\n\n(defn <dollarize-liquidations\n  [liquidations token]\n  (go\n    (let [liq-blocks (<! (<fetch-blocks (set (map :block-number liquidations))))\n          day-prices (<! (<historic-gecko-prices (token->address token)))]\n      (map (fn [lq]\n             (into\n              lq\n              {:repay-amount\n               (bignumber.core/*\n                (:repay-amount lq)\n                (bn (blocknum->geckoprice\n                     day-prices liq-blocks (:block-number lq))))}))\n           liquidations))))\n\n\n;;;; compound tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n(defn <comp-repayments\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                       comp-abi\n                       caddress)\n        repay-filter (comp-contract.filters.RepayBorrow)\n        _ (set! (.. repay-filter -fromBlock) start-block)\n        _ (set! (.. repay-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs repay-filter)))))\n\n\n(defn <comp-liquidations\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                       comp-abi\n                       caddress)\n        liquidation-filter (comp-contract.filters.LiquidateBorrow)\n        _ (set! (.. liquidation-filter -fromBlock) start-block)\n        _ (set! (.. liquidation-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs liquidation-filter)))))\n\n(defn <comp-mints\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                        comp-abi\n                        caddress)\n        mint-filter (comp-contract.filters.Mint)\n        _ (set! (.. mint-filter -fromBlock) start-block)\n        _ (set! (.. mint-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs mint-filter)))))\n\n(defn <comp-borrows\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                        comp-abi\n                        caddress)\n        borrow-filter (comp-contract.filters.Borrow)\n        _ (set! (.. borrow-filter -fromBlock) start-block)\n        _ (set! (.. borrow-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs borrow-filter)))))\n\n(defn <comp-redeems\n  [caddress start-block end-block]\n  (let [comp-contract (make-contract\n                       comp-abi\n                       caddress)\n        redeem-filter (comp-contract.filters.Redeem)\n        _ (set! (.. redeem-filter -fromBlock) start-block)\n        _ (set! (.. redeem-filter -toBlock) end-block)]\n    (go (<p! (. provider getLogs redeem-filter)))))\n\n\n(defn make-comp-repayment\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        caddress (. tx -address)]\n    {:payer (. tx-args -payer)\n     :borrower  (. tx-args -borrower)\n     :hash tx-hash\n     :type \"repayment\"\n     :caddress caddress\n     :block-number block-number\n     :repay-amount (ebn->bn (. tx-args -repayAmount) decimals)\n     :account-borrrows (ebn->bn (. tx-args -accountBorrows) decimals)\n     :total-borrows (ebn->bn (. tx-args -totalBorrows) decimals)}))\n\n\n(defn make-comp-liquidation\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        block-number (. tx -blockNumber)\n        caddress (. tx -address)]\n    {:liquidator (. tx-args -liquidator)\n     :borrower  (. tx-args -borrower)\n     :hash tx-hash\n     :type \"liquidation\"\n     :block-number block-number\n     :caddress caddress\n     :repay-amount (ebn->bn (. tx-args -repayAmount) decimals)\n     :c-token-collateral (. tx-args -cTokenCollateral)\n     :seize-tokens (ebn->bn (. tx-args -seizeTokens) decimals)}))\n\n\n(defn make-comp-mint\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        caddress (. tx -address)\n        block-number (. tx -blockNumber)]\n    {:minter  (. tx-args -minter)\n     :mint-amount (ebn->bn (. tx-args -mintAmount) decimals)\n     :mint-tokens (ebn->bn (. tx-args -mintTokens) decimals)\n     :hash tx-hash\n     :type \"mint\"\n     :caddress caddress\n     :block-number block-number}))\n\n\n(defn make-comp-borrow\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        caddress (. tx -address)\n        block-number (. tx -blockNumber)]\n    {:borrower  (. tx-args -borrower)\n     :borrow-amount (ebn->bn (. tx-args -borrowAmount) decimals)\n     :account-borrows (ebn->bn (. tx-args -accountBorrows) decimals)\n     :total-borrows (ebn->bn (. tx-args -totalBorrows) decimals)\n     :type \"borrow\"\n     :hash tx-hash\n     :caddress caddress\n     :block-number block-number}))\n\n\n(defn make-comp-redeem\n  [tx decimals]\n  (let [parsed-event (. comp-iface parseLog tx)\n        tx-args (. parsed-event -args)\n        tx-hash (. tx -transactionHash)\n        caddress (. tx -address)\n        block-number (. tx -blockNumber)]\n    {:redeemer  (. tx-args -redeemer)\n     :redeem-amount (ebn->bn (. tx-args -redeemAmount) decimals)\n     :redeem-tokens (ebn->bn (. tx-args -redeemTokens) decimals)\n     :type \"redeem\"\n     :hash tx-hash\n     :caddress caddress\n     :block-number block-number}))\n\n\n\n(defn <fetch-comp-logs\n  [logsfn caddress start-block end-block decimals]\n  (->> (range start-block end-block 5000)\n       (map #(logsfn caddress % (+ % 4999)))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce concat [])))\n\n(defn <pfetch-comp-logs\n  [logsfn parsefn caddress start-block end-block decimals]\n  (go (let [fetched-logs\n            (<! (<fetch-comp-logs logsfn caddress start-block end-block decimals))]\n        (map #(parsefn % decimals) fetched-logs))))\n\n\n(defn <pfetch-comp-repayments\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-repayments make-comp-repayment\n           caddress start-block end-block decimals))))\n\n(defn <pfetch-comp-mints\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-mints make-comp-mint\n           caddress start-block end-block decimals))))\n\n(defn <pfetch-comp-liquidations\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-liquidations make-comp-liquidation\n           caddress start-block end-block decimals))))\n\n(defn <pfetch-comp-borrows\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-borrows make-comp-borrow\n           caddress start-block end-block decimals))))\n\n\n(defn <pfetch-comp-redeems\n  [caddress start-block end-block decimals]\n  (go (<! (<pfetch-comp-logs\n           <comp-redeems make-comp-redeem\n           caddress start-block end-block decimals))))\n\n\n(defn <pfetch-ctoken-events\n  [caddress start-block end-block decimals]\n  (go (let [repayments (<! (<pfetch-comp-repayments\n                            caddress start-block end-block\n                            decimals))\n            mints (<! (<pfetch-comp-mints\n                       caddress start-block end-block\n                       decimals))\n            borrows (<! (<pfetch-comp-borrows\n                       caddress start-block end-block\n                       decimals))\n            liquidations (<! (<pfetch-comp-liquidations\n                              caddress start-block end-block\n                              decimals))\n            redeems (<! (<pfetch-comp-redeems\n                       caddress start-block end-block\n                       decimals))]\n        (sort-by :block-number (concat repayments mints borrows liquidations redeems)))))\n\n\n(defn account-ctoken-events\n  [ctoken-events account]\n  (let [account' (s/lower-case account)]\n    (filter (fn [event]\n              (or\n               (and\n                (= (:type event) \"borrow\")\n                (= account' (s/lower-case (:borrower event))))\n               (and\n                (= (:type event) \"repayment\")\n                (= account' (and (s/lower-case (:payer event)) (s/lower-case (:borrower event)))))\n               (and\n                (= (:type event) \"mint\")\n                (= account' (s/lower-case (:minter event))))\n               (and\n                (= (:type event) \"redeem\")\n                (= account (s/lower-case (:redeemer event))))\n               (and\n                (= (:type event) \"liquidation\")\n                (= account (s/lower-case (:borrower event))))))\n            ctoken-events)))\n\n(defn acc-health\n  [a]\n  (bn (get (get a \"health\") \"value\")))\n\n\n(defn acc-address\n  [a]\n  (get a \"address\"))\n\n(defn total-borrow-eth\n  [a]\n  (bn (get (get a \"total_borrow_value_in_eth\") \"value\")))\n\n\n(defn total-collateral-eth\n  [a]\n  (bn (get (get a \"total_collateral_value_in_eth\") \"value\")))\n\n\n(defn block-number\n  [a]\n  (get a \"block-number\"))\n\n\n(defn token-borrow-underlying\n  [a token]\n  (let [token-state (first (filter #(= (:symbol %) token) (:tokens a)))]\n    (if token-state\n      (bn (:value (:borrow_balance_underlying token-state)))\n      (bn \"0.0\"))))\n\n(defn token-supply-underlying\n  [a token]\n  (let [token-state (first (filter #(= (:symbol %) token) (:tokens a)))]\n    (if token-state\n      (bn (:value (:supply_balance_underlying token-state)))\n      (bn \"0.0\"))))\n\n\n(defn acc-state\n  [a]\n  (let [a' (clojure.walk/keywordize-keys a)\n        dai-borrowed (token-borrow-underlying a' \"cDAI\")\n        dai-supplied (token-supply-underlying a' \"cDAI\")\n        usdc-borrowed (token-borrow-underlying a' \"cUSDC\")\n        usdc-supplied (token-supply-underlying a' \"cUSDC\")\n        usdt-borrowed (token-borrow-underlying a' \"cUSDT\")\n        usdt-supplied (token-supply-underlying a' \"cUSDT\")\n        eth-borrowed (token-borrow-underlying a' \"cETH\")\n        eth-supplied (token-supply-underlying a' \"cETH\")\n        sai-borrowed (token-borrow-underlying a' \"cSAI\")\n        sai-supplied (token-supply-underlying a' \"cSAI\")\n        bat-borrowed (token-borrow-underlying a' \"cBAT\")\n        bat-supplied (token-supply-underlying a' \"cBAT\")\n        comp-borrowed (token-borrow-underlying a' \"cCOMP\")\n        comp-supplied (token-supply-underlying a' \"cCOMP\")\n        uni-borrowed (token-borrow-underlying a' \"cUNI\")\n        uni-supplied (token-supply-underlying a' \"cUNI\")\n        wbtc-borrowed (token-borrow-underlying a' \"cWBTC\")\n        wbtc-supplied (token-supply-underlying a' \"cWBTC\")\n        zrx-borrowed (token-borrow-underlying a' \"cZRX\")\n        zrx-supplied (token-supply-underlying a' \"cZRX\")\n        rep-borrowed (token-borrow-underlying a' \"cREP\")\n        rep-supplied (token-supply-underlying a' \"cREP\")\n        ;; stable coins\n        usd-value-borrowed (reduce bignumber.core/+\n                                   [dai-borrowed usdc-borrowed usdt-borrowed])\n        usd-value-supplied (reduce bignumber.core/+\n                                   [dai-supplied usdc-supplied usdt-supplied])]\n    {:account (acc-address a)\n     :health (acc-health a)\n     :total-borrow-eth (total-borrow-eth a)\n     :total-collateral-eth (total-collateral-eth a)\n     :block-number (block-number a)\n     :dai-borrowed dai-borrowed\n     :dai-supplied dai-supplied\n     :eth-borrowed eth-borrowed\n     :eth-supplied eth-supplied\n     :sai-borrowed sai-borrowed\n     :sai-supplied sai-supplied\n     :bat-borrowed bat-borrowed\n     :bat-supplied bat-supplied\n     :comp-borrowed comp-borrowed\n     :comp-supplied comp-supplied\n     :uni-borrowed uni-borrowed\n     :uni-supplied uni-supplied\n     :wbtc-borrowed wbtc-borrowed\n     :wbtc-supplied wbtc-supplied\n     :zrx-borrowed zrx-borrowed\n     :zrx-supplied zrx-supplied\n     :rep-borrowed rep-borrowed\n     :rep-supplied rep-supplied\n\n     :usdc-borrowed usdc-borrowed\n     :usdc-supplied usdc-supplied\n     :usdt-borrowed usdt-borrowed\n     :usdt-supplied usdt-supplied\n     :usd-value-borrowed usd-value-borrowed\n     :usd-value-supplied usd-value-supplied}))\n\n(defn <account-state\n  [address & {:keys [block-number]\n              :or {block-number 0}}]\n  (go (js->clj\n       (<p! (. compound/api\n               account\n               (clj->js {:addresses address\n                         :block_number block-number}))))))\n\n\n(defn <account-states\n  [accounts block-number & {:keys [raw]\n                            :or {raw false}}]\n  (go (let [resp (js->clj\n                  (<p! (. compound/api\n                          account\n                          (clj->js {:addresses accounts\n                                    :page_size 1000\n                                    :block_number block-number}))))\n            account-resps (get resp \"accounts\")\n            account-resps' (map #(into % {\"block-number\" block-number})\n                                account-resps)]\n        (map (if raw identity acc-state) account-resps'))))\n\n\n(defn <account-state-range\n  [accounts start-block end-block block-step]\n  (->> (concat (range start-block end-block block-step) [end-block])\n       (map #(<account-states accounts %))\n       (cljs.core.async/merge)\n       (cljs.core.async/reduce concat [])))\n\n(defn accum-comp-rewards\n  [rewards-txs data-points]\n  (if (= 0 (count rewards-txs))\n    data-points\n    (let [current-tx (first rewards-txs)\n          prev-dp (last data-points)\n          prev-claimed (if (= 0 (count data-points))\n                         0\n                         (:comp-claimed prev-dp))\n          current-claim (js/parseFloat (:amount current-tx))\n          current-dp {:comp-claimed (+ prev-claimed current-claim)\n                      :side \"Claimed Rewards\"\n                      :comp-claim current-claim\n                      :block-number (:block-number current-tx)}]\n      (recur (rest rewards-txs) (concat data-points [current-dp])))))\n\n\n(defn <gov-account\n  [account]\n  (go (let [base-url (str \"https://api.compound.finance/api/v2/governance/comp/account\"\n                          \"?address=\")\n            full-url (str base-url account)\n            data (:body\n                  (<! (http/get\n                       full-url\n                       {:with-credentials? false})))]\n        data)))\n\n\n;;;; comp liquidations  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(comment\n  (go (def dai-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cDAI\")\n             cdai-init-block last-block 18))))\n\n  (go (def usdc-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cUSDC\")\n             cusdc-init-block last-block 6))))\n\n  (go (def eth-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cETH\")\n             ceth-init-block last-block 18))))\n\n  (go (def wbtc-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cWBTC\")\n             wbtc-init-block last-block 8))))\n\n  (go (def bat-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cBAT\")\n             ceth-init-block last-block 18))))\n\n\n  (go (def uni-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cUNI\")\n             ceth-init-block last-block 18))))\n\n  (go (def comp-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cCOMP\")\n             ceth-init-block last-block 18))))\n\n  (go (def zrx-liquidations\n        (<! (<pfetch-comp-liquidations\n             (. compound/util getAddress \"cZRX\")\n             ceth-init-block last-block 18))))\n\n  (go (def eth-liquidations' (<! (<dollarize-liquidations eth-liquidations \"WETH\"))))\n  (go (def wbtc-liquidations' (<! (<dollarize-liquidations wbtc-liquidations \"WBTC\"))))\n  (go (def bat-liquidations' (<! (<dollarize-liquidations bat-liquidations \"BAT\"))))\n  (go (def uni-liquidations' (<! (<dollarize-liquidations uni-liquidations \"UNI\"))))\n  (go (def comp-liquidations' (<! (<dollarize-liquidations comp-liquidations \"COMP\"))))\n  (go (def zrx-liquidations' (<! (<dollarize-liquidations zrx-liquidations \"ZRX\"))))\n\n  (def all-liquidations\n    (map (fn [lq]\n           {:block-number (:block-number lq)\n            :repay-amount (js/parseFloat (:repay-amount lq))\n            :hash (:hash lq)\n            :highlight (= (:hash lq)\n                          liquidation-hash)\n            :token (caddress->token (:caddress lq))})\n         (concat\n          dai-liquidations\n          usdc-liquidations\n          eth-liquidations'\n          wbtc-liquidations'\n          bat-liquidations'\n          uni-liquidations'\n          comp-liquidations'\n          zrx-liquidations')))\n\n\n  ;;; chart 1, plot compound liquidations\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 800\n            :height 200\n            :title {:text \"Compound Liquidations\"\n                    :anchor \"middle\"\n                    :align \"center\"}\n            :data {:values all-liquidations}\n            :config {:axis {:gridColor \"#657b83\"\n                            :gridOpacity 0.15}}\n            :resolve {:scale {:y \"independent\"}}\n            :encoding {:x {:field :block-number :type \"quantitative\"\n                           :scale {:domain [7800000 11400000]\n                                   :nice false}\n                           :title \"Block Number\"}\n                       :y {:field :repay-amount :title \"Repaid Value (USD)\"\n                           :type \"quantitative\"}\n                       :color {:field :highlight, :type \"nominal\"\n                               :legend false\n                               :scale {:domain [false, true], :range [ \"lightgray\"  \"crimson\"]}}}\n            :mark {:type \"point\" :filled true}}]]]\n   (. js/document (getElementById \"app\"))))\n\n\n  ;;;; LLW Comound History  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n\n(defn <fetch-compound-history\n  [account]\n  ;;(take-while #(<= (:block-number %) pre-event-block)\n  (go\n    (let [latest-block (<! (<latest-block))\n          init-block (- latest-block 1000000)\n          comp-rewards (<! (<user-token-transfers\n                            provider comp-address comp-unitroller account))\n          comp-rewards' (accum-comp-rewards comp-rewards [])\n          acc-history (sort-by :block-number\n                               (mapcat (fn [dp]\n                                         [{:side \"Supplied\"\n                                           :eth-value (:total-collateral-eth dp)\n                                           :block-number (:block-number dp)\n                                           :dai (:dai-supplied dp)\n                                           :bat (:bat-supplied dp)\n                                           :usdc (:usdc-supplied dp)\n                                           :usdt (:usdt-supplied dp)\n                                           :eth (:eth-supplied dp)\n                                           :sai (:sai-supplied dp)\n                                           :comp (:comp-supplied dp)\n                                           :wbtc (:wbtc-supplied dp)\n                                           :uni (:uni-supplied dp)\n                                           :zrx (:zrx-supplied dp)\n                                           :rep (:rep-supplied dp)\n                                           :value (:usd-value-supplied dp)}\n                                          {:side \"Borrowed\"\n                                           :eth-value (:total-borrow-eth dp)\n                                           :block-number (:block-number dp)\n                                           :eth (:eth-borrowed dp)\n                                           :dai (:dai-borrowed dp)\n                                           :bat (:bat-borrowed dp)\n                                           :sai (:sai-borrowed dp)\n                                           :comp (:comp-borrowed dp)\n                                           :wbtc (:wbtc-borrowed dp)\n                                           :uni (:uni-borrowed dp)\n                                           :zrx (:zrx-borrowed dp)\n                                           :rep (:rep-borrowed dp)\n                                           :usdc (:usdc-borrowed dp)\n                                           :usdt (:usdt-borrowed dp)\n                                           :value (:usd-value-borrowed dp)}\n                                          {:side \"Account Health\"\n                                           :block-number (:block-number dp)\n                                           :health (:health dp)}])\n                                       (<! (<account-state-range\n                                            [account]\n                                            init-block latest-block  10000))))]\n      (concat acc-history\n              (filter #(and (<= (:block-number %) (:block-number (last acc-history)))\n                            (>= (:block-number %) (:block-number (first acc-history))))\n                      comp-rewards')))))\n\n\n\n#_(go (def llw-comp-rewards\n      (filter #(<= (:block-number %) (:block-number (last llw-comp-history)))\n              (<! (<user-token-transfers provider comp-address comp-unitroller random-address)))))\n\n\n\n\n#_(def claimed-comp-dps (accum-comp-rewards llw-comp-rewards []))\n#_(def llw-comp-history'\n    (concat llw-comp-history claimed-comp-dps))\n\n  ;; chart 2, LLW compound history\n(defn historic-whale-layer\n  [y-field y-title & {:keys [show-labels y-min y-max y-log show-rewards]\n                      :or {show-labels false\n                           show-rewards true\n                           y-min false\n                           y-max false\n                           y-log false}}]\n  {:width 600\n   :height 75\n   :layer (concat\n           [{:encoding {:x {:field :block-number\n                            :type \"quantitative\"\n                            :title nil\n                            :scale {;;:domain [10850000, 11330758]\n                                    :nice false\n                                    :clamp true}\n                            :axis {:labels show-labels\n                                   :ticks (if show-labels true false)}}\n                        :y {:field y-field\n                            :title y-title\n                            :axis {:grid true\n                                   :tickCount 10\n                                   :tickband \"extent\"}\n                            :scale {;;:domain ;;(if (and y-min y-max) [y-min y-max] [])\n                                    ;;:type (if y-log \"symlog\" \"linear\")\n                                    ;;:base 10\n                                    :domainMin 0\n                                    ;;:clamp true\n                                    }\n                            :type \"quantitative\"}\n                          :color {:field \"side\" :type \"nominal\"\n                                  :title \"Values\"\n                                  :legend {:orient \"right\" :direction \"vertical\"}\n                                  :scale {:domain [\"Account Health\", \"Supplied\",\n                                                   \"Borrowed\"\n                                                   (if true \"Claimed Rewards\" \"\")],\n                                          :range [ \"orange\"  \"#706897\" \"#fd3a69\"\n                                                  (if true\n                                                    \"#5aa469\")]}}}\n             :mark {:type \"line\" :interpolate \"step\"}}])})\n\n\n(defn make-whale-history-plot\n  [line-points address]\n  {:data {:values line-points}\n   :title {:text (str address \" Compound history\")\n           :anchor \"middle\"\n           :align \"center\"}\n\n   :config {:concat {:spacing 2}\n            :axis {:gridColor \"#657b83\"\n                   :gridOpacity 0.25\n                   :labelColor \"#657b83\"\n                   :titleColor \"#657b83\"}}\n   \n   :vconcat (filter (comp not nil?)\n                    [(historic-whale-layer\n                      :health \"Health\"  :y-min 1.0 :y-max 2.5 :y-log false :show-labels false)\n                     #_(historic-whale-layer\n                        :value \"USD Value\" :y-min 0 :y-max 60000000 :y-log false :show-labels false)\n                     (historic-whale-layer\n                      :eth-value \"ETH Value\" :y-min 0 :y-max 150000 :y-log false :show-labels false)\n                     (if (apply max (map :dai line-points))\n                       (historic-whale-layer\n                        :dai \"DAI\" :y-min 0  :show-labels false))\n                     (if (apply max (map :sai line-points))\n                       (historic-whale-layer\n                        :sai \"SAI\" :show-labels false))\n                     (if (apply max (map :bat line-points))\n                       (historic-whale-layer\n                        :bat \"BAT\" :show-labels false))\n                     (if (apply max (map :wbtc line-points))\n                       (historic-whale-layer\n                        :wbtc \"WBTC\" :show-labels false))\n                     (if (apply max (map :comp line-points))\n                       (historic-whale-layer\n                        :comp \"COMP\" :show-labels false))\n                     (if (apply max (map :uni line-points))\n                       (historic-whale-layer\n                        :uni \"UNI\" false :show-labels false))\n                     (if (apply max (map :zrx line-points))\n                       (historic-whale-layer\n                        :zrx \"ZRX\" :show-labels false))\n                     (if (apply max (map :rep line-points)) \n                       (historic-whale-layer\n                        :rep \"REP\" :show-labels false))\n                     (if (apply max (map :usdc line-points))\n                       (historic-whale-layer\n                        :usdc \"USDC\" :show-labels false))\n                     (if (apply max (map :usdt line-points))\n                       (historic-whale-layer\n                        :usdt \"USDT\" :show-labels false))\n                     (if (apply max (map :eth line-points))\n                       (historic-whale-layer\n                        :eth \"ETH\" :show-labels false))\n\n                     (historic-whale-layer\n                      :comp-claimed \"Claimed COMP\" :show-labels true :show-rewards true)])})\n\n  #_(reagent/render\n     [:div\n      [:div [oz.core/vega-lite (make-whale-history-plot (map float-num-values llw-comp-history') random-address)]]]\n     (. js/document (getElementById \"app\")))\n\n\n\n\n(def separator-str [:div\n                    [:br]])\n\n\n(defn render-compound-history\n  [account]\n  (go (let [_ (swap! app-state into {:chart nil})\n            _ (swap! app-state update-in [:steps] concat [\"Fetching data ...\"])\n            comp-history (<! (<fetch-compound-history account))\n            comp-history' (map float-num-values comp-history)]\n        (swap! app-state assoc :steps [separator-str])\n        (swap! app-state into {:chart \n                               [:div\n                                [:div [oz.core/vega-lite (make-whale-history-plot comp-history' account)]]]\n                               }))))\n\n\n\n  ;;;;;;; LLW COMP Rewards ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(comment\n  (go (def lw-comp-account (<! (<gov-account lw-address))))\n  (* (reduce bignumber.core/+ (map (comp bn :comp_allocated) (:markets lw-comp-account))) 110)\n  ;; 1930275.0790803975\n  ;; seems that lw has acumulated 17547.95526436725001265 COMP at a 110 usd price\n  ;; would be about  1,930,275.079 USD of value.\n\n  (defn <group-transfers-in\n    [account token]\n    (go (let [transfers-in\n              (<! (<user-token-transfers provider token nil account))]\n          (map (fn [x] [(first x)  (str (second x))])\n               (sort-by second bignumber.core/>\n                        (map (fn [[a ts]] [a (reduce bignumber.core/+ (map :amount ts))])\n                             (group-by :from transfers-in)))))))\n\n  (defn <group-transfers-out\n    [account token]\n    (go (let [transfers-in\n              (<! (<user-token-transfers provider token account nil))]\n          (map (fn [x] [(first x)  (str (second x))])\n               (sort-by second bignumber.core/>\n                        (map (fn [[a ts]] [a (reduce bignumber.core/+ (map :amount ts))])\n                             (group-by :to transfers-in)))))))\n\n\n  (go (def llw-comp-senders (<! (<group-transfers-in lw-address comp-address))))\n  ([\"0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B\" \"17733.658428951418580387\"]\n   [\"0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\" \"374.416208864611093137\"]\n   [\"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\" \"273.34089138179241962\"]\n   [\"0x8538E5910c6F80419CD3170c26073Ff238048c9E\" \"157.5\"]\n   [\"0x926e78b8DF67e129011750Dd7b975f8E50D3d7Ad\" \"93.566168485386014783\"]\n   [\"0x9Af74A84DE5152DB4E0e656A8D735B0A3460C227\" \"69.186947436893890269\"]\n   [\"0x932B540fFd804afC8c7446d8B36d1C5bB7EC5f55\" \"30\"]\n   [\"0x94A0213d0392fc4e75bBEcaA73E82caFB68117a2\" \"18.28296914\"])\n\n  (go (def llw-comp-receivers (<! (<group-transfers-out lw-address comp-address))))\n  ([\"0x0f71DCff39Ab3A817d02b6b3b808FFA21d3f67c1\" \"8373.420744928309622985\"]\n   [\"0xd578653Be7CC96d254CeBC45151Fa8f193d6263B\" \"7492.153181667703287901\"]\n   [\"0xCFfDdeD873554F362Ac02f8Fb1f02E5ada10516f\" \"2149.989549180758865165\"]\n   [\"0x66e96e3784343D07147fFBe13BbA1a8371dde623\" \"255.633459714967885023\"]\n   [\"0x8538E5910c6F80419CD3170c26073Ff238048c9E\" \"157.5\"]\n   [\"0x94A0213d0392fc4e75bBEcaA73E82caFB68117a2\" \"117.491184012235877708\"]\n   [\"0x31503dcb60119A812feE820bb7042752019F2355\" \"108.010363149455361378\"]\n   [\"0x7EeD168D34c79BE34711bbAd222d5d212AB4232E\" \"70.689665030954216752\"])\n\n\n  ;;;; chart 3, 4 LLW Comp Claims\n\n  (def claim-block-nums\n      (sort (vec (set (map :block-number claimed-comp-dps)))))\n\n\n  (defn claimed-block-diffs\n    ([block-nums]\n     (claimed-block-diffs (rest block-nums) (first block-nums) []))\n    ([block-nums prev-block diffs]\n     (if (= (count block-nums) 0)\n       diffs\n       (let [current-block (first block-nums)\n             current-diff (- current-block prev-block)]\n         (recur (rest block-nums) current-block (concat diffs [current-diff]))))))\n\n\n  (def claim-block-diffs\n      (let [diffs (claimed-block-diffs claim-block-nums)]\n        (map (fn [a b] {:claim-n a :diff b})\n             (range (count diffs)) diffs)))\n\n  ;; scatter plot\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 800\n            :height 150\n            :title lw-address\n            :data {:values claim-block-diffs}\n            :encoding {:x {:field :claim-n :type \"quantitative\"}\n                       :y {:field :diff :title \"n blocks from previous claim\" :type \"quantitative\"\n                           :scale {:domain [0,  5000]\n                                   :clamp true}}}\n            :mark {:type \"point\"\n                   :filled true\n                   :color \"green\"}}]]]\n   (. js/document (getElementById \"app\")))\n\n  ;; histogram\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite\n           {:width 800\n            :title lw-address\n            :height 150\n            :data {:values claim-block-diffs}\n            :encoding {:x {:title \"n blocks from previous claim (binned)\"\n                           :bin {:step 100} :field :diff\n                           :scale {:domain [0 10000]\n                                   :clamp true}}\n                       :y {:aggregate \"count\" :title \"count\"}}\n            :mark {:type \"bar\" :color \"green\"}}]]]\n   (. js/document (getElementById \"app\")))\n\n\n\n\n  ;;;;;;; LLW PNL ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  ; PNL = COMP value claimed - gas paid at prices for that day - Compound interest diffs\n\n  ;;; Claimed USD value\n  (go (def claim-blocks\n        (<! (<fetch-blocks claim-block-nums))))\n\n  (go (def comp-days\n        (<! (<historic-gecko-prices (token->address \"COMP\")))))\n\n\n  (def claimed-comp-dps'\n    (map (fn [dp]\n           (let [price (blocknum->geckoprice\n                        comp-days claim-blocks (:block-number dp))\n                   usd-value-claimed (* (:comp-claimed dp) price)\n                   usd-value-claim (* (:comp-claim dp) price)]\n               (into dp {:comp-price price\n                         :usd-value-claim usd-value-claim\n                         :usd-value-claimed usd-value-claimed})))\n           claimed-comp-dps))\n\n  ;; (last claimed-comp-dps')\n  ;; by block 11321862 on novermber 24th, looper whale\n  ;; has claimed 17073 COMP in rewards\n  ;; at current price of $149.30 that is around 2.548M\n  ;; however since looper whale was a constant seller\n  ;; taking daily prices that would be around 2.16M\n  (def comp-value-claimed (:usd-value-claimed (last claimed-comp-dps')))\n\n  ;;; Compound interests\n  (go (def nov24-llw-state\n        (clojure.walk/keywordize-keys\n         (<! (<account-state lw-address :block-number 11321862)))))\n\n  (def ctoken-underlying-prices\n    {\"cDAI\" 1\n     \"cUSDT\" 1\n     \"cUSDC\" 1\n     \"cBAT\" 0.208242\n     \"cETH\" 559.39\n     \"cZRX\" 0.3705})\n\n\n  (defn interest-diff\n    [token-state]\n    (let [token (:symbol token-state)\n          paid\n          (bn (:value\n               (:lifetime_borrow_interest_accrued\n                token-state)))\n          received\n          (bn (:value\n               (:lifetime_supply_interest_accrued token-state)))\n          diff (bignumber.core/- received paid)\n          diff-usd (* diff (get ctoken-underlying-prices token))]\n      {token diff-usd}))\n\n\n  (defn interest-values\n    [account-state]\n    (let [tokens (:tokens account-state)]\n      (apply merge (map interest-diff tokens))))\n\n  (def compound-interest-diffs\n    (interest-values (first (:accounts nov24-llw-state))))\n\n  {\"cUSDC\" 50671.30404647924,\n   \"cETH\" -12.556879863444358,\n   \"cDAI\" -54170.1943721,\n   \"cBAT\" -3113.5224498513276,\n   \"cZRX\" -1798.486841825547,\n   \"cUSDT\" -77308.81287296793}\n\n  (def paid-interests (apply + (vals compound-interest-diffs)))\n  ;; paid a total of -85,732.269370129 USD value in interests\n\n\n  ;; Gas costs\n  ;; There 3 type of cost txs to account for:\n  ;; 1) Compound contract interactions: mint, redeems, repayments, borrows\n  ;; 2) COMP reward claims\n  ;; 3) COMP exchange transfers\n\n  ;; 1) Compound interactions\n\n  ;; ctoken events\n  (go (def dai-events\n        (<! (<pfetch-ctoken-events\n             (. compound/util getAddress \"cDAI\")\n             cdai-init-block last-block 18))))\n\n  (go (def usdc-events\n        (<! (<pfetch-ctoken-events\n             (. compound/util getAddress \"cUSDC\")\n             cusdc-init-block last-block 6))))\n\n\n  (go (def usdt-events\n        (<! (<pfetch-ctoken-events\n             (. compound/util getAddress \"cUSDT\")\n             cusdt-init-block last-block 8))))\n\n\n  ;; whale events\n  (def whale-events-dai (account-ctoken-events dai-events lw-address))\n  (def whale-events-usdc (account-ctoken-events usdc-events lw-address))\n  (def whale-events-usdt (account-ctoken-events usdt-events lw-address))\n\n  (def whale-events-hashes\n    (disj (set (concat (map :hash whale-events-dai)\n                       (map :hash whale-events-usdc)\n                       (map :hash whale-events-usdt)))\n          ;; exclude liquidation event\n          liquidation-hash))\n\n\n\n  (go (def whale-events-txs (<! (<get-trxs whale-events-hashes))))\n\n  (reduce bignumber.core/+ (map total-gas-paid whale-events-txs))\n  ;; paid a total of 33.29 eth in 922 txs, at current prices (544), that is\n  ;; about 18k USD\n\n  ;; 2) COMP reward claims\n\n  (def llw-comp-claim-hashes\n    (set (map :hash llw-comp-rewards)))\n\n  (go (def whale-claims-txs (<! (<get-trxs llw-comp-claim-hashes))))\n\n  (reduce bignumber.core/+ (map total-gas-paid whale-claims-txs))\n  ;; paid a total of 42.65 eth in 1098 txs, at current prices (544), that is\n  ;; about 23k USD\n\n  ;; 3) COMP exchange transfers\n\n  ;; transfers out from llw address\n  (go (def llw-comp-transfers\n        (<! (<user-token-transfers provider comp-address lw-address))))\n\n  (def lw-exchange-accounts\n    #{\"0x0f71DCff39Ab3A817d02b6b3b808FFA21d3f67c1\"\n      \"0xd578653Be7CC96d254CeBC45151Fa8f193d6263B\"\n      \"0xCFfDdeD873554F362Ac02f8Fb1f02E5ada10516f\"})\n\n  (def lw-comp-exchange-transfers\n    (filter #(contains? lw-exchange-accounts (:to %)) lw-comp-transfers))\n\n  (def llw-exchange-hashes\n    (set (map :hash lw-comp-exchange-transfers)))\n\n  (go (def whale-exchange-txs (<! (<get-trxs llw-exchange-hashes))))\n\n  (reduce bignumber.core/+ (map total-gas-paid whale-exchange-txs))\n  ;; paid a total of 1.22 eth across 187 txs, at current prices (544), that is\n  ;; about 663 USD\n\n  (def eth-paid-in-gas\n    (reduce\n     bignumber.core/+\n     [(reduce bignumber.core/+ (map total-gas-paid whale-exchange-txs))\n      (reduce bignumber.core/+ (map total-gas-paid whale-claims-txs))\n      (reduce bignumber.core/+ (map total-gas-paid whale-events-txs))]))\n\n  ;; a total of 77.29 eth paid in gas, at a current price of 544\n  ;; that would be about 42K USD\n\n  ;;;;;;; LLW Mistake Zoomed ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n  (def first-block 11332733)\n\n\n  (go (def lw-state-history-mistake\n        (sort-by :block-number\n                 (mapcat (fn [dp]\n                           [{:side \"Supplied\"\n                             :eth-value (:total-collateral-eth dp)\n                             :block-number (:block-number dp)\n                             :dai (:dai-supplied dp)\n                             :usdc (:usdc-supplied dp)\n                             :usdt (:usdt-supplied dp)\n                             :value (:usd-value-supplied dp)\n                             }\n                            {:side \"Borrowed\"\n                             :eth-value (:total-borrow-eth dp)\n                             :block-number (:block-number dp)\n                             :dai (:dai-borrowed dp)\n                             :usdc (:usdc-borrowed dp)\n                             :usdt (:usdt-borrowed dp)\n                             :value (:usd-value-borrowed dp)}\n                            {:side \"Account Health\"\n                             :block-number (:block-number dp)\n                             :health (:health dp)}])\n                         (<! (<account-state-range\n                              [lw-address]\n                              11282800 11283600 10))))))\n\n  (defn make-whale-plot-concat-mistake\n    [line-points]\n    {:data {:values line-points}\n     :title {:text \"Liquidated Looper Whale's big mistake\"\n             :anchor \"middle\"\n             :color \"#657b83\"\n             :align \"center\"}\n\n\n     :config {;;:background \"#111\"\n              :concat {:spacing 2}\n              ;;:legend {:orient \"top-left\" :symbolDirection \"horizontal\"}\n              :axis {;;:tickColor \"#111\"\n                     ;;:ticks nil\n                     :gridColor \"#657b83\"\n                     :gridOpacity 0.25\n                     :labelColor \"#657b83\"\n                     :titleColor \"#657b83\"}}\n     ;;:resolve {:scale {:y \"independent\" }}\n\n     :vconcat [(historic-whale-layer :health \"Health\"  :y-min 1.0 :y-max 1.5\n                                     :show-rewards false :show-labels false)\n               (historic-whale-layer :value \"USD Value\" :y-min 0 :y-max 140000000\n                                     :show-rewards false :show-labels false)\n               (historic-whale-layer :dai \"DAI\" :y-min 0 :y-max 140000000\n                                     :show-rewards false :show-labels false)\n               (historic-whale-layer :usdc \"USDC\" :y-min 0 :y-max 140000000\n                                     :show-rewards false :show-labels true)]})\n\n\n\n  (reagent/render\n   [:div\n    [:div [oz.core/vega-lite (make-whale-plot-concat-mistake lw-state-history-mistake)]]]\n   (. js/document (getElementById \"app\")))\n\n  )\n\n\n\n\n\n;;;; Find loopers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn dai-loop-factor-old\n  [account-state]\n  (let [supplied-dai (:dai-supplied account-state)\n        borrowed-dai (:dai-borrowed account-state)\n        supplied-usdc (:usdc-supplied account-state)\n        borrowed-usdc (:usdc-borrowed account-state)\n        ;; no usdt as collteral\n        borrowed-usdt (:usdc-borrowed account-state)\n        supplied-usd (+ supplied-dai supplied-usdc)\n        borrowed-usd (+ borrowed-dai borrowed-usdc borrowed-usdt)\n\n        account (:account account-state)\n        factor (if (not= supplied-usd 0)\n                 (if (> borrowed-usd supplied-usd)\n                   (/ supplied-usd borrowed-usd)\n                   (/ borrowed-usd supplied-usd))\n                   0)]\n    {:account account\n     :borrowed-usd borrowed-usd\n     :supplied-usd supplied-usd\n     :borrowed-dai borrowed-dai\n     :loop-factor factor}))\n\n\n\n(comment\n  (go (def liquidated-accounts\n        (let [response\n              (<! (http/get (str \"https://gist.githubusercontent.com/\"\n                                 \"mariorz/d682fa88f8c6437df9429f926cf12da0/\"\n                                 \"raw/d232f37be93f3eca8a99d619cd49233566b9e8a8/\"\n                                 \"compound-liquidated-accounts\")\n                            {:with-credentials? false\n                             :query-params {\"since\" 135}}))]\n          (clojure.string/split\n           (:body response)\n           \"\\n\"))))\n\n  ;;11,332,733 - 1\n  (def snapshot-block-number 11332733)\n\n  (go (def nov26-states\n        (clojure.walk/keywordize-keys\n         (<! (<account-states liquidated-accounts snapshot-block-number :raw true)))))\n\n\n  (go (def snapshot-block\n        (<! (<fetch-blocks [snapshot-block-number]))))\n\n\n  (defn <snapshot-price\n    [token]\n    (go (let [day-prices (<! (<historic-gecko-prices\n                              (token->address token)))\n              day-price (blocknum->geckoprice\n                         day-prices snapshot-block snapshot-block-number)]\n          day-price)))\n\n\n  (go (def snapshot-prices\n        {\"ETH\" (<! (<snapshot-price \"WETH\"))\n         \"COMP\" (<! (<snapshot-price \"COMP\"))\n         \"WBTC\" (<! (<snapshot-price \"WBTC\"))\n         \"BAT\" (<! (<snapshot-price \"BAT\"))\n         \"UNI\" (<! (<snapshot-price \"UNI\"))\n         \"ZRX\" (<! (<snapshot-price \"ZRX\"))\n         \"REP\" (<! (<snapshot-price \"REP\"))\n         \"SAI\" (bn \"1.0\")\n         \"DAI\" (bn \"1.0\")\n         \"USDC\" (bn \"1.0\")\n         \"USDT\" (bn \"1.0\")}))\n\n\n  (defn loop-factor\n    [acctoken-state]\n    (let [token (caddress->token (:address acctoken-state))\n          borrowb (bn (:value (:borrow_balance_underlying acctoken-state)))\n          supplyb (bn (:value (:supply_balance_underlying acctoken-state)))\n          borrowv (bignumber.core/* borrowb (get snapshot-prices token))\n          supplyv (bignumber.core/* supplyb (get snapshot-prices token))\n          lf (if (and (bignumber.core/= borrowv (bn 0))\n                      (bignumber.core/= supplyv (bn 0)))\n               (bn 0.0)\n               (if (bignumber.core/>= borrowv supplyv)\n                 (bignumber.core// supplyv borrowv)\n                 (bignumber.core// borrowv supplyv)))]\n      {:token token\n       :borrow-balance borrowb\n       :supply-balance supplyb\n       :borrow-value borrowv\n       :supply-value supplyv\n       :loop-value (bn-min [borrowv supplyv])\n       :total-value (bn-max [borrowv supplyv])\n       :loop-factor lf}))\n\n\n  (defn loop-factors\n    [account-state]\n    (let [tokens (:tokens account-state)\n          lfactors (map loop-factor tokens)\n          ns-lfactors (filter #(not (contains? #{\"USDC\" \"USDT\" \"DAI\" \"SAI\"} (:token %)))\n                             lfactors)\n          s-lfactors (filter #(contains? #{\"USDC\" \"USDT\" \"DAI\" \"SAI\"} (:token %))\n                              lfactors)\n\n          ns-total-loop-value (if (= (count ns-lfactors) 0)\n                                (bn 0.0)\n                                (reduce bignumber.core/+\n                                        (map :loop-value ns-lfactors)))\n          ns-total-value (if (= (count ns-lfactors) 0)\n                           (bn 0.0)\n                           (reduce bignumber.core/+\n                                   (map :total-value ns-lfactors)))\n\n          s-total-supply (if (= (count s-lfactors) 0)\n                           (bn 0.0)\n                           (reduce bignumber.core/+\n                                   (map :supply-value s-lfactors)))\n\n          s-total-borrow (if (= (count s-lfactors) 0)\n                           (bn 0.0)\n                           (reduce bignumber.core/+\n                                   (map :borrow-value s-lfactors)))\n\n\n          s-total-loop-value (bn-min [s-total-supply s-total-borrow])\n\n          s-total-value (bn-max [s-total-supply s-total-borrow])\n\n          total-value (bignumber.core/+ s-total-value ns-total-value)\n          total-loop-value (bignumber.core/+ ns-total-loop-value s-total-loop-value)\n          lf  (if (bignumber.core/= total-value (bn 0.0))\n                (bn 0.0)\n                (bignumber.core// total-loop-value total-value))\n          health-str (:health account-state)]\n      {:account (:address account-state)\n       :health (if health-str (bn (:value health-str)) (bn 0.0))\n       :loop-factor lf\n       :tokens lfactors}))\n\n\n  (def accounts-lfactors\n    (->> (map loop-factors nov26-states)\n         (sort-by :loop-factor bignumber.core/>)))\n\n\n  (def non-loopers\n    (filter #(bignumber.core/<= (:loop-factor %) (bn 0.01)) accounts-lfactors))\n\n  (def loopers\n    (filter #(bignumber.core/> (:loop-factor %) (bn 0.01)) accounts-lfactors))\n\n\n  (defn token-positions\n    [n]\n    (map (juxt (comp :value :borrow_balance_underlying)\n               (comp :value :supply_balance_underlying)\n               :symbol)\n         (:tokens (first (filter #(= (:address %) (:account (nth non-loopers n)))\n                                 nov26-states)))))\n\n  (defn token-supply-value\n    [tokens token]\n    (let [v (:supply-value (first (filter #(= (:token %) token) tokens)))]\n      (if v v (bn 0.0))))\n\n  (defn token-borrow-value\n    [tokens token]\n    (let [v (:borrow-value (first (filter #(= (:token %) token) tokens)))]\n      (if v v (bn 0.0))))\n\n\n  (def data-csv\n    (concat\n     [\"account,loop-factor,dai s,dai b,usdc s,usdc b,usdt s,usdt b,sai s,sai b,uni s,uni b,eth s,eth b,bat s,bat b,zrx s,zrx b,wbtc s,wbtc b,comp s,comp b,rep s,rep b\"]\n     (map (fn [x] (str (:account x) \",\"\n                       (:loop-factor x) \",\"\n                       (token-borrow-value (:tokens x) \"DAI\") \",\"\n                       (token-supply-value (:tokens x) \"DAI\") \",\"\n                       (token-borrow-value (:tokens x) \"USDC\") \",\"\n                       (token-supply-value (:tokens x) \"USDC\") \",\"\n                       (token-borrow-value (:tokens x) \"USDT\") \",\"\n                       (token-supply-value (:tokens x) \"USDT\") \",\"\n                       (token-borrow-value (:tokens x) \"SAI\") \",\"\n                       (token-supply-value (:tokens x) \"SAI\") \",\"\n                       (token-borrow-value (:tokens x) \"UNI\") \",\"\n                       (token-supply-value (:tokens x) \"UNI\") \",\"\n                       (token-borrow-value (:tokens x) \"ETH\") \",\"\n                       (token-supply-value (:tokens x) \"ETH\") \",\"\n                       (token-borrow-value (:tokens x) \"BAT\") \",\"\n                       (token-supply-value (:tokens x) \"BAT\") \",\"\n                       (token-borrow-value (:tokens x) \"ZRX\") \",\"\n                       (token-supply-value (:tokens x) \"ZRX\") \",\"\n                       (token-borrow-value (:tokens x) \"WBTC\") \",\"\n                       (token-supply-value (:tokens x) \"WBTC\") \",\"\n                       (token-borrow-value (:tokens x) \"COMP\") \",\"\n                       (token-supply-value (:tokens x) \"COMP\") \",\"\n                       (token-borrow-value (:tokens x) \"REP\") \",\"\n                       (token-supply-value (:tokens x) \"REP\")))\n          accounts-lfactors))))\n\n\n;; TODO I think we need to account for\n;; stable coin loop factor across all\n;; not just pre coin, wait no, this should get caught\n;; by the agregared loop factor dollareized\n\n;; DONE\n;; 0x9fd991c006cd1d4b71b7630f305212bb0ef8903a\n;; this account has an incorrect loop factor of 0\n\n;; notes\n;; 0x4ddc2d193948926d02f9b1fe9e1daa0718270ed5\n;; is a sad and worth noting case, wbtc and eth colaterl\n;; only a dai long, liquidated\n;; same with 0xc11b1268c1a384e55c48c2391d8d480264a3a7f4\n\n\n;;;; blob tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\n(defn make-edn-blob [coll]\n  (-> coll\n      str\n      vector\n      clj->js\n      (js/Blob. {:type \"text/edn\"})))\n\n\n\n;; function downloadBlob(blob, name = 'file.txt')\n;; {\n;;   const blobUrl = URL.createObjectURL(blob);\n;;   const link = document.createElement(\"a\");\n;;   link.href = blobUrl;\n;;   link.download = name;\n;;   document.body.appendChild(link);\n;;   link.dispatchEvent(new MouseEvent('click', {bubbles: true,\n;;                                               cancelable: true,\n;;                                               view: window}));\n;;   document.body.removeChild(link);\n;;  }\n\n(defn download-blob [blob, filename]\n  (let [blob-url (js/URL.createObjectURL blob)\n        link (js/document.createElement \"a\")\n        _ (set! (.. link -href) blob-url)\n        _ (set! (.. link -download) filename)\n        _ (js/document.body.appendChild link)\n        ev-params (clj->js {\"bubbles\" true\n                            \"cancelable\" true\n                            \"view\" js/window})\n        ev (js/MouseEvent. \"click\" ev-params)]\n    (link.dispatchEvent ev)\n    (js/document.body.removeChild link)))\n\n\n(defn download-as-edn [coll]\n  (-> coll\n      str\n      vector\n      clj->js\n      (js/Blob. #js {:type \"text/edn\"})\n      js/URL.createObjectURL))\n\n\n\n\n\n\n"]}